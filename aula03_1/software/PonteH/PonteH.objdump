
PonteH.elf:     file format elf32-littlenios2
PonteH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000258c memsz 0x0000258c flags r-x
    LOAD off    0x00004074 vaddr 0x00040074 paddr 0x000225ac align 2**12
         filesz 0x000002d8 memsz 0x000003fc flags rw-
    LOAD off    0x00005000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000074 memsz 0x00000074 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000237c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  00040000  00040000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d8  00040074  000225ac  00004074  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0004034c  00022884  0000434c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00022884  00022884  00005074  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00040470  00040470  00005074  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000638  00000000  00000000  00005098  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007e00  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b26  00000000  00000000  0000d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000030c7  00000000  00000000  0000fff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b30  00000000  00000000  000130c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001d5d  00000000  00000000  00013bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000015ba  00000000  00000000  0001594d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00016f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002c0  00000000  00000000  00016f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00018c46  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00018c49  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00018c55  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00018c56  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00018c57  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00018c62  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00018c6d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00018c78  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000036  00000000  00000000  00018c81  2**0
                  CONTENTS, READONLY
 27 .jdi          0000404c  00000000  00000000  00018cb7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000401a9  00000000  00000000  0001cd03  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
00040074 l    d  .rwdata	00000000 .rwdata
0004034c l    d  .bss	00000000 .bss
00022884 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00040470 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PonteH_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000205b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00040074 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00021000 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00021198 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000212e8 l     F .text	00000038 alt_dev_reg
00040154 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00021724 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0002186c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00021898 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021a6c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00021bcc l     F .text	00000050 alt_get_errno
00021c1c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004036c g     O .bss	00000004 alt_instruction_exception_handler
000210ec g     F .text	0000007c alt_main
00020500 g     F .text	00000080 _puts_r
00040370 g     O .bss	00000100 alt_irq
000225ac g       *ABS*	00000000 __flash_rwdata_start
000204b4 g     F .text	0000004c printf
00021ef4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
0004034c g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00040358 g     O .bss	00000004 errno
00040364 g     O .bss	00000004 alt_argv
00048328 g       *ABS*	00000000 _gp
00021168 g     F .text	00000030 usleep
00040350 g     O .bss	00000004 prev_state
000401a8 g     O .rwdata	00000180 alt_fd_list
00021f18 g     F .text	00000090 alt_find_dev
00021b50 g     F .text	0000007c alt_io_redirect
000225ac g       *ABS*	00000000 __DTOR_END__
00020580 g     F .text	00000014 puts
00022190 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002144c g     F .text	000000ec altera_avalon_jtag_uart_read
00020478 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020d6c g     F .text	00000064 .hidden __udivsi3
00040344 g     O .rwdata	00000004 alt_max_fd
00020e50 g     F .text	000001b0 alt_irq_register
00040328 g     O .rwdata	00000004 _global_impure_ptr
00040470 g       *ABS*	00000000 __bss_end
0004035c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00040180 g     O .rwdata	00000028 alt_dev_null
0002184c g     F .text	00000020 alt_dcache_flush_all
0004034c g       *ABS*	00000000 __ram_rwdata_end
0004033c g     O .rwdata	00000008 alt_dev_list
000211e8 g     F .text	00000100 write
00040074 g       *ABS*	00000000 __ram_rodata_end
00020dd0 g     F .text	00000058 .hidden __umodsi3
00040470 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020308 g     F .text	00000068 init_pio
000225ac g       *ABS*	00000000 __CTOR_LIST__
0005f400 g       *ABS*	00000000 __alt_stack_pointer
00021538 g     F .text	00000094 altera_avalon_jtag_uart_write
0002061c g     F .text	0000052c ___vfprintf_internal_r
000223e8 g     F .text	00000190 __call_exitprocs
00020230 g     F .text	0000003c _start
00021358 g     F .text	00000034 alt_sys_init
00022290 g     F .text	00000158 __register_exitproc
00020e28 g     F .text	00000028 .hidden __mulsi3
00040074 g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0002138c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000220bc g     F .text	000000d4 alt_get_fd
000215cc g     F .text	00000158 alt_busy_sleep
00022260 g     F .text	00000030 memcmp
00040470 g       *ABS*	00000000 __alt_stack_base
00021fa8 g     F .text	00000114 alt_find_file
000218e8 g     F .text	000000a4 alt_dev_llist_insert
00020b64 g     F .text	000000b8 __sfvwrite_small_dev
0004034c g       *ABS*	00000000 __bss_start
00020370 g     F .text	00000108 main
00040368 g     O .bss	00000004 alt_envp
000213ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040348 g     O .rwdata	00000004 alt_errno
00020c74 g     F .text	00000084 .hidden __divsi3
000225ac g       *ABS*	00000000 __CTOR_END__
00040000 g       *ABS*	00000000 __flash_rodata_start
000225ac g       *ABS*	00000000 __DTOR_LIST__
00021320 g     F .text	00000038 alt_irq_init
00021e70 g     F .text	00000084 alt_release_fd
0002222c g     F .text	00000014 atexit
00020c1c g     F .text	00000058 _write_r
0004032c g     O .rwdata	00000004 _impure_ptr
00040360 g     O .bss	00000004 alt_argc
000219ec g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00040354 g     O .bss	00000001 reversed
00040334 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0004034c g       *ABS*	00000000 _edata
00040470 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00022240 g     F .text	00000020 exit
00020cf8 g     F .text	00000074 .hidden __modsi3
0005f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00022578 g     F .text	00000034 _exit
00020594 g     F .text	0000001c strlen
00021d10 g     F .text	00000160 open
00021a4c g     F .text	00000020 alt_icache_flush_all
00040330 g     O .rwdata	00000004 alt_priority_mask
00020b48 g     F .text	0000001c __vfprintf_internal
0002198c g     F .text	00000060 _do_ctors
0002026c g     F .text	0000009c handle_button_interrupts
00021774 g     F .text	000000d8 close
00021068 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	1080dc04 	addi	r2,r2,880
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	1080dc04 	addi	r2,r2,880
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01117 	ldw	r2,-32700(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01117 	ldw	r2,-32700(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2023c:	d6a0ca14 	ori	gp,gp,33576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20244:	1080d314 	ori	r2,r2,844

    movhi r3, %hi(__bss_end)
   20248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2024c:	18c11c14 	ori	r3,r3,1136

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00210680 	call	21068 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00210ec0 	call	210ec <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <alt_after_alt_main>

0002026c <handle_button_interrupts>:

// LED Peripheral
#define REG_DATA_OFFSET 1

void handle_button_interrupts(void *context, alt_u32 id)
{
   2026c:	defffb04 	addi	sp,sp,-20
   20270:	dfc00415 	stw	ra,16(sp)
   20274:	df000315 	stw	fp,12(sp)
   20278:	df000304 	addi	fp,sp,12
   2027c:	e13ffe15 	stw	r4,-8(fp)
   20280:	e17fff15 	stw	r5,-4(fp)

	volatile int *edge_capture_ptr = (volatile int *) context;
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	e0bffd15 	stw	r2,-12(fp)
//	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   2028c:	0007883a 	mov	r3,zero
   20290:	008001b4 	movhi	r2,6
   20294:	10840b04 	addi	r2,r2,4140
   20298:	10c00035 	stwio	r3,0(r2)
//	*reversed = (*prev_state != *edge_capture_ptr) ?
//			!*reversed : *reversed;
	reversed = !reversed;
   2029c:	00800134 	movhi	r2,4
   202a0:	1080d504 	addi	r2,r2,852
   202a4:	10800003 	ldbu	r2,0(r2)
   202a8:	10803fcc 	andi	r2,r2,255
   202ac:	1080201c 	xori	r2,r2,128
   202b0:	10bfe004 	addi	r2,r2,-128
   202b4:	1005003a 	cmpeq	r2,r2,zero
   202b8:	1007883a 	mov	r3,r2
   202bc:	00800134 	movhi	r2,4
   202c0:	1080d504 	addi	r2,r2,852
   202c4:	10c00005 	stb	r3,0(r2)
	printf("hello from interrupt -- %d\n", reversed);
   202c8:	00800134 	movhi	r2,4
   202cc:	1080d504 	addi	r2,r2,852
   202d0:	10800003 	ldbu	r2,0(r2)
   202d4:	10803fcc 	andi	r2,r2,255
   202d8:	1080201c 	xori	r2,r2,128
   202dc:	10bfe004 	addi	r2,r2,-128
   202e0:	100b883a 	mov	r5,r2
   202e4:	01000134 	movhi	r4,4
   202e8:	21000004 	addi	r4,r4,0
   202ec:	00204b40 	call	204b4 <printf>
}
   202f0:	0001883a 	nop
   202f4:	e037883a 	mov	sp,fp
   202f8:	dfc00117 	ldw	ra,4(sp)
   202fc:	df000017 	ldw	fp,0(sp)
   20300:	dec00204 	addi	sp,sp,8
   20304:	f800283a 	ret

00020308 <init_pio>:

void init_pio()
{
   20308:	defffd04 	addi	sp,sp,-12
   2030c:	dfc00215 	stw	ra,8(sp)
   20310:	df000115 	stw	fp,4(sp)
   20314:	df000104 	addi	fp,sp,4
	void *edge_capture_ptr = (void *) &edge_capture;
   20318:	00800134 	movhi	r2,4
   2031c:	1080d304 	addi	r2,r2,844
   20320:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
   20324:	00c003c4 	movi	r3,15
   20328:	008001b4 	movhi	r2,6
   2032c:	10840a04 	addi	r2,r2,4136
   20330:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   20334:	0007883a 	mov	r3,zero
   20338:	008001b4 	movhi	r2,6
   2033c:	10840b04 	addi	r2,r2,4140
   20340:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(PIO_1_IRQ, edge_capture_ptr,
   20344:	018000b4 	movhi	r6,2
   20348:	31809b04 	addi	r6,r6,620
   2034c:	e17fff17 	ldw	r5,-4(fp)
   20350:	0009883a 	mov	r4,zero
   20354:	0020e500 	call	20e50 <alt_irq_register>
			handle_button_interrupts);
}
   20358:	0001883a 	nop
   2035c:	e037883a 	mov	sp,fp
   20360:	dfc00117 	ldw	ra,4(sp)
   20364:	df000017 	ldw	fp,0(sp)
   20368:	dec00204 	addi	sp,sp,8
   2036c:	f800283a 	ret

00020370 <main>:

int main(void){
   20370:	defffb04 	addi	sp,sp,-20
   20374:	dfc00415 	stw	ra,16(sp)
   20378:	df000315 	stw	fp,12(sp)
   2037c:	df000304 	addi	fp,sp,12
  int led = 0;
   20380:	e03ffd15 	stw	zero,-12(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20384:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_but = (unsigned int *) PIO_1_BASE;
   20388:	008001b4 	movhi	r2,6
   2038c:	10840804 	addi	r2,r2,4128
   20390:	e0bfff15 	stw	r2,-4(fp)

  *prev_state = 0;
   20394:	00800134 	movhi	r2,4
   20398:	1080d404 	addi	r2,r2,848
   2039c:	10800017 	ldw	r2,0(r2)
   203a0:	10000015 	stw	zero,0(r2)
  reversed = 0;
   203a4:	00800134 	movhi	r2,4
   203a8:	1080d504 	addi	r2,r2,852
   203ac:	10000005 	stb	zero,0(r2)
  init_pio();
   203b0:	00203080 	call	20308 <init_pio>

#ifndef SIM
  printf("Embarcados++ \n");
   203b4:	01000134 	movhi	r4,4
   203b8:	21000704 	addi	r4,r4,28
   203bc:	00205800 	call	20580 <puts>
#endif

  while(1){
	  if (led < 4 && led > -1){
   203c0:	e0bffd17 	ldw	r2,-12(fp)
   203c4:	10800108 	cmpgei	r2,r2,4
   203c8:	1000241e 	bne	r2,zero,2045c <main+0xec>
   203cc:	e0bffd17 	ldw	r2,-12(fp)
   203d0:	10002216 	blt	r2,zero,2045c <main+0xec>
		  *(p_led+REG_DATA_OFFSET) = (0x1 << led);
   203d4:	e0bffe17 	ldw	r2,-8(fp)
   203d8:	10800104 	addi	r2,r2,4
   203dc:	01000044 	movi	r4,1
   203e0:	e0fffd17 	ldw	r3,-12(fp)
   203e4:	20c6983a 	sll	r3,r4,r3
   203e8:	10c00015 	stw	r3,0(r2)
		  printf("reversed: %d\n", reversed);
   203ec:	00800134 	movhi	r2,4
   203f0:	1080d504 	addi	r2,r2,852
   203f4:	10800003 	ldbu	r2,0(r2)
   203f8:	10803fcc 	andi	r2,r2,255
   203fc:	1080201c 	xori	r2,r2,128
   20400:	10bfe004 	addi	r2,r2,-128
   20404:	100b883a 	mov	r5,r2
   20408:	01000134 	movhi	r4,4
   2040c:	21000b04 	addi	r4,r4,44
   20410:	00204b40 	call	204b4 <printf>
		  if (reversed)
   20414:	00800134 	movhi	r2,4
   20418:	1080d504 	addi	r2,r2,852
   2041c:	10800003 	ldbu	r2,0(r2)
   20420:	10803fcc 	andi	r2,r2,255
   20424:	1080201c 	xori	r2,r2,128
   20428:	10bfe004 	addi	r2,r2,-128
   2042c:	10000426 	beq	r2,zero,20440 <main+0xd0>
			  led++;
   20430:	e0bffd17 	ldw	r2,-12(fp)
   20434:	10800044 	addi	r2,r2,1
   20438:	e0bffd15 	stw	r2,-12(fp)
   2043c:	00000306 	br	2044c <main+0xdc>
		  else
			  led--;
   20440:	e0bffd17 	ldw	r2,-12(fp)
   20444:	10bfffc4 	addi	r2,r2,-1
   20448:	e0bffd15 	stw	r2,-12(fp)
#ifndef SIM
          usleep(500000); // remover durante a simulação
   2044c:	01000234 	movhi	r4,8
   20450:	21284804 	addi	r4,r4,-24288
   20454:	00211680 	call	21168 <usleep>
#ifndef SIM
  printf("Embarcados++ \n");
#endif

  while(1){
	  if (led < 4 && led > -1){
   20458:	00000606 	br	20474 <main+0x104>
#ifndef SIM
          usleep(500000); // remover durante a simulação
#endif
	  }
	  else{
		  led = (led < 0) ? 3 : 0;
   2045c:	e0bffd17 	ldw	r2,-12(fp)
   20460:	1000020e 	bge	r2,zero,2046c <main+0xfc>
   20464:	008000c4 	movi	r2,3
   20468:	00000106 	br	20470 <main+0x100>
   2046c:	0005883a 	mov	r2,zero
   20470:	e0bffd15 	stw	r2,-12(fp)
	  }

  };
   20474:	003fd206 	br	203c0 <main+0x50>

00020478 <_printf_r>:
   20478:	defffd04 	addi	sp,sp,-12
   2047c:	dfc00015 	stw	ra,0(sp)
   20480:	d9800115 	stw	r6,4(sp)
   20484:	d9c00215 	stw	r7,8(sp)
   20488:	20c00217 	ldw	r3,8(r4)
   2048c:	018000b4 	movhi	r6,2
   20490:	3182d904 	addi	r6,r6,2916
   20494:	19800115 	stw	r6,4(r3)
   20498:	280d883a 	mov	r6,r5
   2049c:	21400217 	ldw	r5,8(r4)
   204a0:	d9c00104 	addi	r7,sp,4
   204a4:	002061c0 	call	2061c <___vfprintf_internal_r>
   204a8:	dfc00017 	ldw	ra,0(sp)
   204ac:	dec00304 	addi	sp,sp,12
   204b0:	f800283a 	ret

000204b4 <printf>:
   204b4:	defffc04 	addi	sp,sp,-16
   204b8:	dfc00015 	stw	ra,0(sp)
   204bc:	d9400115 	stw	r5,4(sp)
   204c0:	d9800215 	stw	r6,8(sp)
   204c4:	d9c00315 	stw	r7,12(sp)
   204c8:	00800134 	movhi	r2,4
   204cc:	1080cb04 	addi	r2,r2,812
   204d0:	10800017 	ldw	r2,0(r2)
   204d4:	014000b4 	movhi	r5,2
   204d8:	2942d904 	addi	r5,r5,2916
   204dc:	10c00217 	ldw	r3,8(r2)
   204e0:	d9800104 	addi	r6,sp,4
   204e4:	19400115 	stw	r5,4(r3)
   204e8:	200b883a 	mov	r5,r4
   204ec:	11000217 	ldw	r4,8(r2)
   204f0:	0020b480 	call	20b48 <__vfprintf_internal>
   204f4:	dfc00017 	ldw	ra,0(sp)
   204f8:	dec00404 	addi	sp,sp,16
   204fc:	f800283a 	ret

00020500 <_puts_r>:
   20500:	defffd04 	addi	sp,sp,-12
   20504:	dc000015 	stw	r16,0(sp)
   20508:	2021883a 	mov	r16,r4
   2050c:	2809883a 	mov	r4,r5
   20510:	dfc00215 	stw	ra,8(sp)
   20514:	dc400115 	stw	r17,4(sp)
   20518:	2823883a 	mov	r17,r5
   2051c:	00205940 	call	20594 <strlen>
   20520:	81400217 	ldw	r5,8(r16)
   20524:	010000b4 	movhi	r4,2
   20528:	2102d904 	addi	r4,r4,2916
   2052c:	29000115 	stw	r4,4(r5)
   20530:	100f883a 	mov	r7,r2
   20534:	880d883a 	mov	r6,r17
   20538:	8009883a 	mov	r4,r16
   2053c:	0020b640 	call	20b64 <__sfvwrite_small_dev>
   20540:	00ffffc4 	movi	r3,-1
   20544:	10c00926 	beq	r2,r3,2056c <_puts_r+0x6c>
   20548:	81400217 	ldw	r5,8(r16)
   2054c:	01800134 	movhi	r6,4
   20550:	01c00044 	movi	r7,1
   20554:	28800117 	ldw	r2,4(r5)
   20558:	31800f04 	addi	r6,r6,60
   2055c:	8009883a 	mov	r4,r16
   20560:	103ee83a 	callr	r2
   20564:	10bfffe0 	cmpeqi	r2,r2,-1
   20568:	0085c83a 	sub	r2,zero,r2
   2056c:	dfc00217 	ldw	ra,8(sp)
   20570:	dc400117 	ldw	r17,4(sp)
   20574:	dc000017 	ldw	r16,0(sp)
   20578:	dec00304 	addi	sp,sp,12
   2057c:	f800283a 	ret

00020580 <puts>:
   20580:	00800134 	movhi	r2,4
   20584:	1080cb04 	addi	r2,r2,812
   20588:	200b883a 	mov	r5,r4
   2058c:	11000017 	ldw	r4,0(r2)
   20590:	00205001 	jmpi	20500 <_puts_r>

00020594 <strlen>:
   20594:	2005883a 	mov	r2,r4
   20598:	10c00007 	ldb	r3,0(r2)
   2059c:	18000226 	beq	r3,zero,205a8 <strlen+0x14>
   205a0:	10800044 	addi	r2,r2,1
   205a4:	003ffc06 	br	20598 <strlen+0x4>
   205a8:	1105c83a 	sub	r2,r2,r4
   205ac:	f800283a 	ret

000205b0 <print_repeat>:
   205b0:	defffb04 	addi	sp,sp,-20
   205b4:	dc800315 	stw	r18,12(sp)
   205b8:	dc400215 	stw	r17,8(sp)
   205bc:	dc000115 	stw	r16,4(sp)
   205c0:	dfc00415 	stw	ra,16(sp)
   205c4:	2025883a 	mov	r18,r4
   205c8:	2823883a 	mov	r17,r5
   205cc:	d9800005 	stb	r6,0(sp)
   205d0:	3821883a 	mov	r16,r7
   205d4:	04000a0e 	bge	zero,r16,20600 <print_repeat+0x50>
   205d8:	88800117 	ldw	r2,4(r17)
   205dc:	01c00044 	movi	r7,1
   205e0:	d80d883a 	mov	r6,sp
   205e4:	880b883a 	mov	r5,r17
   205e8:	9009883a 	mov	r4,r18
   205ec:	103ee83a 	callr	r2
   205f0:	843fffc4 	addi	r16,r16,-1
   205f4:	103ff726 	beq	r2,zero,205d4 <print_repeat+0x24>
   205f8:	00bfffc4 	movi	r2,-1
   205fc:	00000106 	br	20604 <print_repeat+0x54>
   20600:	0005883a 	mov	r2,zero
   20604:	dfc00417 	ldw	ra,16(sp)
   20608:	dc800317 	ldw	r18,12(sp)
   2060c:	dc400217 	ldw	r17,8(sp)
   20610:	dc000117 	ldw	r16,4(sp)
   20614:	dec00504 	addi	sp,sp,20
   20618:	f800283a 	ret

0002061c <___vfprintf_internal_r>:
   2061c:	deffe504 	addi	sp,sp,-108
   20620:	d8c00804 	addi	r3,sp,32
   20624:	ddc01815 	stw	r23,96(sp)
   20628:	dd801715 	stw	r22,92(sp)
   2062c:	dd401615 	stw	r21,88(sp)
   20630:	dd001515 	stw	r20,84(sp)
   20634:	dcc01415 	stw	r19,80(sp)
   20638:	dc801315 	stw	r18,76(sp)
   2063c:	dc401215 	stw	r17,72(sp)
   20640:	dc001115 	stw	r16,68(sp)
   20644:	dfc01a15 	stw	ra,104(sp)
   20648:	df001915 	stw	fp,100(sp)
   2064c:	2029883a 	mov	r20,r4
   20650:	2823883a 	mov	r17,r5
   20654:	382d883a 	mov	r22,r7
   20658:	d9800f15 	stw	r6,60(sp)
   2065c:	0021883a 	mov	r16,zero
   20660:	d8000e15 	stw	zero,56(sp)
   20664:	d8000a15 	stw	zero,40(sp)
   20668:	002b883a 	mov	r21,zero
   2066c:	0027883a 	mov	r19,zero
   20670:	0025883a 	mov	r18,zero
   20674:	d8000c15 	stw	zero,48(sp)
   20678:	d8000b15 	stw	zero,44(sp)
   2067c:	002f883a 	mov	r23,zero
   20680:	d8c00915 	stw	r3,36(sp)
   20684:	d8c00f17 	ldw	r3,60(sp)
   20688:	19000003 	ldbu	r4,0(r3)
   2068c:	20803fcc 	andi	r2,r4,255
   20690:	1080201c 	xori	r2,r2,128
   20694:	10bfe004 	addi	r2,r2,-128
   20698:	10011e26 	beq	r2,zero,20b14 <___vfprintf_internal_r+0x4f8>
   2069c:	00c00044 	movi	r3,1
   206a0:	b8c01426 	beq	r23,r3,206f4 <___vfprintf_internal_r+0xd8>
   206a4:	1dc00216 	blt	r3,r23,206b0 <___vfprintf_internal_r+0x94>
   206a8:	b8000626 	beq	r23,zero,206c4 <___vfprintf_internal_r+0xa8>
   206ac:	00011506 	br	20b04 <___vfprintf_internal_r+0x4e8>
   206b0:	01400084 	movi	r5,2
   206b4:	b9401d26 	beq	r23,r5,2072c <___vfprintf_internal_r+0x110>
   206b8:	014000c4 	movi	r5,3
   206bc:	b9402b26 	beq	r23,r5,2076c <___vfprintf_internal_r+0x150>
   206c0:	00011006 	br	20b04 <___vfprintf_internal_r+0x4e8>
   206c4:	01400944 	movi	r5,37
   206c8:	1140fc26 	beq	r2,r5,20abc <___vfprintf_internal_r+0x4a0>
   206cc:	88800117 	ldw	r2,4(r17)
   206d0:	d9000005 	stb	r4,0(sp)
   206d4:	01c00044 	movi	r7,1
   206d8:	d80d883a 	mov	r6,sp
   206dc:	880b883a 	mov	r5,r17
   206e0:	a009883a 	mov	r4,r20
   206e4:	103ee83a 	callr	r2
   206e8:	1000d81e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   206ec:	84000044 	addi	r16,r16,1
   206f0:	00010406 	br	20b04 <___vfprintf_internal_r+0x4e8>
   206f4:	01400c04 	movi	r5,48
   206f8:	1140fa26 	beq	r2,r5,20ae4 <___vfprintf_internal_r+0x4c8>
   206fc:	01400944 	movi	r5,37
   20700:	11400a1e 	bne	r2,r5,2072c <___vfprintf_internal_r+0x110>
   20704:	d8800005 	stb	r2,0(sp)
   20708:	88800117 	ldw	r2,4(r17)
   2070c:	b80f883a 	mov	r7,r23
   20710:	d80d883a 	mov	r6,sp
   20714:	880b883a 	mov	r5,r17
   20718:	a009883a 	mov	r4,r20
   2071c:	103ee83a 	callr	r2
   20720:	1000ca1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20724:	84000044 	addi	r16,r16,1
   20728:	0000f506 	br	20b00 <___vfprintf_internal_r+0x4e4>
   2072c:	25fff404 	addi	r23,r4,-48
   20730:	bdc03fcc 	andi	r23,r23,255
   20734:	00c00244 	movi	r3,9
   20738:	1dc00936 	bltu	r3,r23,20760 <___vfprintf_internal_r+0x144>
   2073c:	00bfffc4 	movi	r2,-1
   20740:	90800426 	beq	r18,r2,20754 <___vfprintf_internal_r+0x138>
   20744:	01400284 	movi	r5,10
   20748:	9009883a 	mov	r4,r18
   2074c:	0020e280 	call	20e28 <__mulsi3>
   20750:	00000106 	br	20758 <___vfprintf_internal_r+0x13c>
   20754:	0005883a 	mov	r2,zero
   20758:	b8a5883a 	add	r18,r23,r2
   2075c:	0000e206 	br	20ae8 <___vfprintf_internal_r+0x4cc>
   20760:	01400b84 	movi	r5,46
   20764:	1140e426 	beq	r2,r5,20af8 <___vfprintf_internal_r+0x4dc>
   20768:	05c00084 	movi	r23,2
   2076c:	213ff404 	addi	r4,r4,-48
   20770:	27003fcc 	andi	fp,r4,255
   20774:	00c00244 	movi	r3,9
   20778:	1f000936 	bltu	r3,fp,207a0 <___vfprintf_internal_r+0x184>
   2077c:	00bfffc4 	movi	r2,-1
   20780:	98800426 	beq	r19,r2,20794 <___vfprintf_internal_r+0x178>
   20784:	01400284 	movi	r5,10
   20788:	9809883a 	mov	r4,r19
   2078c:	0020e280 	call	20e28 <__mulsi3>
   20790:	00000106 	br	20798 <___vfprintf_internal_r+0x17c>
   20794:	0005883a 	mov	r2,zero
   20798:	e0a7883a 	add	r19,fp,r2
   2079c:	0000d906 	br	20b04 <___vfprintf_internal_r+0x4e8>
   207a0:	00c01b04 	movi	r3,108
   207a4:	10c0d226 	beq	r2,r3,20af0 <___vfprintf_internal_r+0x4d4>
   207a8:	013fffc4 	movi	r4,-1
   207ac:	99000226 	beq	r19,r4,207b8 <___vfprintf_internal_r+0x19c>
   207b0:	d8000b15 	stw	zero,44(sp)
   207b4:	00000106 	br	207bc <___vfprintf_internal_r+0x1a0>
   207b8:	04c00044 	movi	r19,1
   207bc:	01001a44 	movi	r4,105
   207c0:	11001626 	beq	r2,r4,2081c <___vfprintf_internal_r+0x200>
   207c4:	20800916 	blt	r4,r2,207ec <___vfprintf_internal_r+0x1d0>
   207c8:	010018c4 	movi	r4,99
   207cc:	11008826 	beq	r2,r4,209f0 <___vfprintf_internal_r+0x3d4>
   207d0:	01001904 	movi	r4,100
   207d4:	11001126 	beq	r2,r4,2081c <___vfprintf_internal_r+0x200>
   207d8:	01001604 	movi	r4,88
   207dc:	1100c81e 	bne	r2,r4,20b00 <___vfprintf_internal_r+0x4e4>
   207e0:	00c00044 	movi	r3,1
   207e4:	d8c00e15 	stw	r3,56(sp)
   207e8:	00001506 	br	20840 <___vfprintf_internal_r+0x224>
   207ec:	01001cc4 	movi	r4,115
   207f0:	11009826 	beq	r2,r4,20a54 <___vfprintf_internal_r+0x438>
   207f4:	20800416 	blt	r4,r2,20808 <___vfprintf_internal_r+0x1ec>
   207f8:	01001bc4 	movi	r4,111
   207fc:	1100c01e 	bne	r2,r4,20b00 <___vfprintf_internal_r+0x4e4>
   20800:	05400204 	movi	r21,8
   20804:	00000f06 	br	20844 <___vfprintf_internal_r+0x228>
   20808:	01001d44 	movi	r4,117
   2080c:	11000d26 	beq	r2,r4,20844 <___vfprintf_internal_r+0x228>
   20810:	01001e04 	movi	r4,120
   20814:	11000a26 	beq	r2,r4,20840 <___vfprintf_internal_r+0x224>
   20818:	0000b906 	br	20b00 <___vfprintf_internal_r+0x4e4>
   2081c:	d8c00a17 	ldw	r3,40(sp)
   20820:	b7000104 	addi	fp,r22,4
   20824:	18000726 	beq	r3,zero,20844 <___vfprintf_internal_r+0x228>
   20828:	df000d15 	stw	fp,52(sp)
   2082c:	b5c00017 	ldw	r23,0(r22)
   20830:	b800080e 	bge	r23,zero,20854 <___vfprintf_internal_r+0x238>
   20834:	05efc83a 	sub	r23,zero,r23
   20838:	02400044 	movi	r9,1
   2083c:	00000606 	br	20858 <___vfprintf_internal_r+0x23c>
   20840:	05400404 	movi	r21,16
   20844:	b0c00104 	addi	r3,r22,4
   20848:	d8c00d15 	stw	r3,52(sp)
   2084c:	b5c00017 	ldw	r23,0(r22)
   20850:	d8000a15 	stw	zero,40(sp)
   20854:	0013883a 	mov	r9,zero
   20858:	d839883a 	mov	fp,sp
   2085c:	b8001726 	beq	r23,zero,208bc <___vfprintf_internal_r+0x2a0>
   20860:	a80b883a 	mov	r5,r21
   20864:	b809883a 	mov	r4,r23
   20868:	da401015 	stw	r9,64(sp)
   2086c:	0020d6c0 	call	20d6c <__udivsi3>
   20870:	a80b883a 	mov	r5,r21
   20874:	1009883a 	mov	r4,r2
   20878:	102d883a 	mov	r22,r2
   2087c:	0020e280 	call	20e28 <__mulsi3>
   20880:	b885c83a 	sub	r2,r23,r2
   20884:	00c00244 	movi	r3,9
   20888:	da401017 	ldw	r9,64(sp)
   2088c:	18800216 	blt	r3,r2,20898 <___vfprintf_internal_r+0x27c>
   20890:	10800c04 	addi	r2,r2,48
   20894:	00000506 	br	208ac <___vfprintf_internal_r+0x290>
   20898:	d8c00e17 	ldw	r3,56(sp)
   2089c:	18000226 	beq	r3,zero,208a8 <___vfprintf_internal_r+0x28c>
   208a0:	10800dc4 	addi	r2,r2,55
   208a4:	00000106 	br	208ac <___vfprintf_internal_r+0x290>
   208a8:	108015c4 	addi	r2,r2,87
   208ac:	e0800005 	stb	r2,0(fp)
   208b0:	b02f883a 	mov	r23,r22
   208b4:	e7000044 	addi	fp,fp,1
   208b8:	003fe806 	br	2085c <___vfprintf_internal_r+0x240>
   208bc:	e6efc83a 	sub	r23,fp,sp
   208c0:	9dc5c83a 	sub	r2,r19,r23
   208c4:	0080090e 	bge	zero,r2,208ec <___vfprintf_internal_r+0x2d0>
   208c8:	e085883a 	add	r2,fp,r2
   208cc:	01400c04 	movi	r5,48
   208d0:	d8c00917 	ldw	r3,36(sp)
   208d4:	e009883a 	mov	r4,fp
   208d8:	e0c0032e 	bgeu	fp,r3,208e8 <___vfprintf_internal_r+0x2cc>
   208dc:	e7000044 	addi	fp,fp,1
   208e0:	21400005 	stb	r5,0(r4)
   208e4:	e0bffa1e 	bne	fp,r2,208d0 <___vfprintf_internal_r+0x2b4>
   208e8:	e6efc83a 	sub	r23,fp,sp
   208ec:	d8c00b17 	ldw	r3,44(sp)
   208f0:	4dd1883a 	add	r8,r9,r23
   208f4:	922dc83a 	sub	r22,r18,r8
   208f8:	18001626 	beq	r3,zero,20954 <___vfprintf_internal_r+0x338>
   208fc:	48000a26 	beq	r9,zero,20928 <___vfprintf_internal_r+0x30c>
   20900:	00800b44 	movi	r2,45
   20904:	d8800805 	stb	r2,32(sp)
   20908:	88800117 	ldw	r2,4(r17)
   2090c:	01c00044 	movi	r7,1
   20910:	d9800804 	addi	r6,sp,32
   20914:	880b883a 	mov	r5,r17
   20918:	a009883a 	mov	r4,r20
   2091c:	103ee83a 	callr	r2
   20920:	10004a1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20924:	84000044 	addi	r16,r16,1
   20928:	0580070e 	bge	zero,r22,20948 <___vfprintf_internal_r+0x32c>
   2092c:	b00f883a 	mov	r7,r22
   20930:	01800c04 	movi	r6,48
   20934:	880b883a 	mov	r5,r17
   20938:	a009883a 	mov	r4,r20
   2093c:	00205b00 	call	205b0 <print_repeat>
   20940:	1000421e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20944:	85a1883a 	add	r16,r16,r22
   20948:	e02d883a 	mov	r22,fp
   2094c:	bf2fc83a 	sub	r23,r23,fp
   20950:	00002006 	br	209d4 <___vfprintf_internal_r+0x3b8>
   20954:	0580090e 	bge	zero,r22,2097c <___vfprintf_internal_r+0x360>
   20958:	b00f883a 	mov	r7,r22
   2095c:	01800804 	movi	r6,32
   20960:	880b883a 	mov	r5,r17
   20964:	a009883a 	mov	r4,r20
   20968:	da401015 	stw	r9,64(sp)
   2096c:	00205b00 	call	205b0 <print_repeat>
   20970:	da401017 	ldw	r9,64(sp)
   20974:	1000351e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20978:	85a1883a 	add	r16,r16,r22
   2097c:	483ff226 	beq	r9,zero,20948 <___vfprintf_internal_r+0x32c>
   20980:	00800b44 	movi	r2,45
   20984:	d8800805 	stb	r2,32(sp)
   20988:	88800117 	ldw	r2,4(r17)
   2098c:	01c00044 	movi	r7,1
   20990:	d9800804 	addi	r6,sp,32
   20994:	880b883a 	mov	r5,r17
   20998:	a009883a 	mov	r4,r20
   2099c:	103ee83a 	callr	r2
   209a0:	10002a1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   209a4:	84000044 	addi	r16,r16,1
   209a8:	003fe706 	br	20948 <___vfprintf_internal_r+0x32c>
   209ac:	b5bfffc4 	addi	r22,r22,-1
   209b0:	b0800003 	ldbu	r2,0(r22)
   209b4:	01c00044 	movi	r7,1
   209b8:	d9800804 	addi	r6,sp,32
   209bc:	d8800805 	stb	r2,32(sp)
   209c0:	88800117 	ldw	r2,4(r17)
   209c4:	880b883a 	mov	r5,r17
   209c8:	a009883a 	mov	r4,r20
   209cc:	103ee83a 	callr	r2
   209d0:	10001e1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   209d4:	8585c83a 	sub	r2,r16,r22
   209d8:	b5c9883a 	add	r4,r22,r23
   209dc:	e085883a 	add	r2,fp,r2
   209e0:	013ff216 	blt	zero,r4,209ac <___vfprintf_internal_r+0x390>
   209e4:	1021883a 	mov	r16,r2
   209e8:	dd800d17 	ldw	r22,52(sp)
   209ec:	00004406 	br	20b00 <___vfprintf_internal_r+0x4e4>
   209f0:	00800044 	movi	r2,1
   209f4:	1480080e 	bge	r2,r18,20a18 <___vfprintf_internal_r+0x3fc>
   209f8:	95ffffc4 	addi	r23,r18,-1
   209fc:	b80f883a 	mov	r7,r23
   20a00:	01800804 	movi	r6,32
   20a04:	880b883a 	mov	r5,r17
   20a08:	a009883a 	mov	r4,r20
   20a0c:	00205b00 	call	205b0 <print_repeat>
   20a10:	10000e1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20a14:	85e1883a 	add	r16,r16,r23
   20a18:	b0800017 	ldw	r2,0(r22)
   20a1c:	01c00044 	movi	r7,1
   20a20:	d80d883a 	mov	r6,sp
   20a24:	d8800005 	stb	r2,0(sp)
   20a28:	88800117 	ldw	r2,4(r17)
   20a2c:	880b883a 	mov	r5,r17
   20a30:	a009883a 	mov	r4,r20
   20a34:	b5c00104 	addi	r23,r22,4
   20a38:	103ee83a 	callr	r2
   20a3c:	1000031e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20a40:	84000044 	addi	r16,r16,1
   20a44:	b82d883a 	mov	r22,r23
   20a48:	00002d06 	br	20b00 <___vfprintf_internal_r+0x4e4>
   20a4c:	00bfffc4 	movi	r2,-1
   20a50:	00003106 	br	20b18 <___vfprintf_internal_r+0x4fc>
   20a54:	b5c00017 	ldw	r23,0(r22)
   20a58:	b7000104 	addi	fp,r22,4
   20a5c:	b809883a 	mov	r4,r23
   20a60:	00205940 	call	20594 <strlen>
   20a64:	9091c83a 	sub	r8,r18,r2
   20a68:	102d883a 	mov	r22,r2
   20a6c:	0200090e 	bge	zero,r8,20a94 <___vfprintf_internal_r+0x478>
   20a70:	400f883a 	mov	r7,r8
   20a74:	01800804 	movi	r6,32
   20a78:	880b883a 	mov	r5,r17
   20a7c:	a009883a 	mov	r4,r20
   20a80:	da001015 	stw	r8,64(sp)
   20a84:	00205b00 	call	205b0 <print_repeat>
   20a88:	da001017 	ldw	r8,64(sp)
   20a8c:	103fef1e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20a90:	8221883a 	add	r16,r16,r8
   20a94:	88800117 	ldw	r2,4(r17)
   20a98:	b00f883a 	mov	r7,r22
   20a9c:	b80d883a 	mov	r6,r23
   20aa0:	880b883a 	mov	r5,r17
   20aa4:	a009883a 	mov	r4,r20
   20aa8:	103ee83a 	callr	r2
   20aac:	103fe71e 	bne	r2,zero,20a4c <___vfprintf_internal_r+0x430>
   20ab0:	85a1883a 	add	r16,r16,r22
   20ab4:	e02d883a 	mov	r22,fp
   20ab8:	00001106 	br	20b00 <___vfprintf_internal_r+0x4e4>
   20abc:	00c00044 	movi	r3,1
   20ac0:	04ffffc4 	movi	r19,-1
   20ac4:	d8000e15 	stw	zero,56(sp)
   20ac8:	d8c00a15 	stw	r3,40(sp)
   20acc:	05400284 	movi	r21,10
   20ad0:	9825883a 	mov	r18,r19
   20ad4:	d8000c15 	stw	zero,48(sp)
   20ad8:	d8000b15 	stw	zero,44(sp)
   20adc:	182f883a 	mov	r23,r3
   20ae0:	00000806 	br	20b04 <___vfprintf_internal_r+0x4e8>
   20ae4:	ddc00b15 	stw	r23,44(sp)
   20ae8:	05c00084 	movi	r23,2
   20aec:	00000506 	br	20b04 <___vfprintf_internal_r+0x4e8>
   20af0:	00c00044 	movi	r3,1
   20af4:	d8c00c15 	stw	r3,48(sp)
   20af8:	05c000c4 	movi	r23,3
   20afc:	00000106 	br	20b04 <___vfprintf_internal_r+0x4e8>
   20b00:	002f883a 	mov	r23,zero
   20b04:	d8c00f17 	ldw	r3,60(sp)
   20b08:	18c00044 	addi	r3,r3,1
   20b0c:	d8c00f15 	stw	r3,60(sp)
   20b10:	003edc06 	br	20684 <___vfprintf_internal_r+0x68>
   20b14:	8005883a 	mov	r2,r16
   20b18:	dfc01a17 	ldw	ra,104(sp)
   20b1c:	df001917 	ldw	fp,100(sp)
   20b20:	ddc01817 	ldw	r23,96(sp)
   20b24:	dd801717 	ldw	r22,92(sp)
   20b28:	dd401617 	ldw	r21,88(sp)
   20b2c:	dd001517 	ldw	r20,84(sp)
   20b30:	dcc01417 	ldw	r19,80(sp)
   20b34:	dc801317 	ldw	r18,76(sp)
   20b38:	dc401217 	ldw	r17,72(sp)
   20b3c:	dc001117 	ldw	r16,68(sp)
   20b40:	dec01b04 	addi	sp,sp,108
   20b44:	f800283a 	ret

00020b48 <__vfprintf_internal>:
   20b48:	00800134 	movhi	r2,4
   20b4c:	1080cb04 	addi	r2,r2,812
   20b50:	300f883a 	mov	r7,r6
   20b54:	280d883a 	mov	r6,r5
   20b58:	200b883a 	mov	r5,r4
   20b5c:	11000017 	ldw	r4,0(r2)
   20b60:	002061c1 	jmpi	2061c <___vfprintf_internal_r>

00020b64 <__sfvwrite_small_dev>:
   20b64:	2880000b 	ldhu	r2,0(r5)
   20b68:	1080020c 	andi	r2,r2,8
   20b6c:	10002126 	beq	r2,zero,20bf4 <__sfvwrite_small_dev+0x90>
   20b70:	2880008f 	ldh	r2,2(r5)
   20b74:	defffa04 	addi	sp,sp,-24
   20b78:	dc000015 	stw	r16,0(sp)
   20b7c:	dfc00515 	stw	ra,20(sp)
   20b80:	dd000415 	stw	r20,16(sp)
   20b84:	dcc00315 	stw	r19,12(sp)
   20b88:	dc800215 	stw	r18,8(sp)
   20b8c:	dc400115 	stw	r17,4(sp)
   20b90:	2821883a 	mov	r16,r5
   20b94:	10001216 	blt	r2,zero,20be0 <__sfvwrite_small_dev+0x7c>
   20b98:	2027883a 	mov	r19,r4
   20b9c:	3025883a 	mov	r18,r6
   20ba0:	3823883a 	mov	r17,r7
   20ba4:	05010004 	movi	r20,1024
   20ba8:	04400b0e 	bge	zero,r17,20bd8 <__sfvwrite_small_dev+0x74>
   20bac:	880f883a 	mov	r7,r17
   20bb0:	a440010e 	bge	r20,r17,20bb8 <__sfvwrite_small_dev+0x54>
   20bb4:	01c10004 	movi	r7,1024
   20bb8:	8140008f 	ldh	r5,2(r16)
   20bbc:	900d883a 	mov	r6,r18
   20bc0:	9809883a 	mov	r4,r19
   20bc4:	0020c1c0 	call	20c1c <_write_r>
   20bc8:	0080050e 	bge	zero,r2,20be0 <__sfvwrite_small_dev+0x7c>
   20bcc:	88a3c83a 	sub	r17,r17,r2
   20bd0:	90a5883a 	add	r18,r18,r2
   20bd4:	003ff406 	br	20ba8 <__sfvwrite_small_dev+0x44>
   20bd8:	0005883a 	mov	r2,zero
   20bdc:	00000706 	br	20bfc <__sfvwrite_small_dev+0x98>
   20be0:	8080000b 	ldhu	r2,0(r16)
   20be4:	10801014 	ori	r2,r2,64
   20be8:	8080000d 	sth	r2,0(r16)
   20bec:	00bfffc4 	movi	r2,-1
   20bf0:	00000206 	br	20bfc <__sfvwrite_small_dev+0x98>
   20bf4:	00bfffc4 	movi	r2,-1
   20bf8:	f800283a 	ret
   20bfc:	dfc00517 	ldw	ra,20(sp)
   20c00:	dd000417 	ldw	r20,16(sp)
   20c04:	dcc00317 	ldw	r19,12(sp)
   20c08:	dc800217 	ldw	r18,8(sp)
   20c0c:	dc400117 	ldw	r17,4(sp)
   20c10:	dc000017 	ldw	r16,0(sp)
   20c14:	dec00604 	addi	sp,sp,24
   20c18:	f800283a 	ret

00020c1c <_write_r>:
   20c1c:	defffd04 	addi	sp,sp,-12
   20c20:	dc000015 	stw	r16,0(sp)
   20c24:	04000134 	movhi	r16,4
   20c28:	dc400115 	stw	r17,4(sp)
   20c2c:	8400d604 	addi	r16,r16,856
   20c30:	2023883a 	mov	r17,r4
   20c34:	2809883a 	mov	r4,r5
   20c38:	300b883a 	mov	r5,r6
   20c3c:	380d883a 	mov	r6,r7
   20c40:	dfc00215 	stw	ra,8(sp)
   20c44:	80000015 	stw	zero,0(r16)
   20c48:	00211e80 	call	211e8 <write>
   20c4c:	00ffffc4 	movi	r3,-1
   20c50:	10c0031e 	bne	r2,r3,20c60 <_write_r+0x44>
   20c54:	80c00017 	ldw	r3,0(r16)
   20c58:	18000126 	beq	r3,zero,20c60 <_write_r+0x44>
   20c5c:	88c00015 	stw	r3,0(r17)
   20c60:	dfc00217 	ldw	ra,8(sp)
   20c64:	dc400117 	ldw	r17,4(sp)
   20c68:	dc000017 	ldw	r16,0(sp)
   20c6c:	dec00304 	addi	sp,sp,12
   20c70:	f800283a 	ret

00020c74 <__divsi3>:
   20c74:	20001b16 	blt	r4,zero,20ce4 <__divsi3+0x70>
   20c78:	000f883a 	mov	r7,zero
   20c7c:	28001616 	blt	r5,zero,20cd8 <__divsi3+0x64>
   20c80:	200d883a 	mov	r6,r4
   20c84:	29001a2e 	bgeu	r5,r4,20cf0 <__divsi3+0x7c>
   20c88:	00800804 	movi	r2,32
   20c8c:	00c00044 	movi	r3,1
   20c90:	00000106 	br	20c98 <__divsi3+0x24>
   20c94:	10000d26 	beq	r2,zero,20ccc <__divsi3+0x58>
   20c98:	294b883a 	add	r5,r5,r5
   20c9c:	10bfffc4 	addi	r2,r2,-1
   20ca0:	18c7883a 	add	r3,r3,r3
   20ca4:	293ffb36 	bltu	r5,r4,20c94 <__divsi3+0x20>
   20ca8:	0005883a 	mov	r2,zero
   20cac:	18000726 	beq	r3,zero,20ccc <__divsi3+0x58>
   20cb0:	0005883a 	mov	r2,zero
   20cb4:	31400236 	bltu	r6,r5,20cc0 <__divsi3+0x4c>
   20cb8:	314dc83a 	sub	r6,r6,r5
   20cbc:	10c4b03a 	or	r2,r2,r3
   20cc0:	1806d07a 	srli	r3,r3,1
   20cc4:	280ad07a 	srli	r5,r5,1
   20cc8:	183ffa1e 	bne	r3,zero,20cb4 <__divsi3+0x40>
   20ccc:	38000126 	beq	r7,zero,20cd4 <__divsi3+0x60>
   20cd0:	0085c83a 	sub	r2,zero,r2
   20cd4:	f800283a 	ret
   20cd8:	014bc83a 	sub	r5,zero,r5
   20cdc:	39c0005c 	xori	r7,r7,1
   20ce0:	003fe706 	br	20c80 <__divsi3+0xc>
   20ce4:	0109c83a 	sub	r4,zero,r4
   20ce8:	01c00044 	movi	r7,1
   20cec:	003fe306 	br	20c7c <__divsi3+0x8>
   20cf0:	00c00044 	movi	r3,1
   20cf4:	003fee06 	br	20cb0 <__divsi3+0x3c>

00020cf8 <__modsi3>:
   20cf8:	20001716 	blt	r4,zero,20d58 <__modsi3+0x60>
   20cfc:	000f883a 	mov	r7,zero
   20d00:	2005883a 	mov	r2,r4
   20d04:	28001216 	blt	r5,zero,20d50 <__modsi3+0x58>
   20d08:	2900162e 	bgeu	r5,r4,20d64 <__modsi3+0x6c>
   20d0c:	01800804 	movi	r6,32
   20d10:	00c00044 	movi	r3,1
   20d14:	00000106 	br	20d1c <__modsi3+0x24>
   20d18:	30000a26 	beq	r6,zero,20d44 <__modsi3+0x4c>
   20d1c:	294b883a 	add	r5,r5,r5
   20d20:	31bfffc4 	addi	r6,r6,-1
   20d24:	18c7883a 	add	r3,r3,r3
   20d28:	293ffb36 	bltu	r5,r4,20d18 <__modsi3+0x20>
   20d2c:	18000526 	beq	r3,zero,20d44 <__modsi3+0x4c>
   20d30:	1806d07a 	srli	r3,r3,1
   20d34:	11400136 	bltu	r2,r5,20d3c <__modsi3+0x44>
   20d38:	1145c83a 	sub	r2,r2,r5
   20d3c:	280ad07a 	srli	r5,r5,1
   20d40:	183ffb1e 	bne	r3,zero,20d30 <__modsi3+0x38>
   20d44:	38000126 	beq	r7,zero,20d4c <__modsi3+0x54>
   20d48:	0085c83a 	sub	r2,zero,r2
   20d4c:	f800283a 	ret
   20d50:	014bc83a 	sub	r5,zero,r5
   20d54:	003fec06 	br	20d08 <__modsi3+0x10>
   20d58:	0109c83a 	sub	r4,zero,r4
   20d5c:	01c00044 	movi	r7,1
   20d60:	003fe706 	br	20d00 <__modsi3+0x8>
   20d64:	00c00044 	movi	r3,1
   20d68:	003ff106 	br	20d30 <__modsi3+0x38>

00020d6c <__udivsi3>:
   20d6c:	200d883a 	mov	r6,r4
   20d70:	2900152e 	bgeu	r5,r4,20dc8 <__udivsi3+0x5c>
   20d74:	28001416 	blt	r5,zero,20dc8 <__udivsi3+0x5c>
   20d78:	00800804 	movi	r2,32
   20d7c:	00c00044 	movi	r3,1
   20d80:	00000206 	br	20d8c <__udivsi3+0x20>
   20d84:	10000e26 	beq	r2,zero,20dc0 <__udivsi3+0x54>
   20d88:	28000516 	blt	r5,zero,20da0 <__udivsi3+0x34>
   20d8c:	294b883a 	add	r5,r5,r5
   20d90:	10bfffc4 	addi	r2,r2,-1
   20d94:	18c7883a 	add	r3,r3,r3
   20d98:	293ffa36 	bltu	r5,r4,20d84 <__udivsi3+0x18>
   20d9c:	18000826 	beq	r3,zero,20dc0 <__udivsi3+0x54>
   20da0:	0005883a 	mov	r2,zero
   20da4:	31400236 	bltu	r6,r5,20db0 <__udivsi3+0x44>
   20da8:	314dc83a 	sub	r6,r6,r5
   20dac:	10c4b03a 	or	r2,r2,r3
   20db0:	1806d07a 	srli	r3,r3,1
   20db4:	280ad07a 	srli	r5,r5,1
   20db8:	183ffa1e 	bne	r3,zero,20da4 <__udivsi3+0x38>
   20dbc:	f800283a 	ret
   20dc0:	0005883a 	mov	r2,zero
   20dc4:	f800283a 	ret
   20dc8:	00c00044 	movi	r3,1
   20dcc:	003ff406 	br	20da0 <__udivsi3+0x34>

00020dd0 <__umodsi3>:
   20dd0:	2005883a 	mov	r2,r4
   20dd4:	2900122e 	bgeu	r5,r4,20e20 <__umodsi3+0x50>
   20dd8:	28001116 	blt	r5,zero,20e20 <__umodsi3+0x50>
   20ddc:	01800804 	movi	r6,32
   20de0:	00c00044 	movi	r3,1
   20de4:	00000206 	br	20df0 <__umodsi3+0x20>
   20de8:	30000c26 	beq	r6,zero,20e1c <__umodsi3+0x4c>
   20dec:	28000516 	blt	r5,zero,20e04 <__umodsi3+0x34>
   20df0:	294b883a 	add	r5,r5,r5
   20df4:	31bfffc4 	addi	r6,r6,-1
   20df8:	18c7883a 	add	r3,r3,r3
   20dfc:	293ffa36 	bltu	r5,r4,20de8 <__umodsi3+0x18>
   20e00:	18000626 	beq	r3,zero,20e1c <__umodsi3+0x4c>
   20e04:	1806d07a 	srli	r3,r3,1
   20e08:	11400136 	bltu	r2,r5,20e10 <__umodsi3+0x40>
   20e0c:	1145c83a 	sub	r2,r2,r5
   20e10:	280ad07a 	srli	r5,r5,1
   20e14:	183ffb1e 	bne	r3,zero,20e04 <__umodsi3+0x34>
   20e18:	f800283a 	ret
   20e1c:	f800283a 	ret
   20e20:	00c00044 	movi	r3,1
   20e24:	003ff706 	br	20e04 <__umodsi3+0x34>

00020e28 <__mulsi3>:
   20e28:	0005883a 	mov	r2,zero
   20e2c:	20000726 	beq	r4,zero,20e4c <__mulsi3+0x24>
   20e30:	20c0004c 	andi	r3,r4,1
   20e34:	2008d07a 	srli	r4,r4,1
   20e38:	18000126 	beq	r3,zero,20e40 <__mulsi3+0x18>
   20e3c:	1145883a 	add	r2,r2,r5
   20e40:	294b883a 	add	r5,r5,r5
   20e44:	203ffa1e 	bne	r4,zero,20e30 <__mulsi3+0x8>
   20e48:	f800283a 	ret
   20e4c:	f800283a 	ret

00020e50 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   20e50:	defff004 	addi	sp,sp,-64
   20e54:	df000f15 	stw	fp,60(sp)
   20e58:	df000f04 	addi	fp,sp,60
   20e5c:	e13ffd15 	stw	r4,-12(fp)
   20e60:	e17ffe15 	stw	r5,-8(fp)
   20e64:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   20e68:	00bffa84 	movi	r2,-22
   20e6c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   20e70:	e0bffd17 	ldw	r2,-12(fp)
   20e74:	10800828 	cmpgeui	r2,r2,32
   20e78:	10005c1e 	bne	r2,zero,20fec <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20e7c:	0005303a 	rdctl	r2,status
   20e80:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20e84:	e0fff617 	ldw	r3,-40(fp)
   20e88:	00bfff84 	movi	r2,-2
   20e8c:	1884703a 	and	r2,r3,r2
   20e90:	1001703a 	wrctl	status,r2
  
  return context;
   20e94:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   20e98:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   20e9c:	00800134 	movhi	r2,4
   20ea0:	1080dc04 	addi	r2,r2,880
   20ea4:	e0fffd17 	ldw	r3,-12(fp)
   20ea8:	180690fa 	slli	r3,r3,3
   20eac:	10c5883a 	add	r2,r2,r3
   20eb0:	e0ffff17 	ldw	r3,-4(fp)
   20eb4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   20eb8:	00800134 	movhi	r2,4
   20ebc:	1080dc04 	addi	r2,r2,880
   20ec0:	e0fffd17 	ldw	r3,-12(fp)
   20ec4:	180690fa 	slli	r3,r3,3
   20ec8:	10c5883a 	add	r2,r2,r3
   20ecc:	10800104 	addi	r2,r2,4
   20ed0:	e0fffe17 	ldw	r3,-8(fp)
   20ed4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   20ed8:	e0bfff17 	ldw	r2,-4(fp)
   20edc:	10001f26 	beq	r2,zero,20f5c <alt_irq_register+0x10c>
   20ee0:	e0bffd17 	ldw	r2,-12(fp)
   20ee4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20ee8:	0005303a 	rdctl	r2,status
   20eec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20ef0:	e0fff717 	ldw	r3,-36(fp)
   20ef4:	00bfff84 	movi	r2,-2
   20ef8:	1884703a 	and	r2,r3,r2
   20efc:	1001703a 	wrctl	status,r2
  
  return context;
   20f00:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20f04:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   20f08:	00c00044 	movi	r3,1
   20f0c:	e0bff217 	ldw	r2,-56(fp)
   20f10:	1884983a 	sll	r2,r3,r2
   20f14:	1007883a 	mov	r3,r2
   20f18:	00800134 	movhi	r2,4
   20f1c:	1080d704 	addi	r2,r2,860
   20f20:	10800017 	ldw	r2,0(r2)
   20f24:	1886b03a 	or	r3,r3,r2
   20f28:	00800134 	movhi	r2,4
   20f2c:	1080d704 	addi	r2,r2,860
   20f30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20f34:	00800134 	movhi	r2,4
   20f38:	1080d704 	addi	r2,r2,860
   20f3c:	10800017 	ldw	r2,0(r2)
   20f40:	100170fa 	wrctl	ienable,r2
   20f44:	e0bff817 	ldw	r2,-32(fp)
   20f48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f4c:	e0bff917 	ldw	r2,-28(fp)
   20f50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20f54:	0005883a 	mov	r2,zero
   20f58:	00001f06 	br	20fd8 <alt_irq_register+0x188>
   20f5c:	e0bffd17 	ldw	r2,-12(fp)
   20f60:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20f64:	0005303a 	rdctl	r2,status
   20f68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20f6c:	e0fffa17 	ldw	r3,-24(fp)
   20f70:	00bfff84 	movi	r2,-2
   20f74:	1884703a 	and	r2,r3,r2
   20f78:	1001703a 	wrctl	status,r2
  
  return context;
   20f7c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20f80:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   20f84:	00c00044 	movi	r3,1
   20f88:	e0bff417 	ldw	r2,-48(fp)
   20f8c:	1884983a 	sll	r2,r3,r2
   20f90:	0084303a 	nor	r2,zero,r2
   20f94:	1007883a 	mov	r3,r2
   20f98:	00800134 	movhi	r2,4
   20f9c:	1080d704 	addi	r2,r2,860
   20fa0:	10800017 	ldw	r2,0(r2)
   20fa4:	1886703a 	and	r3,r3,r2
   20fa8:	00800134 	movhi	r2,4
   20fac:	1080d704 	addi	r2,r2,860
   20fb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20fb4:	00800134 	movhi	r2,4
   20fb8:	1080d704 	addi	r2,r2,860
   20fbc:	10800017 	ldw	r2,0(r2)
   20fc0:	100170fa 	wrctl	ienable,r2
   20fc4:	e0bffb17 	ldw	r2,-20(fp)
   20fc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20fcc:	e0bffc17 	ldw	r2,-16(fp)
   20fd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   20fd4:	0005883a 	mov	r2,zero
   20fd8:	e0bff115 	stw	r2,-60(fp)
   20fdc:	e0bff317 	ldw	r2,-52(fp)
   20fe0:	e0bff515 	stw	r2,-44(fp)
   20fe4:	e0bff517 	ldw	r2,-44(fp)
   20fe8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   20fec:	e0bff117 	ldw	r2,-60(fp)
}
   20ff0:	e037883a 	mov	sp,fp
   20ff4:	df000017 	ldw	fp,0(sp)
   20ff8:	dec00104 	addi	sp,sp,4
   20ffc:	f800283a 	ret

00021000 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   21000:	defffc04 	addi	sp,sp,-16
   21004:	df000315 	stw	fp,12(sp)
   21008:	df000304 	addi	fp,sp,12
   2100c:	e13ffd15 	stw	r4,-12(fp)
   21010:	e17ffe15 	stw	r5,-8(fp)
   21014:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   21018:	e0fffe17 	ldw	r3,-8(fp)
   2101c:	e0bffd17 	ldw	r2,-12(fp)
   21020:	18800c26 	beq	r3,r2,21054 <alt_load_section+0x54>
  {
    while( to != end )
   21024:	00000806 	br	21048 <alt_load_section+0x48>
    {
      *to++ = *from++;
   21028:	e0bffe17 	ldw	r2,-8(fp)
   2102c:	10c00104 	addi	r3,r2,4
   21030:	e0fffe15 	stw	r3,-8(fp)
   21034:	e0fffd17 	ldw	r3,-12(fp)
   21038:	19000104 	addi	r4,r3,4
   2103c:	e13ffd15 	stw	r4,-12(fp)
   21040:	18c00017 	ldw	r3,0(r3)
   21044:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   21048:	e0fffe17 	ldw	r3,-8(fp)
   2104c:	e0bfff17 	ldw	r2,-4(fp)
   21050:	18bff51e 	bne	r3,r2,21028 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   21054:	0001883a 	nop
   21058:	e037883a 	mov	sp,fp
   2105c:	df000017 	ldw	fp,0(sp)
   21060:	dec00104 	addi	sp,sp,4
   21064:	f800283a 	ret

00021068 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   21068:	defffe04 	addi	sp,sp,-8
   2106c:	dfc00115 	stw	ra,4(sp)
   21070:	df000015 	stw	fp,0(sp)
   21074:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   21078:	01800134 	movhi	r6,4
   2107c:	3180d304 	addi	r6,r6,844
   21080:	01400134 	movhi	r5,4
   21084:	29401d04 	addi	r5,r5,116
   21088:	010000b4 	movhi	r4,2
   2108c:	21096b04 	addi	r4,r4,9644
   21090:	00210000 	call	21000 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   21094:	018000b4 	movhi	r6,2
   21098:	31808c04 	addi	r6,r6,560
   2109c:	014000b4 	movhi	r5,2
   210a0:	29400804 	addi	r5,r5,32
   210a4:	010000b4 	movhi	r4,2
   210a8:	21000804 	addi	r4,r4,32
   210ac:	00210000 	call	21000 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   210b0:	01800134 	movhi	r6,4
   210b4:	31801d04 	addi	r6,r6,116
   210b8:	01400134 	movhi	r5,4
   210bc:	29400004 	addi	r5,r5,0
   210c0:	01000134 	movhi	r4,4
   210c4:	21000004 	addi	r4,r4,0
   210c8:	00210000 	call	21000 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   210cc:	002184c0 	call	2184c <alt_dcache_flush_all>
  alt_icache_flush_all();
   210d0:	0021a4c0 	call	21a4c <alt_icache_flush_all>
}
   210d4:	0001883a 	nop
   210d8:	e037883a 	mov	sp,fp
   210dc:	dfc00117 	ldw	ra,4(sp)
   210e0:	df000017 	ldw	fp,0(sp)
   210e4:	dec00204 	addi	sp,sp,8
   210e8:	f800283a 	ret

000210ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   210ec:	defffd04 	addi	sp,sp,-12
   210f0:	dfc00215 	stw	ra,8(sp)
   210f4:	df000115 	stw	fp,4(sp)
   210f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   210fc:	0009883a 	mov	r4,zero
   21100:	00213200 	call	21320 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   21104:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   21108:	00213580 	call	21358 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2110c:	01800134 	movhi	r6,4
   21110:	31801004 	addi	r6,r6,64
   21114:	01400134 	movhi	r5,4
   21118:	29401004 	addi	r5,r5,64
   2111c:	01000134 	movhi	r4,4
   21120:	21001004 	addi	r4,r4,64
   21124:	0021b500 	call	21b50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   21128:	002198c0 	call	2198c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2112c:	010000b4 	movhi	r4,2
   21130:	21067b04 	addi	r4,r4,6636
   21134:	002222c0 	call	2222c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   21138:	d0a00e17 	ldw	r2,-32712(gp)
   2113c:	d0e00f17 	ldw	r3,-32708(gp)
   21140:	d1201017 	ldw	r4,-32704(gp)
   21144:	200d883a 	mov	r6,r4
   21148:	180b883a 	mov	r5,r3
   2114c:	1009883a 	mov	r4,r2
   21150:	00203700 	call	20370 <main>
   21154:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   21158:	01000044 	movi	r4,1
   2115c:	00217740 	call	21774 <close>
  exit (result);
   21160:	e13fff17 	ldw	r4,-4(fp)
   21164:	00222400 	call	22240 <exit>

00021168 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   21168:	defffd04 	addi	sp,sp,-12
   2116c:	dfc00215 	stw	ra,8(sp)
   21170:	df000115 	stw	fp,4(sp)
   21174:	df000104 	addi	fp,sp,4
   21178:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2117c:	e13fff17 	ldw	r4,-4(fp)
   21180:	00215cc0 	call	215cc <alt_busy_sleep>
}
   21184:	e037883a 	mov	sp,fp
   21188:	dfc00117 	ldw	ra,4(sp)
   2118c:	df000017 	ldw	fp,0(sp)
   21190:	dec00204 	addi	sp,sp,8
   21194:	f800283a 	ret

00021198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21198:	defffe04 	addi	sp,sp,-8
   2119c:	dfc00115 	stw	ra,4(sp)
   211a0:	df000015 	stw	fp,0(sp)
   211a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   211a8:	00800134 	movhi	r2,4
   211ac:	1080d204 	addi	r2,r2,840
   211b0:	10800017 	ldw	r2,0(r2)
   211b4:	10000526 	beq	r2,zero,211cc <alt_get_errno+0x34>
   211b8:	00800134 	movhi	r2,4
   211bc:	1080d204 	addi	r2,r2,840
   211c0:	10800017 	ldw	r2,0(r2)
   211c4:	103ee83a 	callr	r2
   211c8:	00000206 	br	211d4 <alt_get_errno+0x3c>
   211cc:	00800134 	movhi	r2,4
   211d0:	1080d604 	addi	r2,r2,856
}
   211d4:	e037883a 	mov	sp,fp
   211d8:	dfc00117 	ldw	ra,4(sp)
   211dc:	df000017 	ldw	fp,0(sp)
   211e0:	dec00204 	addi	sp,sp,8
   211e4:	f800283a 	ret

000211e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   211e8:	defff904 	addi	sp,sp,-28
   211ec:	dfc00615 	stw	ra,24(sp)
   211f0:	df000515 	stw	fp,20(sp)
   211f4:	df000504 	addi	fp,sp,20
   211f8:	e13ffd15 	stw	r4,-12(fp)
   211fc:	e17ffe15 	stw	r5,-8(fp)
   21200:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21204:	e0bffd17 	ldw	r2,-12(fp)
   21208:	10000816 	blt	r2,zero,2122c <write+0x44>
   2120c:	01400304 	movi	r5,12
   21210:	e13ffd17 	ldw	r4,-12(fp)
   21214:	0020e280 	call	20e28 <__mulsi3>
   21218:	1007883a 	mov	r3,r2
   2121c:	00800134 	movhi	r2,4
   21220:	10806a04 	addi	r2,r2,424
   21224:	1885883a 	add	r2,r3,r2
   21228:	00000106 	br	21230 <write+0x48>
   2122c:	0005883a 	mov	r2,zero
   21230:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   21234:	e0bffb17 	ldw	r2,-20(fp)
   21238:	10002126 	beq	r2,zero,212c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2123c:	e0bffb17 	ldw	r2,-20(fp)
   21240:	10800217 	ldw	r2,8(r2)
   21244:	108000cc 	andi	r2,r2,3
   21248:	10001826 	beq	r2,zero,212ac <write+0xc4>
   2124c:	e0bffb17 	ldw	r2,-20(fp)
   21250:	10800017 	ldw	r2,0(r2)
   21254:	10800617 	ldw	r2,24(r2)
   21258:	10001426 	beq	r2,zero,212ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2125c:	e0bffb17 	ldw	r2,-20(fp)
   21260:	10800017 	ldw	r2,0(r2)
   21264:	10800617 	ldw	r2,24(r2)
   21268:	e0ffff17 	ldw	r3,-4(fp)
   2126c:	180d883a 	mov	r6,r3
   21270:	e17ffe17 	ldw	r5,-8(fp)
   21274:	e13ffb17 	ldw	r4,-20(fp)
   21278:	103ee83a 	callr	r2
   2127c:	e0bffc15 	stw	r2,-16(fp)
   21280:	e0bffc17 	ldw	r2,-16(fp)
   21284:	1000070e 	bge	r2,zero,212a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   21288:	00211980 	call	21198 <alt_get_errno>
   2128c:	1007883a 	mov	r3,r2
   21290:	e0bffc17 	ldw	r2,-16(fp)
   21294:	0085c83a 	sub	r2,zero,r2
   21298:	18800015 	stw	r2,0(r3)
        return -1;
   2129c:	00bfffc4 	movi	r2,-1
   212a0:	00000c06 	br	212d4 <write+0xec>
      }
      return rval;
   212a4:	e0bffc17 	ldw	r2,-16(fp)
   212a8:	00000a06 	br	212d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   212ac:	00211980 	call	21198 <alt_get_errno>
   212b0:	1007883a 	mov	r3,r2
   212b4:	00800344 	movi	r2,13
   212b8:	18800015 	stw	r2,0(r3)
   212bc:	00000406 	br	212d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   212c0:	00211980 	call	21198 <alt_get_errno>
   212c4:	1007883a 	mov	r3,r2
   212c8:	00801444 	movi	r2,81
   212cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   212d0:	00bfffc4 	movi	r2,-1
}
   212d4:	e037883a 	mov	sp,fp
   212d8:	dfc00117 	ldw	ra,4(sp)
   212dc:	df000017 	ldw	fp,0(sp)
   212e0:	dec00204 	addi	sp,sp,8
   212e4:	f800283a 	ret

000212e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   212e8:	defffd04 	addi	sp,sp,-12
   212ec:	dfc00215 	stw	ra,8(sp)
   212f0:	df000115 	stw	fp,4(sp)
   212f4:	df000104 	addi	fp,sp,4
   212f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   212fc:	01400134 	movhi	r5,4
   21300:	2940cf04 	addi	r5,r5,828
   21304:	e13fff17 	ldw	r4,-4(fp)
   21308:	00218e80 	call	218e8 <alt_dev_llist_insert>
}
   2130c:	e037883a 	mov	sp,fp
   21310:	dfc00117 	ldw	ra,4(sp)
   21314:	df000017 	ldw	fp,0(sp)
   21318:	dec00204 	addi	sp,sp,8
   2131c:	f800283a 	ret

00021320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21320:	defffd04 	addi	sp,sp,-12
   21324:	dfc00215 	stw	ra,8(sp)
   21328:	df000115 	stw	fp,4(sp)
   2132c:	df000104 	addi	fp,sp,4
   21330:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   21334:	0021ef40 	call	21ef4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21338:	00800044 	movi	r2,1
   2133c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21340:	0001883a 	nop
   21344:	e037883a 	mov	sp,fp
   21348:	dfc00117 	ldw	ra,4(sp)
   2134c:	df000017 	ldw	fp,0(sp)
   21350:	dec00204 	addi	sp,sp,8
   21354:	f800283a 	ret

00021358 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21358:	defffe04 	addi	sp,sp,-8
   2135c:	dfc00115 	stw	ra,4(sp)
   21360:	df000015 	stw	fp,0(sp)
   21364:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   21368:	01000134 	movhi	r4,4
   2136c:	21005504 	addi	r4,r4,340
   21370:	00212e80 	call	212e8 <alt_dev_reg>
}
   21374:	0001883a 	nop
   21378:	e037883a 	mov	sp,fp
   2137c:	dfc00117 	ldw	ra,4(sp)
   21380:	df000017 	ldw	fp,0(sp)
   21384:	dec00204 	addi	sp,sp,8
   21388:	f800283a 	ret

0002138c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2138c:	defffa04 	addi	sp,sp,-24
   21390:	dfc00515 	stw	ra,20(sp)
   21394:	df000415 	stw	fp,16(sp)
   21398:	df000404 	addi	fp,sp,16
   2139c:	e13ffd15 	stw	r4,-12(fp)
   213a0:	e17ffe15 	stw	r5,-8(fp)
   213a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   213a8:	e0bffd17 	ldw	r2,-12(fp)
   213ac:	10800017 	ldw	r2,0(r2)
   213b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   213b4:	e0bffc17 	ldw	r2,-16(fp)
   213b8:	10c00a04 	addi	r3,r2,40
   213bc:	e0bffd17 	ldw	r2,-12(fp)
   213c0:	10800217 	ldw	r2,8(r2)
   213c4:	100f883a 	mov	r7,r2
   213c8:	e1bfff17 	ldw	r6,-4(fp)
   213cc:	e17ffe17 	ldw	r5,-8(fp)
   213d0:	1809883a 	mov	r4,r3
   213d4:	002144c0 	call	2144c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   213d8:	e037883a 	mov	sp,fp
   213dc:	dfc00117 	ldw	ra,4(sp)
   213e0:	df000017 	ldw	fp,0(sp)
   213e4:	dec00204 	addi	sp,sp,8
   213e8:	f800283a 	ret

000213ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   213ec:	defffa04 	addi	sp,sp,-24
   213f0:	dfc00515 	stw	ra,20(sp)
   213f4:	df000415 	stw	fp,16(sp)
   213f8:	df000404 	addi	fp,sp,16
   213fc:	e13ffd15 	stw	r4,-12(fp)
   21400:	e17ffe15 	stw	r5,-8(fp)
   21404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21408:	e0bffd17 	ldw	r2,-12(fp)
   2140c:	10800017 	ldw	r2,0(r2)
   21410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21414:	e0bffc17 	ldw	r2,-16(fp)
   21418:	10c00a04 	addi	r3,r2,40
   2141c:	e0bffd17 	ldw	r2,-12(fp)
   21420:	10800217 	ldw	r2,8(r2)
   21424:	100f883a 	mov	r7,r2
   21428:	e1bfff17 	ldw	r6,-4(fp)
   2142c:	e17ffe17 	ldw	r5,-8(fp)
   21430:	1809883a 	mov	r4,r3
   21434:	00215380 	call	21538 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   21438:	e037883a 	mov	sp,fp
   2143c:	dfc00117 	ldw	ra,4(sp)
   21440:	df000017 	ldw	fp,0(sp)
   21444:	dec00204 	addi	sp,sp,8
   21448:	f800283a 	ret

0002144c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   2144c:	defff704 	addi	sp,sp,-36
   21450:	df000815 	stw	fp,32(sp)
   21454:	df000804 	addi	fp,sp,32
   21458:	e13ffc15 	stw	r4,-16(fp)
   2145c:	e17ffd15 	stw	r5,-12(fp)
   21460:	e1bffe15 	stw	r6,-8(fp)
   21464:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   21468:	e0bffc17 	ldw	r2,-16(fp)
   2146c:	10800017 	ldw	r2,0(r2)
   21470:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   21474:	e0bffd17 	ldw	r2,-12(fp)
   21478:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   2147c:	e0bffe17 	ldw	r2,-8(fp)
   21480:	e0fffd17 	ldw	r3,-12(fp)
   21484:	1885883a 	add	r2,r3,r2
   21488:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   2148c:	00001206 	br	214d8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21490:	e0bff917 	ldw	r2,-28(fp)
   21494:	10800037 	ldwio	r2,0(r2)
   21498:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   2149c:	e0bffb17 	ldw	r2,-20(fp)
   214a0:	10a0000c 	andi	r2,r2,32768
   214a4:	10000626 	beq	r2,zero,214c0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   214a8:	e0bff817 	ldw	r2,-32(fp)
   214ac:	10c00044 	addi	r3,r2,1
   214b0:	e0fff815 	stw	r3,-32(fp)
   214b4:	e0fffb17 	ldw	r3,-20(fp)
   214b8:	10c00005 	stb	r3,0(r2)
   214bc:	00000606 	br	214d8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   214c0:	e0fff817 	ldw	r3,-32(fp)
   214c4:	e0bffd17 	ldw	r2,-12(fp)
   214c8:	1880071e 	bne	r3,r2,214e8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   214cc:	e0bfff17 	ldw	r2,-4(fp)
   214d0:	1090000c 	andi	r2,r2,16384
   214d4:	1000061e 	bne	r2,zero,214f0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   214d8:	e0fff817 	ldw	r3,-32(fp)
   214dc:	e0bffa17 	ldw	r2,-24(fp)
   214e0:	18bfeb36 	bltu	r3,r2,21490 <altera_avalon_jtag_uart_read+0x44>
   214e4:	00000306 	br	214f4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   214e8:	0001883a 	nop
   214ec:	00000106 	br	214f4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   214f0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   214f4:	e0fff817 	ldw	r3,-32(fp)
   214f8:	e0bffd17 	ldw	r2,-12(fp)
   214fc:	18800426 	beq	r3,r2,21510 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   21500:	e0fff817 	ldw	r3,-32(fp)
   21504:	e0bffd17 	ldw	r2,-12(fp)
   21508:	1885c83a 	sub	r2,r3,r2
   2150c:	00000606 	br	21528 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   21510:	e0bfff17 	ldw	r2,-4(fp)
   21514:	1090000c 	andi	r2,r2,16384
   21518:	10000226 	beq	r2,zero,21524 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   2151c:	00bffd44 	movi	r2,-11
   21520:	00000106 	br	21528 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   21524:	00bffec4 	movi	r2,-5
}
   21528:	e037883a 	mov	sp,fp
   2152c:	df000017 	ldw	fp,0(sp)
   21530:	dec00104 	addi	sp,sp,4
   21534:	f800283a 	ret

00021538 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21538:	defff904 	addi	sp,sp,-28
   2153c:	df000615 	stw	fp,24(sp)
   21540:	df000604 	addi	fp,sp,24
   21544:	e13ffc15 	stw	r4,-16(fp)
   21548:	e17ffd15 	stw	r5,-12(fp)
   2154c:	e1bffe15 	stw	r6,-8(fp)
   21550:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   21554:	e0bffc17 	ldw	r2,-16(fp)
   21558:	10800017 	ldw	r2,0(r2)
   2155c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   21560:	e0bffe17 	ldw	r2,-8(fp)
   21564:	e0fffd17 	ldw	r3,-12(fp)
   21568:	1885883a 	add	r2,r3,r2
   2156c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   21570:	00000e06 	br	215ac <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21574:	e0bffa17 	ldw	r2,-24(fp)
   21578:	10800104 	addi	r2,r2,4
   2157c:	10800037 	ldwio	r2,0(r2)
   21580:	10bfffec 	andhi	r2,r2,65535
   21584:	10000926 	beq	r2,zero,215ac <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21588:	e0fffa17 	ldw	r3,-24(fp)
   2158c:	e0bffd17 	ldw	r2,-12(fp)
   21590:	11000044 	addi	r4,r2,1
   21594:	e13ffd15 	stw	r4,-12(fp)
   21598:	10800003 	ldbu	r2,0(r2)
   2159c:	10803fcc 	andi	r2,r2,255
   215a0:	1080201c 	xori	r2,r2,128
   215a4:	10bfe004 	addi	r2,r2,-128
   215a8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   215ac:	e0fffd17 	ldw	r3,-12(fp)
   215b0:	e0bffb17 	ldw	r2,-20(fp)
   215b4:	18bfef36 	bltu	r3,r2,21574 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   215b8:	e0bffe17 	ldw	r2,-8(fp)
}
   215bc:	e037883a 	mov	sp,fp
   215c0:	df000017 	ldw	fp,0(sp)
   215c4:	dec00104 	addi	sp,sp,4
   215c8:	f800283a 	ret

000215cc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   215cc:	defffa04 	addi	sp,sp,-24
   215d0:	dfc00515 	stw	ra,20(sp)
   215d4:	df000415 	stw	fp,16(sp)
   215d8:	df000404 	addi	fp,sp,16
   215dc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   215e0:	00800244 	movi	r2,9
   215e4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   215e8:	014003f4 	movhi	r5,15
   215ec:	29509004 	addi	r5,r5,16960
   215f0:	e13ffd17 	ldw	r4,-12(fp)
   215f4:	0020e280 	call	20e28 <__mulsi3>
   215f8:	100b883a 	mov	r5,r2
   215fc:	0100bef4 	movhi	r4,763
   21600:	213c2004 	addi	r4,r4,-3968
   21604:	0020d6c0 	call	20d6c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21608:	100b883a 	mov	r5,r2
   2160c:	01200034 	movhi	r4,32768
   21610:	213fffc4 	addi	r4,r4,-1
   21614:	0020d6c0 	call	20d6c <__udivsi3>
   21618:	100b883a 	mov	r5,r2
   2161c:	e13fff17 	ldw	r4,-4(fp)
   21620:	0020d6c0 	call	20d6c <__udivsi3>
   21624:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   21628:	e0bffe17 	ldw	r2,-8(fp)
   2162c:	10002a26 	beq	r2,zero,216d8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   21630:	e03ffc15 	stw	zero,-16(fp)
   21634:	00001706 	br	21694 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21638:	00a00034 	movhi	r2,32768
   2163c:	10bfffc4 	addi	r2,r2,-1
   21640:	10bfffc4 	addi	r2,r2,-1
   21644:	103ffe1e 	bne	r2,zero,21640 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   21648:	014003f4 	movhi	r5,15
   2164c:	29509004 	addi	r5,r5,16960
   21650:	e13ffd17 	ldw	r4,-12(fp)
   21654:	0020e280 	call	20e28 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21658:	100b883a 	mov	r5,r2
   2165c:	0100bef4 	movhi	r4,763
   21660:	213c2004 	addi	r4,r4,-3968
   21664:	0020d6c0 	call	20d6c <__udivsi3>
   21668:	100b883a 	mov	r5,r2
   2166c:	01200034 	movhi	r4,32768
   21670:	213fffc4 	addi	r4,r4,-1
   21674:	0020d6c0 	call	20d6c <__udivsi3>
   21678:	1007883a 	mov	r3,r2
   2167c:	e0bfff17 	ldw	r2,-4(fp)
   21680:	10c5c83a 	sub	r2,r2,r3
   21684:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21688:	e0bffc17 	ldw	r2,-16(fp)
   2168c:	10800044 	addi	r2,r2,1
   21690:	e0bffc15 	stw	r2,-16(fp)
   21694:	e0fffc17 	ldw	r3,-16(fp)
   21698:	e0bffe17 	ldw	r2,-8(fp)
   2169c:	18bfe616 	blt	r3,r2,21638 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   216a0:	014003f4 	movhi	r5,15
   216a4:	29509004 	addi	r5,r5,16960
   216a8:	e13ffd17 	ldw	r4,-12(fp)
   216ac:	0020e280 	call	20e28 <__mulsi3>
   216b0:	100b883a 	mov	r5,r2
   216b4:	0100bef4 	movhi	r4,763
   216b8:	213c2004 	addi	r4,r4,-3968
   216bc:	0020d6c0 	call	20d6c <__udivsi3>
   216c0:	e17fff17 	ldw	r5,-4(fp)
   216c4:	1009883a 	mov	r4,r2
   216c8:	0020e280 	call	20e28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   216cc:	10bfffc4 	addi	r2,r2,-1
   216d0:	103ffe1e 	bne	r2,zero,216cc <alt_busy_sleep+0x100>
   216d4:	00000d06 	br	2170c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   216d8:	014003f4 	movhi	r5,15
   216dc:	29509004 	addi	r5,r5,16960
   216e0:	e13ffd17 	ldw	r4,-12(fp)
   216e4:	0020e280 	call	20e28 <__mulsi3>
   216e8:	100b883a 	mov	r5,r2
   216ec:	0100bef4 	movhi	r4,763
   216f0:	213c2004 	addi	r4,r4,-3968
   216f4:	0020d6c0 	call	20d6c <__udivsi3>
   216f8:	e17fff17 	ldw	r5,-4(fp)
   216fc:	1009883a 	mov	r4,r2
   21700:	0020e280 	call	20e28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21704:	10bfffc4 	addi	r2,r2,-1
   21708:	00bffe16 	blt	zero,r2,21704 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2170c:	0005883a 	mov	r2,zero
}
   21710:	e037883a 	mov	sp,fp
   21714:	dfc00117 	ldw	ra,4(sp)
   21718:	df000017 	ldw	fp,0(sp)
   2171c:	dec00204 	addi	sp,sp,8
   21720:	f800283a 	ret

00021724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21724:	defffe04 	addi	sp,sp,-8
   21728:	dfc00115 	stw	ra,4(sp)
   2172c:	df000015 	stw	fp,0(sp)
   21730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21734:	00800134 	movhi	r2,4
   21738:	1080d204 	addi	r2,r2,840
   2173c:	10800017 	ldw	r2,0(r2)
   21740:	10000526 	beq	r2,zero,21758 <alt_get_errno+0x34>
   21744:	00800134 	movhi	r2,4
   21748:	1080d204 	addi	r2,r2,840
   2174c:	10800017 	ldw	r2,0(r2)
   21750:	103ee83a 	callr	r2
   21754:	00000206 	br	21760 <alt_get_errno+0x3c>
   21758:	00800134 	movhi	r2,4
   2175c:	1080d604 	addi	r2,r2,856
}
   21760:	e037883a 	mov	sp,fp
   21764:	dfc00117 	ldw	ra,4(sp)
   21768:	df000017 	ldw	fp,0(sp)
   2176c:	dec00204 	addi	sp,sp,8
   21770:	f800283a 	ret

00021774 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21774:	defffb04 	addi	sp,sp,-20
   21778:	dfc00415 	stw	ra,16(sp)
   2177c:	df000315 	stw	fp,12(sp)
   21780:	df000304 	addi	fp,sp,12
   21784:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21788:	e0bfff17 	ldw	r2,-4(fp)
   2178c:	10000816 	blt	r2,zero,217b0 <close+0x3c>
   21790:	01400304 	movi	r5,12
   21794:	e13fff17 	ldw	r4,-4(fp)
   21798:	0020e280 	call	20e28 <__mulsi3>
   2179c:	1007883a 	mov	r3,r2
   217a0:	00800134 	movhi	r2,4
   217a4:	10806a04 	addi	r2,r2,424
   217a8:	1885883a 	add	r2,r3,r2
   217ac:	00000106 	br	217b4 <close+0x40>
   217b0:	0005883a 	mov	r2,zero
   217b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   217b8:	e0bffd17 	ldw	r2,-12(fp)
   217bc:	10001926 	beq	r2,zero,21824 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   217c0:	e0bffd17 	ldw	r2,-12(fp)
   217c4:	10800017 	ldw	r2,0(r2)
   217c8:	10800417 	ldw	r2,16(r2)
   217cc:	10000626 	beq	r2,zero,217e8 <close+0x74>
   217d0:	e0bffd17 	ldw	r2,-12(fp)
   217d4:	10800017 	ldw	r2,0(r2)
   217d8:	10800417 	ldw	r2,16(r2)
   217dc:	e13ffd17 	ldw	r4,-12(fp)
   217e0:	103ee83a 	callr	r2
   217e4:	00000106 	br	217ec <close+0x78>
   217e8:	0005883a 	mov	r2,zero
   217ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   217f0:	e13fff17 	ldw	r4,-4(fp)
   217f4:	0021e700 	call	21e70 <alt_release_fd>
    if (rval < 0)
   217f8:	e0bffe17 	ldw	r2,-8(fp)
   217fc:	1000070e 	bge	r2,zero,2181c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   21800:	00217240 	call	21724 <alt_get_errno>
   21804:	1007883a 	mov	r3,r2
   21808:	e0bffe17 	ldw	r2,-8(fp)
   2180c:	0085c83a 	sub	r2,zero,r2
   21810:	18800015 	stw	r2,0(r3)
      return -1;
   21814:	00bfffc4 	movi	r2,-1
   21818:	00000706 	br	21838 <close+0xc4>
    }
    return 0;
   2181c:	0005883a 	mov	r2,zero
   21820:	00000506 	br	21838 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21824:	00217240 	call	21724 <alt_get_errno>
   21828:	1007883a 	mov	r3,r2
   2182c:	00801444 	movi	r2,81
   21830:	18800015 	stw	r2,0(r3)
    return -1;
   21834:	00bfffc4 	movi	r2,-1
  }
}
   21838:	e037883a 	mov	sp,fp
   2183c:	dfc00117 	ldw	ra,4(sp)
   21840:	df000017 	ldw	fp,0(sp)
   21844:	dec00204 	addi	sp,sp,8
   21848:	f800283a 	ret

0002184c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2184c:	deffff04 	addi	sp,sp,-4
   21850:	df000015 	stw	fp,0(sp)
   21854:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   21858:	0001883a 	nop
   2185c:	e037883a 	mov	sp,fp
   21860:	df000017 	ldw	fp,0(sp)
   21864:	dec00104 	addi	sp,sp,4
   21868:	f800283a 	ret

0002186c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2186c:	defffc04 	addi	sp,sp,-16
   21870:	df000315 	stw	fp,12(sp)
   21874:	df000304 	addi	fp,sp,12
   21878:	e13ffd15 	stw	r4,-12(fp)
   2187c:	e17ffe15 	stw	r5,-8(fp)
   21880:	e1bfff15 	stw	r6,-4(fp)
  return len;
   21884:	e0bfff17 	ldw	r2,-4(fp)
}
   21888:	e037883a 	mov	sp,fp
   2188c:	df000017 	ldw	fp,0(sp)
   21890:	dec00104 	addi	sp,sp,4
   21894:	f800283a 	ret

00021898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21898:	defffe04 	addi	sp,sp,-8
   2189c:	dfc00115 	stw	ra,4(sp)
   218a0:	df000015 	stw	fp,0(sp)
   218a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   218a8:	00800134 	movhi	r2,4
   218ac:	1080d204 	addi	r2,r2,840
   218b0:	10800017 	ldw	r2,0(r2)
   218b4:	10000526 	beq	r2,zero,218cc <alt_get_errno+0x34>
   218b8:	00800134 	movhi	r2,4
   218bc:	1080d204 	addi	r2,r2,840
   218c0:	10800017 	ldw	r2,0(r2)
   218c4:	103ee83a 	callr	r2
   218c8:	00000206 	br	218d4 <alt_get_errno+0x3c>
   218cc:	00800134 	movhi	r2,4
   218d0:	1080d604 	addi	r2,r2,856
}
   218d4:	e037883a 	mov	sp,fp
   218d8:	dfc00117 	ldw	ra,4(sp)
   218dc:	df000017 	ldw	fp,0(sp)
   218e0:	dec00204 	addi	sp,sp,8
   218e4:	f800283a 	ret

000218e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   218e8:	defffa04 	addi	sp,sp,-24
   218ec:	dfc00515 	stw	ra,20(sp)
   218f0:	df000415 	stw	fp,16(sp)
   218f4:	df000404 	addi	fp,sp,16
   218f8:	e13ffe15 	stw	r4,-8(fp)
   218fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21900:	e0bffe17 	ldw	r2,-8(fp)
   21904:	10000326 	beq	r2,zero,21914 <alt_dev_llist_insert+0x2c>
   21908:	e0bffe17 	ldw	r2,-8(fp)
   2190c:	10800217 	ldw	r2,8(r2)
   21910:	1000061e 	bne	r2,zero,2192c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   21914:	00218980 	call	21898 <alt_get_errno>
   21918:	1007883a 	mov	r3,r2
   2191c:	00800584 	movi	r2,22
   21920:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   21924:	00bffa84 	movi	r2,-22
   21928:	00001306 	br	21978 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2192c:	e0bffe17 	ldw	r2,-8(fp)
   21930:	e0ffff17 	ldw	r3,-4(fp)
   21934:	e0fffc15 	stw	r3,-16(fp)
   21938:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2193c:	e0bffd17 	ldw	r2,-12(fp)
   21940:	e0fffc17 	ldw	r3,-16(fp)
   21944:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21948:	e0bffc17 	ldw	r2,-16(fp)
   2194c:	10c00017 	ldw	r3,0(r2)
   21950:	e0bffd17 	ldw	r2,-12(fp)
   21954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21958:	e0bffc17 	ldw	r2,-16(fp)
   2195c:	10800017 	ldw	r2,0(r2)
   21960:	e0fffd17 	ldw	r3,-12(fp)
   21964:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21968:	e0bffc17 	ldw	r2,-16(fp)
   2196c:	e0fffd17 	ldw	r3,-12(fp)
   21970:	10c00015 	stw	r3,0(r2)

  return 0;  
   21974:	0005883a 	mov	r2,zero
}
   21978:	e037883a 	mov	sp,fp
   2197c:	dfc00117 	ldw	ra,4(sp)
   21980:	df000017 	ldw	fp,0(sp)
   21984:	dec00204 	addi	sp,sp,8
   21988:	f800283a 	ret

0002198c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2198c:	defffd04 	addi	sp,sp,-12
   21990:	dfc00215 	stw	ra,8(sp)
   21994:	df000115 	stw	fp,4(sp)
   21998:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2199c:	008000b4 	movhi	r2,2
   219a0:	10896a04 	addi	r2,r2,9640
   219a4:	e0bfff15 	stw	r2,-4(fp)
   219a8:	00000606 	br	219c4 <_do_ctors+0x38>
        (*ctor) (); 
   219ac:	e0bfff17 	ldw	r2,-4(fp)
   219b0:	10800017 	ldw	r2,0(r2)
   219b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   219b8:	e0bfff17 	ldw	r2,-4(fp)
   219bc:	10bfff04 	addi	r2,r2,-4
   219c0:	e0bfff15 	stw	r2,-4(fp)
   219c4:	e0ffff17 	ldw	r3,-4(fp)
   219c8:	008000b4 	movhi	r2,2
   219cc:	10896b04 	addi	r2,r2,9644
   219d0:	18bff62e 	bgeu	r3,r2,219ac <_do_ctors+0x20>
        (*ctor) (); 
}
   219d4:	0001883a 	nop
   219d8:	e037883a 	mov	sp,fp
   219dc:	dfc00117 	ldw	ra,4(sp)
   219e0:	df000017 	ldw	fp,0(sp)
   219e4:	dec00204 	addi	sp,sp,8
   219e8:	f800283a 	ret

000219ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   219ec:	defffd04 	addi	sp,sp,-12
   219f0:	dfc00215 	stw	ra,8(sp)
   219f4:	df000115 	stw	fp,4(sp)
   219f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   219fc:	008000b4 	movhi	r2,2
   21a00:	10896a04 	addi	r2,r2,9640
   21a04:	e0bfff15 	stw	r2,-4(fp)
   21a08:	00000606 	br	21a24 <_do_dtors+0x38>
        (*dtor) (); 
   21a0c:	e0bfff17 	ldw	r2,-4(fp)
   21a10:	10800017 	ldw	r2,0(r2)
   21a14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21a18:	e0bfff17 	ldw	r2,-4(fp)
   21a1c:	10bfff04 	addi	r2,r2,-4
   21a20:	e0bfff15 	stw	r2,-4(fp)
   21a24:	e0ffff17 	ldw	r3,-4(fp)
   21a28:	008000b4 	movhi	r2,2
   21a2c:	10896b04 	addi	r2,r2,9644
   21a30:	18bff62e 	bgeu	r3,r2,21a0c <_do_dtors+0x20>
        (*dtor) (); 
}
   21a34:	0001883a 	nop
   21a38:	e037883a 	mov	sp,fp
   21a3c:	dfc00117 	ldw	ra,4(sp)
   21a40:	df000017 	ldw	fp,0(sp)
   21a44:	dec00204 	addi	sp,sp,8
   21a48:	f800283a 	ret

00021a4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21a4c:	deffff04 	addi	sp,sp,-4
   21a50:	df000015 	stw	fp,0(sp)
   21a54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   21a58:	0001883a 	nop
   21a5c:	e037883a 	mov	sp,fp
   21a60:	df000017 	ldw	fp,0(sp)
   21a64:	dec00104 	addi	sp,sp,4
   21a68:	f800283a 	ret

00021a6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21a6c:	defff804 	addi	sp,sp,-32
   21a70:	dfc00715 	stw	ra,28(sp)
   21a74:	df000615 	stw	fp,24(sp)
   21a78:	dc000515 	stw	r16,20(sp)
   21a7c:	df000604 	addi	fp,sp,24
   21a80:	e13ffb15 	stw	r4,-20(fp)
   21a84:	e17ffc15 	stw	r5,-16(fp)
   21a88:	e1bffd15 	stw	r6,-12(fp)
   21a8c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   21a90:	e1bffe17 	ldw	r6,-8(fp)
   21a94:	e17ffd17 	ldw	r5,-12(fp)
   21a98:	e13ffc17 	ldw	r4,-16(fp)
   21a9c:	0021d100 	call	21d10 <open>
   21aa0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   21aa4:	e0bffa17 	ldw	r2,-24(fp)
   21aa8:	10002216 	blt	r2,zero,21b34 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   21aac:	04000134 	movhi	r16,4
   21ab0:	84006a04 	addi	r16,r16,424
   21ab4:	e0bffa17 	ldw	r2,-24(fp)
   21ab8:	01400304 	movi	r5,12
   21abc:	1009883a 	mov	r4,r2
   21ac0:	0020e280 	call	20e28 <__mulsi3>
   21ac4:	8085883a 	add	r2,r16,r2
   21ac8:	10c00017 	ldw	r3,0(r2)
   21acc:	e0bffb17 	ldw	r2,-20(fp)
   21ad0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21ad4:	04000134 	movhi	r16,4
   21ad8:	84006a04 	addi	r16,r16,424
   21adc:	e0bffa17 	ldw	r2,-24(fp)
   21ae0:	01400304 	movi	r5,12
   21ae4:	1009883a 	mov	r4,r2
   21ae8:	0020e280 	call	20e28 <__mulsi3>
   21aec:	8085883a 	add	r2,r16,r2
   21af0:	10800104 	addi	r2,r2,4
   21af4:	10c00017 	ldw	r3,0(r2)
   21af8:	e0bffb17 	ldw	r2,-20(fp)
   21afc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21b00:	04000134 	movhi	r16,4
   21b04:	84006a04 	addi	r16,r16,424
   21b08:	e0bffa17 	ldw	r2,-24(fp)
   21b0c:	01400304 	movi	r5,12
   21b10:	1009883a 	mov	r4,r2
   21b14:	0020e280 	call	20e28 <__mulsi3>
   21b18:	8085883a 	add	r2,r16,r2
   21b1c:	10800204 	addi	r2,r2,8
   21b20:	10c00017 	ldw	r3,0(r2)
   21b24:	e0bffb17 	ldw	r2,-20(fp)
   21b28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21b2c:	e13ffa17 	ldw	r4,-24(fp)
   21b30:	0021e700 	call	21e70 <alt_release_fd>
  }
} 
   21b34:	0001883a 	nop
   21b38:	e6ffff04 	addi	sp,fp,-4
   21b3c:	dfc00217 	ldw	ra,8(sp)
   21b40:	df000117 	ldw	fp,4(sp)
   21b44:	dc000017 	ldw	r16,0(sp)
   21b48:	dec00304 	addi	sp,sp,12
   21b4c:	f800283a 	ret

00021b50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21b50:	defffb04 	addi	sp,sp,-20
   21b54:	dfc00415 	stw	ra,16(sp)
   21b58:	df000315 	stw	fp,12(sp)
   21b5c:	df000304 	addi	fp,sp,12
   21b60:	e13ffd15 	stw	r4,-12(fp)
   21b64:	e17ffe15 	stw	r5,-8(fp)
   21b68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21b6c:	01c07fc4 	movi	r7,511
   21b70:	01800044 	movi	r6,1
   21b74:	e17ffd17 	ldw	r5,-12(fp)
   21b78:	01000134 	movhi	r4,4
   21b7c:	21006d04 	addi	r4,r4,436
   21b80:	0021a6c0 	call	21a6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21b84:	01c07fc4 	movi	r7,511
   21b88:	000d883a 	mov	r6,zero
   21b8c:	e17ffe17 	ldw	r5,-8(fp)
   21b90:	01000134 	movhi	r4,4
   21b94:	21006a04 	addi	r4,r4,424
   21b98:	0021a6c0 	call	21a6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21b9c:	01c07fc4 	movi	r7,511
   21ba0:	01800044 	movi	r6,1
   21ba4:	e17fff17 	ldw	r5,-4(fp)
   21ba8:	01000134 	movhi	r4,4
   21bac:	21007004 	addi	r4,r4,448
   21bb0:	0021a6c0 	call	21a6c <alt_open_fd>
}  
   21bb4:	0001883a 	nop
   21bb8:	e037883a 	mov	sp,fp
   21bbc:	dfc00117 	ldw	ra,4(sp)
   21bc0:	df000017 	ldw	fp,0(sp)
   21bc4:	dec00204 	addi	sp,sp,8
   21bc8:	f800283a 	ret

00021bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21bcc:	defffe04 	addi	sp,sp,-8
   21bd0:	dfc00115 	stw	ra,4(sp)
   21bd4:	df000015 	stw	fp,0(sp)
   21bd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21bdc:	00800134 	movhi	r2,4
   21be0:	1080d204 	addi	r2,r2,840
   21be4:	10800017 	ldw	r2,0(r2)
   21be8:	10000526 	beq	r2,zero,21c00 <alt_get_errno+0x34>
   21bec:	00800134 	movhi	r2,4
   21bf0:	1080d204 	addi	r2,r2,840
   21bf4:	10800017 	ldw	r2,0(r2)
   21bf8:	103ee83a 	callr	r2
   21bfc:	00000206 	br	21c08 <alt_get_errno+0x3c>
   21c00:	00800134 	movhi	r2,4
   21c04:	1080d604 	addi	r2,r2,856
}
   21c08:	e037883a 	mov	sp,fp
   21c0c:	dfc00117 	ldw	ra,4(sp)
   21c10:	df000017 	ldw	fp,0(sp)
   21c14:	dec00204 	addi	sp,sp,8
   21c18:	f800283a 	ret

00021c1c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21c1c:	defffb04 	addi	sp,sp,-20
   21c20:	dfc00415 	stw	ra,16(sp)
   21c24:	df000315 	stw	fp,12(sp)
   21c28:	dc000215 	stw	r16,8(sp)
   21c2c:	df000304 	addi	fp,sp,12
   21c30:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21c34:	e0bffe17 	ldw	r2,-8(fp)
   21c38:	10800217 	ldw	r2,8(r2)
   21c3c:	10d00034 	orhi	r3,r2,16384
   21c40:	e0bffe17 	ldw	r2,-8(fp)
   21c44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21c48:	e03ffd15 	stw	zero,-12(fp)
   21c4c:	00002306 	br	21cdc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21c50:	04000134 	movhi	r16,4
   21c54:	84006a04 	addi	r16,r16,424
   21c58:	e0bffd17 	ldw	r2,-12(fp)
   21c5c:	01400304 	movi	r5,12
   21c60:	1009883a 	mov	r4,r2
   21c64:	0020e280 	call	20e28 <__mulsi3>
   21c68:	8085883a 	add	r2,r16,r2
   21c6c:	10c00017 	ldw	r3,0(r2)
   21c70:	e0bffe17 	ldw	r2,-8(fp)
   21c74:	10800017 	ldw	r2,0(r2)
   21c78:	1880151e 	bne	r3,r2,21cd0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21c7c:	04000134 	movhi	r16,4
   21c80:	84006a04 	addi	r16,r16,424
   21c84:	e0bffd17 	ldw	r2,-12(fp)
   21c88:	01400304 	movi	r5,12
   21c8c:	1009883a 	mov	r4,r2
   21c90:	0020e280 	call	20e28 <__mulsi3>
   21c94:	8085883a 	add	r2,r16,r2
   21c98:	10800204 	addi	r2,r2,8
   21c9c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21ca0:	10000b0e 	bge	r2,zero,21cd0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21ca4:	01400304 	movi	r5,12
   21ca8:	e13ffd17 	ldw	r4,-12(fp)
   21cac:	0020e280 	call	20e28 <__mulsi3>
   21cb0:	1007883a 	mov	r3,r2
   21cb4:	00800134 	movhi	r2,4
   21cb8:	10806a04 	addi	r2,r2,424
   21cbc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21cc0:	e0bffe17 	ldw	r2,-8(fp)
   21cc4:	18800226 	beq	r3,r2,21cd0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21cc8:	00bffcc4 	movi	r2,-13
   21ccc:	00000a06 	br	21cf8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21cd0:	e0bffd17 	ldw	r2,-12(fp)
   21cd4:	10800044 	addi	r2,r2,1
   21cd8:	e0bffd15 	stw	r2,-12(fp)
   21cdc:	00800134 	movhi	r2,4
   21ce0:	1080d104 	addi	r2,r2,836
   21ce4:	10800017 	ldw	r2,0(r2)
   21ce8:	1007883a 	mov	r3,r2
   21cec:	e0bffd17 	ldw	r2,-12(fp)
   21cf0:	18bfd72e 	bgeu	r3,r2,21c50 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21cf4:	0005883a 	mov	r2,zero
}
   21cf8:	e6ffff04 	addi	sp,fp,-4
   21cfc:	dfc00217 	ldw	ra,8(sp)
   21d00:	df000117 	ldw	fp,4(sp)
   21d04:	dc000017 	ldw	r16,0(sp)
   21d08:	dec00304 	addi	sp,sp,12
   21d0c:	f800283a 	ret

00021d10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21d10:	defff604 	addi	sp,sp,-40
   21d14:	dfc00915 	stw	ra,36(sp)
   21d18:	df000815 	stw	fp,32(sp)
   21d1c:	df000804 	addi	fp,sp,32
   21d20:	e13ffd15 	stw	r4,-12(fp)
   21d24:	e17ffe15 	stw	r5,-8(fp)
   21d28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21d2c:	00bfffc4 	movi	r2,-1
   21d30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21d34:	00bffb44 	movi	r2,-19
   21d38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21d3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21d40:	01400134 	movhi	r5,4
   21d44:	2940cf04 	addi	r5,r5,828
   21d48:	e13ffd17 	ldw	r4,-12(fp)
   21d4c:	0021f180 	call	21f18 <alt_find_dev>
   21d50:	e0bff815 	stw	r2,-32(fp)
   21d54:	e0bff817 	ldw	r2,-32(fp)
   21d58:	1000051e 	bne	r2,zero,21d70 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21d5c:	e13ffd17 	ldw	r4,-12(fp)
   21d60:	0021fa80 	call	21fa8 <alt_find_file>
   21d64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21d68:	00800044 	movi	r2,1
   21d6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21d70:	e0bff817 	ldw	r2,-32(fp)
   21d74:	10002b26 	beq	r2,zero,21e24 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21d78:	e13ff817 	ldw	r4,-32(fp)
   21d7c:	00220bc0 	call	220bc <alt_get_fd>
   21d80:	e0bff915 	stw	r2,-28(fp)
   21d84:	e0bff917 	ldw	r2,-28(fp)
   21d88:	1000030e 	bge	r2,zero,21d98 <open+0x88>
    {
      status = index;
   21d8c:	e0bff917 	ldw	r2,-28(fp)
   21d90:	e0bffa15 	stw	r2,-24(fp)
   21d94:	00002506 	br	21e2c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   21d98:	01400304 	movi	r5,12
   21d9c:	e13ff917 	ldw	r4,-28(fp)
   21da0:	0020e280 	call	20e28 <__mulsi3>
   21da4:	1007883a 	mov	r3,r2
   21da8:	00800134 	movhi	r2,4
   21dac:	10806a04 	addi	r2,r2,424
   21db0:	1885883a 	add	r2,r3,r2
   21db4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21db8:	e0fffe17 	ldw	r3,-8(fp)
   21dbc:	00900034 	movhi	r2,16384
   21dc0:	10bfffc4 	addi	r2,r2,-1
   21dc4:	1886703a 	and	r3,r3,r2
   21dc8:	e0bffc17 	ldw	r2,-16(fp)
   21dcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21dd0:	e0bffb17 	ldw	r2,-20(fp)
   21dd4:	1000051e 	bne	r2,zero,21dec <open+0xdc>
   21dd8:	e13ffc17 	ldw	r4,-16(fp)
   21ddc:	0021c1c0 	call	21c1c <alt_file_locked>
   21de0:	e0bffa15 	stw	r2,-24(fp)
   21de4:	e0bffa17 	ldw	r2,-24(fp)
   21de8:	10001016 	blt	r2,zero,21e2c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21dec:	e0bff817 	ldw	r2,-32(fp)
   21df0:	10800317 	ldw	r2,12(r2)
   21df4:	10000826 	beq	r2,zero,21e18 <open+0x108>
   21df8:	e0bff817 	ldw	r2,-32(fp)
   21dfc:	10800317 	ldw	r2,12(r2)
   21e00:	e1ffff17 	ldw	r7,-4(fp)
   21e04:	e1bffe17 	ldw	r6,-8(fp)
   21e08:	e17ffd17 	ldw	r5,-12(fp)
   21e0c:	e13ffc17 	ldw	r4,-16(fp)
   21e10:	103ee83a 	callr	r2
   21e14:	00000106 	br	21e1c <open+0x10c>
   21e18:	0005883a 	mov	r2,zero
   21e1c:	e0bffa15 	stw	r2,-24(fp)
   21e20:	00000206 	br	21e2c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21e24:	00bffb44 	movi	r2,-19
   21e28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21e2c:	e0bffa17 	ldw	r2,-24(fp)
   21e30:	1000090e 	bge	r2,zero,21e58 <open+0x148>
  {
    alt_release_fd (index);  
   21e34:	e13ff917 	ldw	r4,-28(fp)
   21e38:	0021e700 	call	21e70 <alt_release_fd>
    ALT_ERRNO = -status;
   21e3c:	0021bcc0 	call	21bcc <alt_get_errno>
   21e40:	1007883a 	mov	r3,r2
   21e44:	e0bffa17 	ldw	r2,-24(fp)
   21e48:	0085c83a 	sub	r2,zero,r2
   21e4c:	18800015 	stw	r2,0(r3)
    return -1;
   21e50:	00bfffc4 	movi	r2,-1
   21e54:	00000106 	br	21e5c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   21e58:	e0bff917 	ldw	r2,-28(fp)
}
   21e5c:	e037883a 	mov	sp,fp
   21e60:	dfc00117 	ldw	ra,4(sp)
   21e64:	df000017 	ldw	fp,0(sp)
   21e68:	dec00204 	addi	sp,sp,8
   21e6c:	f800283a 	ret

00021e70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   21e70:	defffc04 	addi	sp,sp,-16
   21e74:	dfc00315 	stw	ra,12(sp)
   21e78:	df000215 	stw	fp,8(sp)
   21e7c:	dc000115 	stw	r16,4(sp)
   21e80:	df000204 	addi	fp,sp,8
   21e84:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   21e88:	e0bffe17 	ldw	r2,-8(fp)
   21e8c:	108000d0 	cmplti	r2,r2,3
   21e90:	1000111e 	bne	r2,zero,21ed8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   21e94:	04000134 	movhi	r16,4
   21e98:	84006a04 	addi	r16,r16,424
   21e9c:	e0bffe17 	ldw	r2,-8(fp)
   21ea0:	01400304 	movi	r5,12
   21ea4:	1009883a 	mov	r4,r2
   21ea8:	0020e280 	call	20e28 <__mulsi3>
   21eac:	8085883a 	add	r2,r16,r2
   21eb0:	10800204 	addi	r2,r2,8
   21eb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   21eb8:	04000134 	movhi	r16,4
   21ebc:	84006a04 	addi	r16,r16,424
   21ec0:	e0bffe17 	ldw	r2,-8(fp)
   21ec4:	01400304 	movi	r5,12
   21ec8:	1009883a 	mov	r4,r2
   21ecc:	0020e280 	call	20e28 <__mulsi3>
   21ed0:	8085883a 	add	r2,r16,r2
   21ed4:	10000015 	stw	zero,0(r2)
  }
}
   21ed8:	0001883a 	nop
   21edc:	e6ffff04 	addi	sp,fp,-4
   21ee0:	dfc00217 	ldw	ra,8(sp)
   21ee4:	df000117 	ldw	fp,4(sp)
   21ee8:	dc000017 	ldw	r16,0(sp)
   21eec:	dec00304 	addi	sp,sp,12
   21ef0:	f800283a 	ret

00021ef4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   21ef4:	deffff04 	addi	sp,sp,-4
   21ef8:	df000015 	stw	fp,0(sp)
   21efc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   21f00:	000170fa 	wrctl	ienable,zero
}
   21f04:	0001883a 	nop
   21f08:	e037883a 	mov	sp,fp
   21f0c:	df000017 	ldw	fp,0(sp)
   21f10:	dec00104 	addi	sp,sp,4
   21f14:	f800283a 	ret

00021f18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   21f18:	defffa04 	addi	sp,sp,-24
   21f1c:	dfc00515 	stw	ra,20(sp)
   21f20:	df000415 	stw	fp,16(sp)
   21f24:	df000404 	addi	fp,sp,16
   21f28:	e13ffe15 	stw	r4,-8(fp)
   21f2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   21f30:	e0bfff17 	ldw	r2,-4(fp)
   21f34:	10800017 	ldw	r2,0(r2)
   21f38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   21f3c:	e13ffe17 	ldw	r4,-8(fp)
   21f40:	00205940 	call	20594 <strlen>
   21f44:	10800044 	addi	r2,r2,1
   21f48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21f4c:	00000d06 	br	21f84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   21f50:	e0bffc17 	ldw	r2,-16(fp)
   21f54:	10800217 	ldw	r2,8(r2)
   21f58:	e0fffd17 	ldw	r3,-12(fp)
   21f5c:	180d883a 	mov	r6,r3
   21f60:	e17ffe17 	ldw	r5,-8(fp)
   21f64:	1009883a 	mov	r4,r2
   21f68:	00222600 	call	22260 <memcmp>
   21f6c:	1000021e 	bne	r2,zero,21f78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   21f70:	e0bffc17 	ldw	r2,-16(fp)
   21f74:	00000706 	br	21f94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   21f78:	e0bffc17 	ldw	r2,-16(fp)
   21f7c:	10800017 	ldw	r2,0(r2)
   21f80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21f84:	e0fffc17 	ldw	r3,-16(fp)
   21f88:	e0bfff17 	ldw	r2,-4(fp)
   21f8c:	18bff01e 	bne	r3,r2,21f50 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   21f90:	0005883a 	mov	r2,zero
}
   21f94:	e037883a 	mov	sp,fp
   21f98:	dfc00117 	ldw	ra,4(sp)
   21f9c:	df000017 	ldw	fp,0(sp)
   21fa0:	dec00204 	addi	sp,sp,8
   21fa4:	f800283a 	ret

00021fa8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   21fa8:	defffb04 	addi	sp,sp,-20
   21fac:	dfc00415 	stw	ra,16(sp)
   21fb0:	df000315 	stw	fp,12(sp)
   21fb4:	df000304 	addi	fp,sp,12
   21fb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   21fbc:	00800134 	movhi	r2,4
   21fc0:	1080cd04 	addi	r2,r2,820
   21fc4:	10800017 	ldw	r2,0(r2)
   21fc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   21fcc:	00003106 	br	22094 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   21fd0:	e0bffd17 	ldw	r2,-12(fp)
   21fd4:	10800217 	ldw	r2,8(r2)
   21fd8:	1009883a 	mov	r4,r2
   21fdc:	00205940 	call	20594 <strlen>
   21fe0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   21fe4:	e0bffd17 	ldw	r2,-12(fp)
   21fe8:	10c00217 	ldw	r3,8(r2)
   21fec:	e0bffe17 	ldw	r2,-8(fp)
   21ff0:	10bfffc4 	addi	r2,r2,-1
   21ff4:	1885883a 	add	r2,r3,r2
   21ff8:	10800003 	ldbu	r2,0(r2)
   21ffc:	10803fcc 	andi	r2,r2,255
   22000:	1080201c 	xori	r2,r2,128
   22004:	10bfe004 	addi	r2,r2,-128
   22008:	10800bd8 	cmpnei	r2,r2,47
   2200c:	1000031e 	bne	r2,zero,2201c <alt_find_file+0x74>
    {
      len -= 1;
   22010:	e0bffe17 	ldw	r2,-8(fp)
   22014:	10bfffc4 	addi	r2,r2,-1
   22018:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2201c:	e0bffe17 	ldw	r2,-8(fp)
   22020:	e0ffff17 	ldw	r3,-4(fp)
   22024:	1885883a 	add	r2,r3,r2
   22028:	10800003 	ldbu	r2,0(r2)
   2202c:	10803fcc 	andi	r2,r2,255
   22030:	1080201c 	xori	r2,r2,128
   22034:	10bfe004 	addi	r2,r2,-128
   22038:	10800be0 	cmpeqi	r2,r2,47
   2203c:	1000081e 	bne	r2,zero,22060 <alt_find_file+0xb8>
   22040:	e0bffe17 	ldw	r2,-8(fp)
   22044:	e0ffff17 	ldw	r3,-4(fp)
   22048:	1885883a 	add	r2,r3,r2
   2204c:	10800003 	ldbu	r2,0(r2)
   22050:	10803fcc 	andi	r2,r2,255
   22054:	1080201c 	xori	r2,r2,128
   22058:	10bfe004 	addi	r2,r2,-128
   2205c:	10000a1e 	bne	r2,zero,22088 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   22060:	e0bffd17 	ldw	r2,-12(fp)
   22064:	10800217 	ldw	r2,8(r2)
   22068:	e0fffe17 	ldw	r3,-8(fp)
   2206c:	180d883a 	mov	r6,r3
   22070:	e17fff17 	ldw	r5,-4(fp)
   22074:	1009883a 	mov	r4,r2
   22078:	00222600 	call	22260 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2207c:	1000021e 	bne	r2,zero,22088 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22080:	e0bffd17 	ldw	r2,-12(fp)
   22084:	00000806 	br	220a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   22088:	e0bffd17 	ldw	r2,-12(fp)
   2208c:	10800017 	ldw	r2,0(r2)
   22090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22094:	e0fffd17 	ldw	r3,-12(fp)
   22098:	00800134 	movhi	r2,4
   2209c:	1080cd04 	addi	r2,r2,820
   220a0:	18bfcb1e 	bne	r3,r2,21fd0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   220a4:	0005883a 	mov	r2,zero
}
   220a8:	e037883a 	mov	sp,fp
   220ac:	dfc00117 	ldw	ra,4(sp)
   220b0:	df000017 	ldw	fp,0(sp)
   220b4:	dec00204 	addi	sp,sp,8
   220b8:	f800283a 	ret

000220bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   220bc:	defffa04 	addi	sp,sp,-24
   220c0:	dfc00515 	stw	ra,20(sp)
   220c4:	df000415 	stw	fp,16(sp)
   220c8:	dc000315 	stw	r16,12(sp)
   220cc:	df000404 	addi	fp,sp,16
   220d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   220d4:	00bffa04 	movi	r2,-24
   220d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   220dc:	e03ffc15 	stw	zero,-16(fp)
   220e0:	00002106 	br	22168 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   220e4:	04000134 	movhi	r16,4
   220e8:	84006a04 	addi	r16,r16,424
   220ec:	e0bffc17 	ldw	r2,-16(fp)
   220f0:	01400304 	movi	r5,12
   220f4:	1009883a 	mov	r4,r2
   220f8:	0020e280 	call	20e28 <__mulsi3>
   220fc:	8085883a 	add	r2,r16,r2
   22100:	10800017 	ldw	r2,0(r2)
   22104:	1000151e 	bne	r2,zero,2215c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   22108:	04000134 	movhi	r16,4
   2210c:	84006a04 	addi	r16,r16,424
   22110:	e0bffc17 	ldw	r2,-16(fp)
   22114:	01400304 	movi	r5,12
   22118:	1009883a 	mov	r4,r2
   2211c:	0020e280 	call	20e28 <__mulsi3>
   22120:	8085883a 	add	r2,r16,r2
   22124:	e0fffe17 	ldw	r3,-8(fp)
   22128:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2212c:	00800134 	movhi	r2,4
   22130:	1080d104 	addi	r2,r2,836
   22134:	10c00017 	ldw	r3,0(r2)
   22138:	e0bffc17 	ldw	r2,-16(fp)
   2213c:	1880040e 	bge	r3,r2,22150 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   22140:	00800134 	movhi	r2,4
   22144:	1080d104 	addi	r2,r2,836
   22148:	e0fffc17 	ldw	r3,-16(fp)
   2214c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   22150:	e0bffc17 	ldw	r2,-16(fp)
   22154:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22158:	00000606 	br	22174 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2215c:	e0bffc17 	ldw	r2,-16(fp)
   22160:	10800044 	addi	r2,r2,1
   22164:	e0bffc15 	stw	r2,-16(fp)
   22168:	e0bffc17 	ldw	r2,-16(fp)
   2216c:	10800810 	cmplti	r2,r2,32
   22170:	103fdc1e 	bne	r2,zero,220e4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22174:	e0bffd17 	ldw	r2,-12(fp)
}
   22178:	e6ffff04 	addi	sp,fp,-4
   2217c:	dfc00217 	ldw	ra,8(sp)
   22180:	df000117 	ldw	fp,4(sp)
   22184:	dc000017 	ldw	r16,0(sp)
   22188:	dec00304 	addi	sp,sp,12
   2218c:	f800283a 	ret

00022190 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22190:	defffe04 	addi	sp,sp,-8
   22194:	df000115 	stw	fp,4(sp)
   22198:	df000104 	addi	fp,sp,4
   2219c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   221a0:	e0bfff17 	ldw	r2,-4(fp)
   221a4:	10bffe84 	addi	r2,r2,-6
   221a8:	10c00428 	cmpgeui	r3,r2,16
   221ac:	18001a1e 	bne	r3,zero,22218 <alt_exception_cause_generated_bad_addr+0x88>
   221b0:	100690ba 	slli	r3,r2,2
   221b4:	008000b4 	movhi	r2,2
   221b8:	10887204 	addi	r2,r2,8648
   221bc:	1885883a 	add	r2,r3,r2
   221c0:	10800017 	ldw	r2,0(r2)
   221c4:	1000683a 	jmp	r2
   221c8:	00022208 	cmpgei	zero,zero,2184
   221cc:	00022208 	cmpgei	zero,zero,2184
   221d0:	00022218 	cmpnei	zero,zero,2184
   221d4:	00022218 	cmpnei	zero,zero,2184
   221d8:	00022218 	cmpnei	zero,zero,2184
   221dc:	00022208 	cmpgei	zero,zero,2184
   221e0:	00022210 	cmplti	zero,zero,2184
   221e4:	00022218 	cmpnei	zero,zero,2184
   221e8:	00022208 	cmpgei	zero,zero,2184
   221ec:	00022208 	cmpgei	zero,zero,2184
   221f0:	00022218 	cmpnei	zero,zero,2184
   221f4:	00022208 	cmpgei	zero,zero,2184
   221f8:	00022210 	cmplti	zero,zero,2184
   221fc:	00022218 	cmpnei	zero,zero,2184
   22200:	00022218 	cmpnei	zero,zero,2184
   22204:	00022208 	cmpgei	zero,zero,2184
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22208:	00800044 	movi	r2,1
   2220c:	00000306 	br	2221c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22210:	0005883a 	mov	r2,zero
   22214:	00000106 	br	2221c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22218:	0005883a 	mov	r2,zero
  }
}
   2221c:	e037883a 	mov	sp,fp
   22220:	df000017 	ldw	fp,0(sp)
   22224:	dec00104 	addi	sp,sp,4
   22228:	f800283a 	ret

0002222c <atexit>:
   2222c:	200b883a 	mov	r5,r4
   22230:	000f883a 	mov	r7,zero
   22234:	000d883a 	mov	r6,zero
   22238:	0009883a 	mov	r4,zero
   2223c:	00222901 	jmpi	22290 <__register_exitproc>

00022240 <exit>:
   22240:	defffe04 	addi	sp,sp,-8
   22244:	000b883a 	mov	r5,zero
   22248:	dc000015 	stw	r16,0(sp)
   2224c:	dfc00115 	stw	ra,4(sp)
   22250:	2021883a 	mov	r16,r4
   22254:	00223e80 	call	223e8 <__call_exitprocs>
   22258:	8009883a 	mov	r4,r16
   2225c:	00225780 	call	22578 <_exit>

00022260 <memcmp>:
   22260:	218d883a 	add	r6,r4,r6
   22264:	21800826 	beq	r4,r6,22288 <memcmp+0x28>
   22268:	20800003 	ldbu	r2,0(r4)
   2226c:	28c00003 	ldbu	r3,0(r5)
   22270:	10c00226 	beq	r2,r3,2227c <memcmp+0x1c>
   22274:	10c5c83a 	sub	r2,r2,r3
   22278:	f800283a 	ret
   2227c:	21000044 	addi	r4,r4,1
   22280:	29400044 	addi	r5,r5,1
   22284:	003ff706 	br	22264 <memcmp+0x4>
   22288:	0005883a 	mov	r2,zero
   2228c:	f800283a 	ret

00022290 <__register_exitproc>:
   22290:	00800134 	movhi	r2,4
   22294:	1080ca04 	addi	r2,r2,808
   22298:	10c00017 	ldw	r3,0(r2)
   2229c:	defff904 	addi	sp,sp,-28
   222a0:	dc000015 	stw	r16,0(sp)
   222a4:	1c000c17 	ldw	r16,48(r3)
   222a8:	dd400515 	stw	r21,20(sp)
   222ac:	dd000415 	stw	r20,16(sp)
   222b0:	dcc00315 	stw	r19,12(sp)
   222b4:	dc800215 	stw	r18,8(sp)
   222b8:	dc400115 	stw	r17,4(sp)
   222bc:	dfc00615 	stw	ra,24(sp)
   222c0:	202b883a 	mov	r21,r4
   222c4:	2823883a 	mov	r17,r5
   222c8:	3027883a 	mov	r19,r6
   222cc:	3825883a 	mov	r18,r7
   222d0:	1029883a 	mov	r20,r2
   222d4:	8000021e 	bne	r16,zero,222e0 <__register_exitproc+0x50>
   222d8:	1c000d04 	addi	r16,r3,52
   222dc:	1c000c15 	stw	r16,48(r3)
   222e0:	80800117 	ldw	r2,4(r16)
   222e4:	00c007c4 	movi	r3,31
   222e8:	1880110e 	bge	r3,r2,22330 <__register_exitproc+0xa0>
   222ec:	00800034 	movhi	r2,0
   222f0:	10800004 	addi	r2,r2,0
   222f4:	1000021e 	bne	r2,zero,22300 <__register_exitproc+0x70>
   222f8:	00bfffc4 	movi	r2,-1
   222fc:	00003106 	br	223c4 <__register_exitproc+0x134>
   22300:	01002304 	movi	r4,140
   22304:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22308:	1021883a 	mov	r16,r2
   2230c:	103ffa26 	beq	r2,zero,222f8 <__register_exitproc+0x68>
   22310:	10000115 	stw	zero,4(r2)
   22314:	a0800017 	ldw	r2,0(r20)
   22318:	10c00c17 	ldw	r3,48(r2)
   2231c:	80c00015 	stw	r3,0(r16)
   22320:	14000c15 	stw	r16,48(r2)
   22324:	80002215 	stw	zero,136(r16)
   22328:	a8001d26 	beq	r21,zero,223a0 <__register_exitproc+0x110>
   2232c:	00000606 	br	22348 <__register_exitproc+0xb8>
   22330:	a8001b26 	beq	r21,zero,223a0 <__register_exitproc+0x110>
   22334:	80802217 	ldw	r2,136(r16)
   22338:	1000091e 	bne	r2,zero,22360 <__register_exitproc+0xd0>
   2233c:	00800034 	movhi	r2,0
   22340:	10800004 	addi	r2,r2,0
   22344:	103fec26 	beq	r2,zero,222f8 <__register_exitproc+0x68>
   22348:	01004204 	movi	r4,264
   2234c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22350:	103fe926 	beq	r2,zero,222f8 <__register_exitproc+0x68>
   22354:	10004015 	stw	zero,256(r2)
   22358:	10004115 	stw	zero,260(r2)
   2235c:	80802215 	stw	r2,136(r16)
   22360:	81400117 	ldw	r5,4(r16)
   22364:	01000044 	movi	r4,1
   22368:	2947883a 	add	r3,r5,r5
   2236c:	18c7883a 	add	r3,r3,r3
   22370:	10c7883a 	add	r3,r2,r3
   22374:	1cc00015 	stw	r19,0(r3)
   22378:	2148983a 	sll	r4,r4,r5
   2237c:	11404017 	ldw	r5,256(r2)
   22380:	290ab03a 	or	r5,r5,r4
   22384:	11404015 	stw	r5,256(r2)
   22388:	1c802015 	stw	r18,128(r3)
   2238c:	00c00084 	movi	r3,2
   22390:	a8c0031e 	bne	r21,r3,223a0 <__register_exitproc+0x110>
   22394:	10c04117 	ldw	r3,260(r2)
   22398:	1908b03a 	or	r4,r3,r4
   2239c:	11004115 	stw	r4,260(r2)
   223a0:	80800117 	ldw	r2,4(r16)
   223a4:	10c00044 	addi	r3,r2,1
   223a8:	10800084 	addi	r2,r2,2
   223ac:	1085883a 	add	r2,r2,r2
   223b0:	1085883a 	add	r2,r2,r2
   223b4:	80c00115 	stw	r3,4(r16)
   223b8:	80a1883a 	add	r16,r16,r2
   223bc:	84400015 	stw	r17,0(r16)
   223c0:	0005883a 	mov	r2,zero
   223c4:	dfc00617 	ldw	ra,24(sp)
   223c8:	dd400517 	ldw	r21,20(sp)
   223cc:	dd000417 	ldw	r20,16(sp)
   223d0:	dcc00317 	ldw	r19,12(sp)
   223d4:	dc800217 	ldw	r18,8(sp)
   223d8:	dc400117 	ldw	r17,4(sp)
   223dc:	dc000017 	ldw	r16,0(sp)
   223e0:	dec00704 	addi	sp,sp,28
   223e4:	f800283a 	ret

000223e8 <__call_exitprocs>:
   223e8:	defff504 	addi	sp,sp,-44
   223ec:	dd000515 	stw	r20,20(sp)
   223f0:	05000134 	movhi	r20,4
   223f4:	dc800315 	stw	r18,12(sp)
   223f8:	dfc00a15 	stw	ra,40(sp)
   223fc:	df000915 	stw	fp,36(sp)
   22400:	ddc00815 	stw	r23,32(sp)
   22404:	dd800715 	stw	r22,28(sp)
   22408:	dd400615 	stw	r21,24(sp)
   2240c:	dcc00415 	stw	r19,16(sp)
   22410:	dc400215 	stw	r17,8(sp)
   22414:	dc000115 	stw	r16,4(sp)
   22418:	d9000015 	stw	r4,0(sp)
   2241c:	2825883a 	mov	r18,r5
   22420:	a500ca04 	addi	r20,r20,808
   22424:	a4400017 	ldw	r17,0(r20)
   22428:	8cc00c17 	ldw	r19,48(r17)
   2242c:	8c400c04 	addi	r17,r17,48
   22430:	98004526 	beq	r19,zero,22548 <__call_exitprocs+0x160>
   22434:	9c000117 	ldw	r16,4(r19)
   22438:	00900034 	movhi	r2,16384
   2243c:	10bfffc4 	addi	r2,r2,-1
   22440:	9d402217 	ldw	r21,136(r19)
   22444:	85bfffc4 	addi	r22,r16,-1
   22448:	80a1883a 	add	r16,r16,r2
   2244c:	8421883a 	add	r16,r16,r16
   22450:	8421883a 	add	r16,r16,r16
   22454:	ac2f883a 	add	r23,r21,r16
   22458:	84000204 	addi	r16,r16,8
   2245c:	9c21883a 	add	r16,r19,r16
   22460:	b0002716 	blt	r22,zero,22500 <__call_exitprocs+0x118>
   22464:	90000726 	beq	r18,zero,22484 <__call_exitprocs+0x9c>
   22468:	a800041e 	bne	r21,zero,2247c <__call_exitprocs+0x94>
   2246c:	b5bfffc4 	addi	r22,r22,-1
   22470:	bdffff04 	addi	r23,r23,-4
   22474:	843fff04 	addi	r16,r16,-4
   22478:	003ff906 	br	22460 <__call_exitprocs+0x78>
   2247c:	b9002017 	ldw	r4,128(r23)
   22480:	913ffa1e 	bne	r18,r4,2246c <__call_exitprocs+0x84>
   22484:	99000117 	ldw	r4,4(r19)
   22488:	82000017 	ldw	r8,0(r16)
   2248c:	213fffc4 	addi	r4,r4,-1
   22490:	b100021e 	bne	r22,r4,2249c <__call_exitprocs+0xb4>
   22494:	9d800115 	stw	r22,4(r19)
   22498:	00000106 	br	224a0 <__call_exitprocs+0xb8>
   2249c:	80000015 	stw	zero,0(r16)
   224a0:	403ff226 	beq	r8,zero,2246c <__call_exitprocs+0x84>
   224a4:	9f000117 	ldw	fp,4(r19)
   224a8:	a8000526 	beq	r21,zero,224c0 <__call_exitprocs+0xd8>
   224ac:	00800044 	movi	r2,1
   224b0:	1592983a 	sll	r9,r2,r22
   224b4:	a9404017 	ldw	r5,256(r21)
   224b8:	494a703a 	and	r5,r9,r5
   224bc:	2800021e 	bne	r5,zero,224c8 <__call_exitprocs+0xe0>
   224c0:	403ee83a 	callr	r8
   224c4:	00000906 	br	224ec <__call_exitprocs+0x104>
   224c8:	a9004117 	ldw	r4,260(r21)
   224cc:	4908703a 	and	r4,r9,r4
   224d0:	2000041e 	bne	r4,zero,224e4 <__call_exitprocs+0xfc>
   224d4:	b9400017 	ldw	r5,0(r23)
   224d8:	d9000017 	ldw	r4,0(sp)
   224dc:	403ee83a 	callr	r8
   224e0:	00000206 	br	224ec <__call_exitprocs+0x104>
   224e4:	b9000017 	ldw	r4,0(r23)
   224e8:	403ee83a 	callr	r8
   224ec:	99000117 	ldw	r4,4(r19)
   224f0:	e13fcc1e 	bne	fp,r4,22424 <__call_exitprocs+0x3c>
   224f4:	89000017 	ldw	r4,0(r17)
   224f8:	993fdc26 	beq	r19,r4,2246c <__call_exitprocs+0x84>
   224fc:	003fc906 	br	22424 <__call_exitprocs+0x3c>
   22500:	00800034 	movhi	r2,0
   22504:	10800004 	addi	r2,r2,0
   22508:	10000f26 	beq	r2,zero,22548 <__call_exitprocs+0x160>
   2250c:	99400117 	ldw	r5,4(r19)
   22510:	99000017 	ldw	r4,0(r19)
   22514:	2800091e 	bne	r5,zero,2253c <__call_exitprocs+0x154>
   22518:	20000826 	beq	r4,zero,2253c <__call_exitprocs+0x154>
   2251c:	89000015 	stw	r4,0(r17)
   22520:	a8000226 	beq	r21,zero,2252c <__call_exitprocs+0x144>
   22524:	a809883a 	mov	r4,r21
   22528:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2252c:	9809883a 	mov	r4,r19
   22530:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22534:	8cc00017 	ldw	r19,0(r17)
   22538:	003fbd06 	br	22430 <__call_exitprocs+0x48>
   2253c:	9823883a 	mov	r17,r19
   22540:	2027883a 	mov	r19,r4
   22544:	003fba06 	br	22430 <__call_exitprocs+0x48>
   22548:	dfc00a17 	ldw	ra,40(sp)
   2254c:	df000917 	ldw	fp,36(sp)
   22550:	ddc00817 	ldw	r23,32(sp)
   22554:	dd800717 	ldw	r22,28(sp)
   22558:	dd400617 	ldw	r21,24(sp)
   2255c:	dd000517 	ldw	r20,20(sp)
   22560:	dcc00417 	ldw	r19,16(sp)
   22564:	dc800317 	ldw	r18,12(sp)
   22568:	dc400217 	ldw	r17,8(sp)
   2256c:	dc000117 	ldw	r16,4(sp)
   22570:	dec00b04 	addi	sp,sp,44
   22574:	f800283a 	ret

00022578 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   22578:	defffd04 	addi	sp,sp,-12
   2257c:	df000215 	stw	fp,8(sp)
   22580:	df000204 	addi	fp,sp,8
   22584:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   22588:	0001883a 	nop
   2258c:	e0bfff17 	ldw	r2,-4(fp)
   22590:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   22594:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   22598:	10000226 	beq	r2,zero,225a4 <_exit+0x2c>
    ALT_SIM_FAIL();
   2259c:	002af070 	cmpltui	zero,zero,43969
   225a0:	00000106 	br	225a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   225a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   225a8:	003fff06 	br	225a8 <_exit+0x30>
