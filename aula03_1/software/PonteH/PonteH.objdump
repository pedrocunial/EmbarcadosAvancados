
PonteH.elf:     file format elf32-littlenios2
PonteH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000026b0 memsz 0x000026b0 flags r-x
    LOAD off    0x00004068 vaddr 0x00040068 paddr 0x000226d0 align 2**12
         filesz 0x000002d8 memsz 0x00000400 flags rw-
    LOAD off    0x00005000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000068 memsz 0x00000068 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000024a0  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  00040000  00040000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d8  00040068  000226d0  00004068  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00040340  000229a8  00004340  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000229a8  000229a8  00005068  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00040468  00040468  00005068  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000638  00000000  00000000  00005090  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007eb6  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b5c  00000000  00000000  0000d57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000030ec  00000000  00000000  000100da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bc4  00000000  00000000  000131c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001dbc  00000000  00000000  00013d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000015ba  00000000  00000000  00015b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00017104  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002c0  00000000  00000000  00017148  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00018ef2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00018ef5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00018f01  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00018f02  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00018f03  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00018f0e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00018f19  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00018f24  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000036  00000000  00000000  00018f2d  2**0
                  CONTENTS, READONLY
 27 .jdi          0000404c  00000000  00000000  00018f63  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000401a9  00000000  00000000  0001cfaf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
00040068 l    d  .rwdata	00000000 .rwdata
00040340 l    d  .bss	00000000 .bss
000229a8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00040468 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PonteH_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000206d4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00040068 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00021124 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000212bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002140c l     F .text	00000038 alt_dev_reg
00040148 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00021848 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00021990 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000219bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021b90 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00021cf0 l     F .text	00000050 alt_get_errno
00021d40 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00040364 g     O .bss	00000004 alt_instruction_exception_handler
00021210 g     F .text	0000007c alt_main
00020624 g     F .text	00000080 _puts_r
00040368 g     O .bss	00000100 alt_irq
000226d0 g       *ABS*	00000000 __flash_rwdata_start
000205d8 g     F .text	0000004c printf
00020308 g     F .text	00000030 hbridge_disable_irq
00022018 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00040340 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00040350 g     O .bss	00000004 errno
0004035c g     O .bss	00000004 alt_argv
0004831c g       *ABS*	00000000 _gp
0002128c g     F .text	00000030 usleep
00040344 g     O .bss	00000004 prev_state
0004019c g     O .rwdata	00000180 alt_fd_list
0002203c g     F .text	00000090 alt_find_dev
00021c74 g     F .text	0000007c alt_io_redirect
000226d0 g       *ABS*	00000000 __DTOR_END__
000206a4 g     F .text	00000014 puts
000222b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00021570 g     F .text	000000ec altera_avalon_jtag_uart_read
0002059c g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020e90 g     F .text	00000064 .hidden __udivsi3
00040338 g     O .rwdata	00000004 alt_max_fd
00020f74 g     F .text	000001b0 alt_irq_register
0004031c g     O .rwdata	00000004 _global_impure_ptr
00040468 g       *ABS*	00000000 __bss_end
00040354 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00040174 g     O .rwdata	00000028 alt_dev_null
00021970 g     F .text	00000020 alt_dcache_flush_all
00040340 g       *ABS*	00000000 __ram_rwdata_end
000203a4 g     F .text	00000068 hbridge_enable_irq
00040330 g     O .rwdata	00000008 alt_dev_list
0002130c g     F .text	00000100 write
00040068 g       *ABS*	00000000 __ram_rodata_end
00020ef4 g     F .text	00000058 .hidden __umodsi3
00040468 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000226d0 g       *ABS*	00000000 __CTOR_LIST__
0005f400 g       *ABS*	00000000 __alt_stack_pointer
0002165c g     F .text	00000094 altera_avalon_jtag_uart_write
00020740 g     F .text	0000052c ___vfprintf_internal_r
0002250c g     F .text	00000190 __call_exitprocs
00020230 g     F .text	0000003c _start
0002147c g     F .text	00000034 alt_sys_init
000223b4 g     F .text	00000158 __register_exitproc
00020f4c g     F .text	00000028 .hidden __mulsi3
00040068 g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
000214b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000221e0 g     F .text	000000d4 alt_get_fd
000216f0 g     F .text	00000158 alt_busy_sleep
00020338 g     F .text	00000028 hbridge_read_duty_cycle
00022384 g     F .text	00000030 memcmp
00020360 g     F .text	00000044 hbridge_write_duty_cycle
00040468 g       *ABS*	00000000 __alt_stack_base
000220cc g     F .text	00000114 alt_find_file
00021a0c g     F .text	000000a4 alt_dev_llist_insert
00020c88 g     F .text	000000b8 __sfvwrite_small_dev
00040340 g       *ABS*	00000000 __bss_start
0002047c g     F .text	00000120 main
00040360 g     O .bss	00000004 alt_envp
00021510 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004033c g     O .rwdata	00000004 alt_errno
00020d98 g     F .text	00000084 .hidden __divsi3
000226d0 g       *ABS*	00000000 __CTOR_END__
00040000 g       *ABS*	00000000 __flash_rodata_start
000226d0 g       *ABS*	00000000 __DTOR_LIST__
00021444 g     F .text	00000038 alt_irq_init
00021f94 g     F .text	00000084 alt_release_fd
00022350 g     F .text	00000014 atexit
00020d40 g     F .text	00000058 _write_r
00040320 g     O .rwdata	00000004 _impure_ptr
00040358 g     O .bss	00000004 alt_argc
0002040c g     F .text	00000070 hbridge_init
00021b10 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00040348 g     O .bss	00000001 reversed
00040328 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00040340 g       *ABS*	00000000 _edata
00040468 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00022364 g     F .text	00000020 exit
00020e1c g     F .text	00000074 .hidden __modsi3
0005f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0004034c g     O .bss	00000004 duty_cycle
0002269c g     F .text	00000034 _exit
000206b8 g     F .text	0000001c strlen
00021e34 g     F .text	00000160 open
00021b70 g     F .text	00000020 alt_icache_flush_all
00040324 g     O .rwdata	00000004 alt_priority_mask
00020c6c g     F .text	0000001c __vfprintf_internal
00021ab0 g     F .text	00000060 _do_ctors
0002026c g     F .text	0000009c handle_button_interrupts
00021898 g     F .text	000000d8 close
0002118c g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	1080da04 	addi	r2,r2,872
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	1080da04 	addi	r2,r2,872
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01217 	ldw	r2,-32696(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01217 	ldw	r2,-32696(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2023c:	d6a0c714 	ori	gp,gp,33564
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20244:	1080d014 	ori	r2,r2,832

    movhi r3, %hi(__bss_end)
   20248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2024c:	18c11a14 	ori	r3,r3,1128

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002118c0 	call	2118c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00212100 	call	21210 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <alt_after_alt_main>

0002026c <handle_button_interrupts>:
#define DUTY_CYCLE_OFFSET (1)
#define TIMER_OFFSET      (1 << 2)


void handle_button_interrupts(void *context, alt_u32 id)
{
   2026c:	defffb04 	addi	sp,sp,-20
   20270:	dfc00415 	stw	ra,16(sp)
   20274:	df000315 	stw	fp,12(sp)
   20278:	df000304 	addi	fp,sp,12
   2027c:	e13ffe15 	stw	r4,-8(fp)
   20280:	e17fff15 	stw	r5,-4(fp)

	volatile int *edge_capture_ptr = (volatile int *) context;
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   2028c:	0007883a 	mov	r3,zero
   20290:	008001b4 	movhi	r2,6
   20294:	10840b04 	addi	r2,r2,4140
   20298:	10c00035 	stwio	r3,0(r2)
	reversed = !reversed;
   2029c:	00800134 	movhi	r2,4
   202a0:	1080d204 	addi	r2,r2,840
   202a4:	10800003 	ldbu	r2,0(r2)
   202a8:	10803fcc 	andi	r2,r2,255
   202ac:	1080201c 	xori	r2,r2,128
   202b0:	10bfe004 	addi	r2,r2,-128
   202b4:	1005003a 	cmpeq	r2,r2,zero
   202b8:	1007883a 	mov	r3,r2
   202bc:	00800134 	movhi	r2,4
   202c0:	1080d204 	addi	r2,r2,840
   202c4:	10c00005 	stb	r3,0(r2)
	printf("hello from interrupt -- %d\n", reversed);
   202c8:	00800134 	movhi	r2,4
   202cc:	1080d204 	addi	r2,r2,840
   202d0:	10800003 	ldbu	r2,0(r2)
   202d4:	10803fcc 	andi	r2,r2,255
   202d8:	1080201c 	xori	r2,r2,128
   202dc:	10bfe004 	addi	r2,r2,-128
   202e0:	100b883a 	mov	r5,r2
   202e4:	01000134 	movhi	r4,4
   202e8:	21000004 	addi	r4,r4,0
   202ec:	00205d80 	call	205d8 <printf>
}
   202f0:	0001883a 	nop
   202f4:	e037883a 	mov	sp,fp
   202f8:	dfc00117 	ldw	ra,4(sp)
   202fc:	df000017 	ldw	fp,0(sp)
   20300:	dec00204 	addi	sp,sp,8
   20304:	f800283a 	ret

00020308 <hbridge_disable_irq>:


int hbridge_disable_irq()
{
   20308:	deffff04 	addi	sp,sp,-4
   2030c:	df000015 	stw	fp,0(sp)
   20310:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0x0);
   20314:	0007883a 	mov	r3,zero
   20318:	008001b4 	movhi	r2,6
   2031c:	10840a04 	addi	r2,r2,4136
   20320:	10c00035 	stwio	r3,0(r2)
	return 0;
   20324:	0005883a 	mov	r2,zero
}
   20328:	e037883a 	mov	sp,fp
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00104 	addi	sp,sp,4
   20334:	f800283a 	ret

00020338 <hbridge_read_duty_cycle>:

int hbridge_read_duty_cycle()
{
   20338:	deffff04 	addi	sp,sp,-4
   2033c:	df000015 	stw	fp,0(sp)
   20340:	d839883a 	mov	fp,sp
	return duty_cycle;
   20344:	00800134 	movhi	r2,4
   20348:	1080d304 	addi	r2,r2,844
   2034c:	10800017 	ldw	r2,0(r2)
}
   20350:	e037883a 	mov	sp,fp
   20354:	df000017 	ldw	fp,0(sp)
   20358:	dec00104 	addi	sp,sp,4
   2035c:	f800283a 	ret

00020360 <hbridge_write_duty_cycle>:

int hbridge_write_duty_cycle(int dt)
{
   20360:	defffe04 	addi	sp,sp,-8
   20364:	df000115 	stw	fp,4(sp)
   20368:	df000104 	addi	fp,sp,4
   2036c:	e13fff15 	stw	r4,-4(fp)
	if (dt < 0) return 1;
   20370:	e0bfff17 	ldw	r2,-4(fp)
   20374:	1000020e 	bge	r2,zero,20380 <hbridge_write_duty_cycle+0x20>
   20378:	00800044 	movi	r2,1
   2037c:	00000506 	br	20394 <hbridge_write_duty_cycle+0x34>
	duty_cycle = dt;
   20380:	00800134 	movhi	r2,4
   20384:	1080d304 	addi	r2,r2,844
   20388:	e0ffff17 	ldw	r3,-4(fp)
   2038c:	10c00015 	stw	r3,0(r2)
	return 0;
   20390:	0005883a 	mov	r2,zero
}
   20394:	e037883a 	mov	sp,fp
   20398:	df000017 	ldw	fp,0(sp)
   2039c:	dec00104 	addi	sp,sp,4
   203a0:	f800283a 	ret

000203a4 <hbridge_enable_irq>:


int hbridge_enable_irq()
{
   203a4:	defffd04 	addi	sp,sp,-12
   203a8:	dfc00215 	stw	ra,8(sp)
   203ac:	df000115 	stw	fp,4(sp)
   203b0:	df000104 	addi	fp,sp,4
	void *edge_capture_ptr = (void *) &edge_capture;
   203b4:	00800134 	movhi	r2,4
   203b8:	1080d004 	addi	r2,r2,832
   203bc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
   203c0:	00c003c4 	movi	r3,15
   203c4:	008001b4 	movhi	r2,6
   203c8:	10840a04 	addi	r2,r2,4136
   203cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   203d0:	0007883a 	mov	r3,zero
   203d4:	008001b4 	movhi	r2,6
   203d8:	10840b04 	addi	r2,r2,4140
   203dc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(PIO_1_IRQ, edge_capture_ptr,
   203e0:	018000b4 	movhi	r6,2
   203e4:	31809b04 	addi	r6,r6,620
   203e8:	e17fff17 	ldw	r5,-4(fp)
   203ec:	0009883a 	mov	r4,zero
   203f0:	0020f740 	call	20f74 <alt_irq_register>
			handle_button_interrupts);
	return 0;
   203f4:	0005883a 	mov	r2,zero
}
   203f8:	e037883a 	mov	sp,fp
   203fc:	dfc00117 	ldw	ra,4(sp)
   20400:	df000017 	ldw	fp,0(sp)
   20404:	dec00204 	addi	sp,sp,8
   20408:	f800283a 	ret

0002040c <hbridge_init>:

int hbridge_init(int dc, int timer, char rev) {
   2040c:	defffa04 	addi	sp,sp,-24
   20410:	dfc00515 	stw	ra,20(sp)
   20414:	df000415 	stw	fp,16(sp)
   20418:	df000404 	addi	fp,sp,16
   2041c:	e13ffd15 	stw	r4,-12(fp)
   20420:	e17ffe15 	stw	r5,-8(fp)
   20424:	3005883a 	mov	r2,r6
   20428:	e0bfff05 	stb	r2,-4(fp)
	unsigned *p_avalon = (unsigned *) PERIPHERAL_LED_0_BASE;
   2042c:	e03ffc15 	stw	zero,-16(fp)
	*(p_avalon + DUTY_CYCLE_OFFSET) = dc;
   20430:	e0bffc17 	ldw	r2,-16(fp)
   20434:	10800104 	addi	r2,r2,4
   20438:	e0fffd17 	ldw	r3,-12(fp)
   2043c:	10c00015 	stw	r3,0(r2)
	*(p_avalon + TIMER_OFFSET) = timer;
   20440:	e0bffc17 	ldw	r2,-16(fp)
   20444:	10800404 	addi	r2,r2,16
   20448:	e0fffe17 	ldw	r3,-8(fp)
   2044c:	10c00015 	stw	r3,0(r2)
	reversed = rev;
   20450:	00800134 	movhi	r2,4
   20454:	1080d204 	addi	r2,r2,840
   20458:	e0ffff03 	ldbu	r3,-4(fp)
   2045c:	10c00005 	stb	r3,0(r2)
	hbridge_enable_irq();
   20460:	00203a40 	call	203a4 <hbridge_enable_irq>
	return 0;
   20464:	0005883a 	mov	r2,zero
}
   20468:	e037883a 	mov	sp,fp
   2046c:	dfc00117 	ldw	ra,4(sp)
   20470:	df000017 	ldw	fp,0(sp)
   20474:	dec00204 	addi	sp,sp,8
   20478:	f800283a 	ret

0002047c <main>:

int main(void){
   2047c:	defffb04 	addi	sp,sp,-20
   20480:	dfc00415 	stw	ra,16(sp)
   20484:	df000315 	stw	fp,12(sp)
   20488:	df000304 	addi	fp,sp,12
  int led = 0;
   2048c:	e03ffd15 	stw	zero,-12(fp)
  unsigned int *p_avalon = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20490:	e03fff15 	stw	zero,-4(fp)

  *prev_state = 0;
   20494:	00800134 	movhi	r2,4
   20498:	1080d104 	addi	r2,r2,836
   2049c:	10800017 	ldw	r2,0(r2)
   204a0:	10000015 	stw	zero,0(r2)
  hbridge_init(300, 15, 0);
   204a4:	000d883a 	mov	r6,zero
   204a8:	014003c4 	movi	r5,15
   204ac:	01004b04 	movi	r4,300
   204b0:	002040c0 	call	2040c <hbridge_init>

#ifndef SIM
  printf("Embarcados++ \n");
   204b4:	01000134 	movhi	r4,4
   204b8:	21000704 	addi	r4,r4,28
   204bc:	00206a40 	call	206a4 <puts>
#endif

  int dc = 0;
   204c0:	e03ffe15 	stw	zero,-8(fp)
  while(1) {
	  hbridge_init(dc, 15, 0);
   204c4:	000d883a 	mov	r6,zero
   204c8:	014003c4 	movi	r5,15
   204cc:	e13ffe17 	ldw	r4,-8(fp)
   204d0:	002040c0 	call	2040c <hbridge_init>
	  if (led < 4 && led > -1){
   204d4:	e0bffd17 	ldw	r2,-12(fp)
   204d8:	10800108 	cmpgei	r2,r2,4
   204dc:	10001d1e 	bne	r2,zero,20554 <main+0xd8>
   204e0:	e0bffd17 	ldw	r2,-12(fp)
   204e4:	10001b16 	blt	r2,zero,20554 <main+0xd8>
		  *(p_avalon+LEDS_DATA_OFFSET) = (0x1 );
   204e8:	e0bfff17 	ldw	r2,-4(fp)
   204ec:	10800204 	addi	r2,r2,8
   204f0:	00c00044 	movi	r3,1
   204f4:	10c00015 	stw	r3,0(r2)
//		  printf("reversed: %d\n", reversed);
		  if (reversed)
   204f8:	00800134 	movhi	r2,4
   204fc:	1080d204 	addi	r2,r2,840
   20500:	10800003 	ldbu	r2,0(r2)
   20504:	10803fcc 	andi	r2,r2,255
   20508:	1080201c 	xori	r2,r2,128
   2050c:	10bfe004 	addi	r2,r2,-128
   20510:	10000426 	beq	r2,zero,20524 <main+0xa8>
			  led++;
   20514:	e0bffd17 	ldw	r2,-12(fp)
   20518:	10800044 	addi	r2,r2,1
   2051c:	e0bffd15 	stw	r2,-12(fp)
   20520:	00000306 	br	20530 <main+0xb4>
		  else
			  led--;
   20524:	e0bffd17 	ldw	r2,-12(fp)
   20528:	10bfffc4 	addi	r2,r2,-1
   2052c:	e0bffd15 	stw	r2,-12(fp)
#ifndef SIM
          usleep(1000000 >> p_avalon[DUTY_CYCLE_OFFSET]); // remover durante a simulação
   20530:	e0bfff17 	ldw	r2,-4(fp)
   20534:	10800104 	addi	r2,r2,4
   20538:	10c00017 	ldw	r3,0(r2)
   2053c:	008003f4 	movhi	r2,15
   20540:	10909004 	addi	r2,r2,16960
   20544:	10c5d83a 	sra	r2,r2,r3
   20548:	1009883a 	mov	r4,r2
   2054c:	002128c0 	call	2128c <usleep>
#endif

  int dc = 0;
  while(1) {
	  hbridge_init(dc, 15, 0);
	  if (led < 4 && led > -1){
   20550:	00000606 	br	2056c <main+0xf0>
#ifndef SIM
          usleep(1000000 >> p_avalon[DUTY_CYCLE_OFFSET]); // remover durante a simulação
#endif
	  }
	  else{
		  led = (led < 0) ? 3 : 0;
   20554:	e0bffd17 	ldw	r2,-12(fp)
   20558:	1000020e 	bge	r2,zero,20564 <main+0xe8>
   2055c:	008000c4 	movi	r2,3
   20560:	00000106 	br	20568 <main+0xec>
   20564:	0005883a 	mov	r2,zero
   20568:	e0bffd15 	stw	r2,-12(fp)
	  }
	  dc += 100;
   2056c:	e0bffe17 	ldw	r2,-8(fp)
   20570:	10801904 	addi	r2,r2,100
   20574:	e0bffe15 	stw	r2,-8(fp)
	  if (dc > 500) dc = 0;
   20578:	e0bffe17 	ldw	r2,-8(fp)
   2057c:	10807d50 	cmplti	r2,r2,501
   20580:	1000011e 	bne	r2,zero,20588 <main+0x10c>
   20584:	e03ffe15 	stw	zero,-8(fp)

	  printf("%d\n", dc);
   20588:	e17ffe17 	ldw	r5,-8(fp)
   2058c:	01000134 	movhi	r4,4
   20590:	21000b04 	addi	r4,r4,44
   20594:	00205d80 	call	205d8 <printf>
  };
   20598:	003fca06 	br	204c4 <main+0x48>

0002059c <_printf_r>:
   2059c:	defffd04 	addi	sp,sp,-12
   205a0:	dfc00015 	stw	ra,0(sp)
   205a4:	d9800115 	stw	r6,4(sp)
   205a8:	d9c00215 	stw	r7,8(sp)
   205ac:	20c00217 	ldw	r3,8(r4)
   205b0:	018000b4 	movhi	r6,2
   205b4:	31832204 	addi	r6,r6,3208
   205b8:	19800115 	stw	r6,4(r3)
   205bc:	280d883a 	mov	r6,r5
   205c0:	21400217 	ldw	r5,8(r4)
   205c4:	d9c00104 	addi	r7,sp,4
   205c8:	00207400 	call	20740 <___vfprintf_internal_r>
   205cc:	dfc00017 	ldw	ra,0(sp)
   205d0:	dec00304 	addi	sp,sp,12
   205d4:	f800283a 	ret

000205d8 <printf>:
   205d8:	defffc04 	addi	sp,sp,-16
   205dc:	dfc00015 	stw	ra,0(sp)
   205e0:	d9400115 	stw	r5,4(sp)
   205e4:	d9800215 	stw	r6,8(sp)
   205e8:	d9c00315 	stw	r7,12(sp)
   205ec:	00800134 	movhi	r2,4
   205f0:	1080c804 	addi	r2,r2,800
   205f4:	10800017 	ldw	r2,0(r2)
   205f8:	014000b4 	movhi	r5,2
   205fc:	29432204 	addi	r5,r5,3208
   20600:	10c00217 	ldw	r3,8(r2)
   20604:	d9800104 	addi	r6,sp,4
   20608:	19400115 	stw	r5,4(r3)
   2060c:	200b883a 	mov	r5,r4
   20610:	11000217 	ldw	r4,8(r2)
   20614:	0020c6c0 	call	20c6c <__vfprintf_internal>
   20618:	dfc00017 	ldw	ra,0(sp)
   2061c:	dec00404 	addi	sp,sp,16
   20620:	f800283a 	ret

00020624 <_puts_r>:
   20624:	defffd04 	addi	sp,sp,-12
   20628:	dc000015 	stw	r16,0(sp)
   2062c:	2021883a 	mov	r16,r4
   20630:	2809883a 	mov	r4,r5
   20634:	dfc00215 	stw	ra,8(sp)
   20638:	dc400115 	stw	r17,4(sp)
   2063c:	2823883a 	mov	r17,r5
   20640:	00206b80 	call	206b8 <strlen>
   20644:	81400217 	ldw	r5,8(r16)
   20648:	010000b4 	movhi	r4,2
   2064c:	21032204 	addi	r4,r4,3208
   20650:	29000115 	stw	r4,4(r5)
   20654:	100f883a 	mov	r7,r2
   20658:	880d883a 	mov	r6,r17
   2065c:	8009883a 	mov	r4,r16
   20660:	0020c880 	call	20c88 <__sfvwrite_small_dev>
   20664:	00ffffc4 	movi	r3,-1
   20668:	10c00926 	beq	r2,r3,20690 <_puts_r+0x6c>
   2066c:	81400217 	ldw	r5,8(r16)
   20670:	01800134 	movhi	r6,4
   20674:	01c00044 	movi	r7,1
   20678:	28800117 	ldw	r2,4(r5)
   2067c:	31800c04 	addi	r6,r6,48
   20680:	8009883a 	mov	r4,r16
   20684:	103ee83a 	callr	r2
   20688:	10bfffe0 	cmpeqi	r2,r2,-1
   2068c:	0085c83a 	sub	r2,zero,r2
   20690:	dfc00217 	ldw	ra,8(sp)
   20694:	dc400117 	ldw	r17,4(sp)
   20698:	dc000017 	ldw	r16,0(sp)
   2069c:	dec00304 	addi	sp,sp,12
   206a0:	f800283a 	ret

000206a4 <puts>:
   206a4:	00800134 	movhi	r2,4
   206a8:	1080c804 	addi	r2,r2,800
   206ac:	200b883a 	mov	r5,r4
   206b0:	11000017 	ldw	r4,0(r2)
   206b4:	00206241 	jmpi	20624 <_puts_r>

000206b8 <strlen>:
   206b8:	2005883a 	mov	r2,r4
   206bc:	10c00007 	ldb	r3,0(r2)
   206c0:	18000226 	beq	r3,zero,206cc <strlen+0x14>
   206c4:	10800044 	addi	r2,r2,1
   206c8:	003ffc06 	br	206bc <strlen+0x4>
   206cc:	1105c83a 	sub	r2,r2,r4
   206d0:	f800283a 	ret

000206d4 <print_repeat>:
   206d4:	defffb04 	addi	sp,sp,-20
   206d8:	dc800315 	stw	r18,12(sp)
   206dc:	dc400215 	stw	r17,8(sp)
   206e0:	dc000115 	stw	r16,4(sp)
   206e4:	dfc00415 	stw	ra,16(sp)
   206e8:	2025883a 	mov	r18,r4
   206ec:	2823883a 	mov	r17,r5
   206f0:	d9800005 	stb	r6,0(sp)
   206f4:	3821883a 	mov	r16,r7
   206f8:	04000a0e 	bge	zero,r16,20724 <print_repeat+0x50>
   206fc:	88800117 	ldw	r2,4(r17)
   20700:	01c00044 	movi	r7,1
   20704:	d80d883a 	mov	r6,sp
   20708:	880b883a 	mov	r5,r17
   2070c:	9009883a 	mov	r4,r18
   20710:	103ee83a 	callr	r2
   20714:	843fffc4 	addi	r16,r16,-1
   20718:	103ff726 	beq	r2,zero,206f8 <print_repeat+0x24>
   2071c:	00bfffc4 	movi	r2,-1
   20720:	00000106 	br	20728 <print_repeat+0x54>
   20724:	0005883a 	mov	r2,zero
   20728:	dfc00417 	ldw	ra,16(sp)
   2072c:	dc800317 	ldw	r18,12(sp)
   20730:	dc400217 	ldw	r17,8(sp)
   20734:	dc000117 	ldw	r16,4(sp)
   20738:	dec00504 	addi	sp,sp,20
   2073c:	f800283a 	ret

00020740 <___vfprintf_internal_r>:
   20740:	deffe504 	addi	sp,sp,-108
   20744:	d8c00804 	addi	r3,sp,32
   20748:	ddc01815 	stw	r23,96(sp)
   2074c:	dd801715 	stw	r22,92(sp)
   20750:	dd401615 	stw	r21,88(sp)
   20754:	dd001515 	stw	r20,84(sp)
   20758:	dcc01415 	stw	r19,80(sp)
   2075c:	dc801315 	stw	r18,76(sp)
   20760:	dc401215 	stw	r17,72(sp)
   20764:	dc001115 	stw	r16,68(sp)
   20768:	dfc01a15 	stw	ra,104(sp)
   2076c:	df001915 	stw	fp,100(sp)
   20770:	2029883a 	mov	r20,r4
   20774:	2823883a 	mov	r17,r5
   20778:	382d883a 	mov	r22,r7
   2077c:	d9800f15 	stw	r6,60(sp)
   20780:	0021883a 	mov	r16,zero
   20784:	d8000e15 	stw	zero,56(sp)
   20788:	d8000a15 	stw	zero,40(sp)
   2078c:	002b883a 	mov	r21,zero
   20790:	0027883a 	mov	r19,zero
   20794:	0025883a 	mov	r18,zero
   20798:	d8000c15 	stw	zero,48(sp)
   2079c:	d8000b15 	stw	zero,44(sp)
   207a0:	002f883a 	mov	r23,zero
   207a4:	d8c00915 	stw	r3,36(sp)
   207a8:	d8c00f17 	ldw	r3,60(sp)
   207ac:	19000003 	ldbu	r4,0(r3)
   207b0:	20803fcc 	andi	r2,r4,255
   207b4:	1080201c 	xori	r2,r2,128
   207b8:	10bfe004 	addi	r2,r2,-128
   207bc:	10011e26 	beq	r2,zero,20c38 <___vfprintf_internal_r+0x4f8>
   207c0:	00c00044 	movi	r3,1
   207c4:	b8c01426 	beq	r23,r3,20818 <___vfprintf_internal_r+0xd8>
   207c8:	1dc00216 	blt	r3,r23,207d4 <___vfprintf_internal_r+0x94>
   207cc:	b8000626 	beq	r23,zero,207e8 <___vfprintf_internal_r+0xa8>
   207d0:	00011506 	br	20c28 <___vfprintf_internal_r+0x4e8>
   207d4:	01400084 	movi	r5,2
   207d8:	b9401d26 	beq	r23,r5,20850 <___vfprintf_internal_r+0x110>
   207dc:	014000c4 	movi	r5,3
   207e0:	b9402b26 	beq	r23,r5,20890 <___vfprintf_internal_r+0x150>
   207e4:	00011006 	br	20c28 <___vfprintf_internal_r+0x4e8>
   207e8:	01400944 	movi	r5,37
   207ec:	1140fc26 	beq	r2,r5,20be0 <___vfprintf_internal_r+0x4a0>
   207f0:	88800117 	ldw	r2,4(r17)
   207f4:	d9000005 	stb	r4,0(sp)
   207f8:	01c00044 	movi	r7,1
   207fc:	d80d883a 	mov	r6,sp
   20800:	880b883a 	mov	r5,r17
   20804:	a009883a 	mov	r4,r20
   20808:	103ee83a 	callr	r2
   2080c:	1000d81e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20810:	84000044 	addi	r16,r16,1
   20814:	00010406 	br	20c28 <___vfprintf_internal_r+0x4e8>
   20818:	01400c04 	movi	r5,48
   2081c:	1140fa26 	beq	r2,r5,20c08 <___vfprintf_internal_r+0x4c8>
   20820:	01400944 	movi	r5,37
   20824:	11400a1e 	bne	r2,r5,20850 <___vfprintf_internal_r+0x110>
   20828:	d8800005 	stb	r2,0(sp)
   2082c:	88800117 	ldw	r2,4(r17)
   20830:	b80f883a 	mov	r7,r23
   20834:	d80d883a 	mov	r6,sp
   20838:	880b883a 	mov	r5,r17
   2083c:	a009883a 	mov	r4,r20
   20840:	103ee83a 	callr	r2
   20844:	1000ca1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20848:	84000044 	addi	r16,r16,1
   2084c:	0000f506 	br	20c24 <___vfprintf_internal_r+0x4e4>
   20850:	25fff404 	addi	r23,r4,-48
   20854:	bdc03fcc 	andi	r23,r23,255
   20858:	00c00244 	movi	r3,9
   2085c:	1dc00936 	bltu	r3,r23,20884 <___vfprintf_internal_r+0x144>
   20860:	00bfffc4 	movi	r2,-1
   20864:	90800426 	beq	r18,r2,20878 <___vfprintf_internal_r+0x138>
   20868:	01400284 	movi	r5,10
   2086c:	9009883a 	mov	r4,r18
   20870:	0020f4c0 	call	20f4c <__mulsi3>
   20874:	00000106 	br	2087c <___vfprintf_internal_r+0x13c>
   20878:	0005883a 	mov	r2,zero
   2087c:	b8a5883a 	add	r18,r23,r2
   20880:	0000e206 	br	20c0c <___vfprintf_internal_r+0x4cc>
   20884:	01400b84 	movi	r5,46
   20888:	1140e426 	beq	r2,r5,20c1c <___vfprintf_internal_r+0x4dc>
   2088c:	05c00084 	movi	r23,2
   20890:	213ff404 	addi	r4,r4,-48
   20894:	27003fcc 	andi	fp,r4,255
   20898:	00c00244 	movi	r3,9
   2089c:	1f000936 	bltu	r3,fp,208c4 <___vfprintf_internal_r+0x184>
   208a0:	00bfffc4 	movi	r2,-1
   208a4:	98800426 	beq	r19,r2,208b8 <___vfprintf_internal_r+0x178>
   208a8:	01400284 	movi	r5,10
   208ac:	9809883a 	mov	r4,r19
   208b0:	0020f4c0 	call	20f4c <__mulsi3>
   208b4:	00000106 	br	208bc <___vfprintf_internal_r+0x17c>
   208b8:	0005883a 	mov	r2,zero
   208bc:	e0a7883a 	add	r19,fp,r2
   208c0:	0000d906 	br	20c28 <___vfprintf_internal_r+0x4e8>
   208c4:	00c01b04 	movi	r3,108
   208c8:	10c0d226 	beq	r2,r3,20c14 <___vfprintf_internal_r+0x4d4>
   208cc:	013fffc4 	movi	r4,-1
   208d0:	99000226 	beq	r19,r4,208dc <___vfprintf_internal_r+0x19c>
   208d4:	d8000b15 	stw	zero,44(sp)
   208d8:	00000106 	br	208e0 <___vfprintf_internal_r+0x1a0>
   208dc:	04c00044 	movi	r19,1
   208e0:	01001a44 	movi	r4,105
   208e4:	11001626 	beq	r2,r4,20940 <___vfprintf_internal_r+0x200>
   208e8:	20800916 	blt	r4,r2,20910 <___vfprintf_internal_r+0x1d0>
   208ec:	010018c4 	movi	r4,99
   208f0:	11008826 	beq	r2,r4,20b14 <___vfprintf_internal_r+0x3d4>
   208f4:	01001904 	movi	r4,100
   208f8:	11001126 	beq	r2,r4,20940 <___vfprintf_internal_r+0x200>
   208fc:	01001604 	movi	r4,88
   20900:	1100c81e 	bne	r2,r4,20c24 <___vfprintf_internal_r+0x4e4>
   20904:	00c00044 	movi	r3,1
   20908:	d8c00e15 	stw	r3,56(sp)
   2090c:	00001506 	br	20964 <___vfprintf_internal_r+0x224>
   20910:	01001cc4 	movi	r4,115
   20914:	11009826 	beq	r2,r4,20b78 <___vfprintf_internal_r+0x438>
   20918:	20800416 	blt	r4,r2,2092c <___vfprintf_internal_r+0x1ec>
   2091c:	01001bc4 	movi	r4,111
   20920:	1100c01e 	bne	r2,r4,20c24 <___vfprintf_internal_r+0x4e4>
   20924:	05400204 	movi	r21,8
   20928:	00000f06 	br	20968 <___vfprintf_internal_r+0x228>
   2092c:	01001d44 	movi	r4,117
   20930:	11000d26 	beq	r2,r4,20968 <___vfprintf_internal_r+0x228>
   20934:	01001e04 	movi	r4,120
   20938:	11000a26 	beq	r2,r4,20964 <___vfprintf_internal_r+0x224>
   2093c:	0000b906 	br	20c24 <___vfprintf_internal_r+0x4e4>
   20940:	d8c00a17 	ldw	r3,40(sp)
   20944:	b7000104 	addi	fp,r22,4
   20948:	18000726 	beq	r3,zero,20968 <___vfprintf_internal_r+0x228>
   2094c:	df000d15 	stw	fp,52(sp)
   20950:	b5c00017 	ldw	r23,0(r22)
   20954:	b800080e 	bge	r23,zero,20978 <___vfprintf_internal_r+0x238>
   20958:	05efc83a 	sub	r23,zero,r23
   2095c:	02400044 	movi	r9,1
   20960:	00000606 	br	2097c <___vfprintf_internal_r+0x23c>
   20964:	05400404 	movi	r21,16
   20968:	b0c00104 	addi	r3,r22,4
   2096c:	d8c00d15 	stw	r3,52(sp)
   20970:	b5c00017 	ldw	r23,0(r22)
   20974:	d8000a15 	stw	zero,40(sp)
   20978:	0013883a 	mov	r9,zero
   2097c:	d839883a 	mov	fp,sp
   20980:	b8001726 	beq	r23,zero,209e0 <___vfprintf_internal_r+0x2a0>
   20984:	a80b883a 	mov	r5,r21
   20988:	b809883a 	mov	r4,r23
   2098c:	da401015 	stw	r9,64(sp)
   20990:	0020e900 	call	20e90 <__udivsi3>
   20994:	a80b883a 	mov	r5,r21
   20998:	1009883a 	mov	r4,r2
   2099c:	102d883a 	mov	r22,r2
   209a0:	0020f4c0 	call	20f4c <__mulsi3>
   209a4:	b885c83a 	sub	r2,r23,r2
   209a8:	00c00244 	movi	r3,9
   209ac:	da401017 	ldw	r9,64(sp)
   209b0:	18800216 	blt	r3,r2,209bc <___vfprintf_internal_r+0x27c>
   209b4:	10800c04 	addi	r2,r2,48
   209b8:	00000506 	br	209d0 <___vfprintf_internal_r+0x290>
   209bc:	d8c00e17 	ldw	r3,56(sp)
   209c0:	18000226 	beq	r3,zero,209cc <___vfprintf_internal_r+0x28c>
   209c4:	10800dc4 	addi	r2,r2,55
   209c8:	00000106 	br	209d0 <___vfprintf_internal_r+0x290>
   209cc:	108015c4 	addi	r2,r2,87
   209d0:	e0800005 	stb	r2,0(fp)
   209d4:	b02f883a 	mov	r23,r22
   209d8:	e7000044 	addi	fp,fp,1
   209dc:	003fe806 	br	20980 <___vfprintf_internal_r+0x240>
   209e0:	e6efc83a 	sub	r23,fp,sp
   209e4:	9dc5c83a 	sub	r2,r19,r23
   209e8:	0080090e 	bge	zero,r2,20a10 <___vfprintf_internal_r+0x2d0>
   209ec:	e085883a 	add	r2,fp,r2
   209f0:	01400c04 	movi	r5,48
   209f4:	d8c00917 	ldw	r3,36(sp)
   209f8:	e009883a 	mov	r4,fp
   209fc:	e0c0032e 	bgeu	fp,r3,20a0c <___vfprintf_internal_r+0x2cc>
   20a00:	e7000044 	addi	fp,fp,1
   20a04:	21400005 	stb	r5,0(r4)
   20a08:	e0bffa1e 	bne	fp,r2,209f4 <___vfprintf_internal_r+0x2b4>
   20a0c:	e6efc83a 	sub	r23,fp,sp
   20a10:	d8c00b17 	ldw	r3,44(sp)
   20a14:	4dd1883a 	add	r8,r9,r23
   20a18:	922dc83a 	sub	r22,r18,r8
   20a1c:	18001626 	beq	r3,zero,20a78 <___vfprintf_internal_r+0x338>
   20a20:	48000a26 	beq	r9,zero,20a4c <___vfprintf_internal_r+0x30c>
   20a24:	00800b44 	movi	r2,45
   20a28:	d8800805 	stb	r2,32(sp)
   20a2c:	88800117 	ldw	r2,4(r17)
   20a30:	01c00044 	movi	r7,1
   20a34:	d9800804 	addi	r6,sp,32
   20a38:	880b883a 	mov	r5,r17
   20a3c:	a009883a 	mov	r4,r20
   20a40:	103ee83a 	callr	r2
   20a44:	10004a1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20a48:	84000044 	addi	r16,r16,1
   20a4c:	0580070e 	bge	zero,r22,20a6c <___vfprintf_internal_r+0x32c>
   20a50:	b00f883a 	mov	r7,r22
   20a54:	01800c04 	movi	r6,48
   20a58:	880b883a 	mov	r5,r17
   20a5c:	a009883a 	mov	r4,r20
   20a60:	00206d40 	call	206d4 <print_repeat>
   20a64:	1000421e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20a68:	85a1883a 	add	r16,r16,r22
   20a6c:	e02d883a 	mov	r22,fp
   20a70:	bf2fc83a 	sub	r23,r23,fp
   20a74:	00002006 	br	20af8 <___vfprintf_internal_r+0x3b8>
   20a78:	0580090e 	bge	zero,r22,20aa0 <___vfprintf_internal_r+0x360>
   20a7c:	b00f883a 	mov	r7,r22
   20a80:	01800804 	movi	r6,32
   20a84:	880b883a 	mov	r5,r17
   20a88:	a009883a 	mov	r4,r20
   20a8c:	da401015 	stw	r9,64(sp)
   20a90:	00206d40 	call	206d4 <print_repeat>
   20a94:	da401017 	ldw	r9,64(sp)
   20a98:	1000351e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20a9c:	85a1883a 	add	r16,r16,r22
   20aa0:	483ff226 	beq	r9,zero,20a6c <___vfprintf_internal_r+0x32c>
   20aa4:	00800b44 	movi	r2,45
   20aa8:	d8800805 	stb	r2,32(sp)
   20aac:	88800117 	ldw	r2,4(r17)
   20ab0:	01c00044 	movi	r7,1
   20ab4:	d9800804 	addi	r6,sp,32
   20ab8:	880b883a 	mov	r5,r17
   20abc:	a009883a 	mov	r4,r20
   20ac0:	103ee83a 	callr	r2
   20ac4:	10002a1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20ac8:	84000044 	addi	r16,r16,1
   20acc:	003fe706 	br	20a6c <___vfprintf_internal_r+0x32c>
   20ad0:	b5bfffc4 	addi	r22,r22,-1
   20ad4:	b0800003 	ldbu	r2,0(r22)
   20ad8:	01c00044 	movi	r7,1
   20adc:	d9800804 	addi	r6,sp,32
   20ae0:	d8800805 	stb	r2,32(sp)
   20ae4:	88800117 	ldw	r2,4(r17)
   20ae8:	880b883a 	mov	r5,r17
   20aec:	a009883a 	mov	r4,r20
   20af0:	103ee83a 	callr	r2
   20af4:	10001e1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20af8:	8585c83a 	sub	r2,r16,r22
   20afc:	b5c9883a 	add	r4,r22,r23
   20b00:	e085883a 	add	r2,fp,r2
   20b04:	013ff216 	blt	zero,r4,20ad0 <___vfprintf_internal_r+0x390>
   20b08:	1021883a 	mov	r16,r2
   20b0c:	dd800d17 	ldw	r22,52(sp)
   20b10:	00004406 	br	20c24 <___vfprintf_internal_r+0x4e4>
   20b14:	00800044 	movi	r2,1
   20b18:	1480080e 	bge	r2,r18,20b3c <___vfprintf_internal_r+0x3fc>
   20b1c:	95ffffc4 	addi	r23,r18,-1
   20b20:	b80f883a 	mov	r7,r23
   20b24:	01800804 	movi	r6,32
   20b28:	880b883a 	mov	r5,r17
   20b2c:	a009883a 	mov	r4,r20
   20b30:	00206d40 	call	206d4 <print_repeat>
   20b34:	10000e1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20b38:	85e1883a 	add	r16,r16,r23
   20b3c:	b0800017 	ldw	r2,0(r22)
   20b40:	01c00044 	movi	r7,1
   20b44:	d80d883a 	mov	r6,sp
   20b48:	d8800005 	stb	r2,0(sp)
   20b4c:	88800117 	ldw	r2,4(r17)
   20b50:	880b883a 	mov	r5,r17
   20b54:	a009883a 	mov	r4,r20
   20b58:	b5c00104 	addi	r23,r22,4
   20b5c:	103ee83a 	callr	r2
   20b60:	1000031e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20b64:	84000044 	addi	r16,r16,1
   20b68:	b82d883a 	mov	r22,r23
   20b6c:	00002d06 	br	20c24 <___vfprintf_internal_r+0x4e4>
   20b70:	00bfffc4 	movi	r2,-1
   20b74:	00003106 	br	20c3c <___vfprintf_internal_r+0x4fc>
   20b78:	b5c00017 	ldw	r23,0(r22)
   20b7c:	b7000104 	addi	fp,r22,4
   20b80:	b809883a 	mov	r4,r23
   20b84:	00206b80 	call	206b8 <strlen>
   20b88:	9091c83a 	sub	r8,r18,r2
   20b8c:	102d883a 	mov	r22,r2
   20b90:	0200090e 	bge	zero,r8,20bb8 <___vfprintf_internal_r+0x478>
   20b94:	400f883a 	mov	r7,r8
   20b98:	01800804 	movi	r6,32
   20b9c:	880b883a 	mov	r5,r17
   20ba0:	a009883a 	mov	r4,r20
   20ba4:	da001015 	stw	r8,64(sp)
   20ba8:	00206d40 	call	206d4 <print_repeat>
   20bac:	da001017 	ldw	r8,64(sp)
   20bb0:	103fef1e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20bb4:	8221883a 	add	r16,r16,r8
   20bb8:	88800117 	ldw	r2,4(r17)
   20bbc:	b00f883a 	mov	r7,r22
   20bc0:	b80d883a 	mov	r6,r23
   20bc4:	880b883a 	mov	r5,r17
   20bc8:	a009883a 	mov	r4,r20
   20bcc:	103ee83a 	callr	r2
   20bd0:	103fe71e 	bne	r2,zero,20b70 <___vfprintf_internal_r+0x430>
   20bd4:	85a1883a 	add	r16,r16,r22
   20bd8:	e02d883a 	mov	r22,fp
   20bdc:	00001106 	br	20c24 <___vfprintf_internal_r+0x4e4>
   20be0:	00c00044 	movi	r3,1
   20be4:	04ffffc4 	movi	r19,-1
   20be8:	d8000e15 	stw	zero,56(sp)
   20bec:	d8c00a15 	stw	r3,40(sp)
   20bf0:	05400284 	movi	r21,10
   20bf4:	9825883a 	mov	r18,r19
   20bf8:	d8000c15 	stw	zero,48(sp)
   20bfc:	d8000b15 	stw	zero,44(sp)
   20c00:	182f883a 	mov	r23,r3
   20c04:	00000806 	br	20c28 <___vfprintf_internal_r+0x4e8>
   20c08:	ddc00b15 	stw	r23,44(sp)
   20c0c:	05c00084 	movi	r23,2
   20c10:	00000506 	br	20c28 <___vfprintf_internal_r+0x4e8>
   20c14:	00c00044 	movi	r3,1
   20c18:	d8c00c15 	stw	r3,48(sp)
   20c1c:	05c000c4 	movi	r23,3
   20c20:	00000106 	br	20c28 <___vfprintf_internal_r+0x4e8>
   20c24:	002f883a 	mov	r23,zero
   20c28:	d8c00f17 	ldw	r3,60(sp)
   20c2c:	18c00044 	addi	r3,r3,1
   20c30:	d8c00f15 	stw	r3,60(sp)
   20c34:	003edc06 	br	207a8 <___vfprintf_internal_r+0x68>
   20c38:	8005883a 	mov	r2,r16
   20c3c:	dfc01a17 	ldw	ra,104(sp)
   20c40:	df001917 	ldw	fp,100(sp)
   20c44:	ddc01817 	ldw	r23,96(sp)
   20c48:	dd801717 	ldw	r22,92(sp)
   20c4c:	dd401617 	ldw	r21,88(sp)
   20c50:	dd001517 	ldw	r20,84(sp)
   20c54:	dcc01417 	ldw	r19,80(sp)
   20c58:	dc801317 	ldw	r18,76(sp)
   20c5c:	dc401217 	ldw	r17,72(sp)
   20c60:	dc001117 	ldw	r16,68(sp)
   20c64:	dec01b04 	addi	sp,sp,108
   20c68:	f800283a 	ret

00020c6c <__vfprintf_internal>:
   20c6c:	00800134 	movhi	r2,4
   20c70:	1080c804 	addi	r2,r2,800
   20c74:	300f883a 	mov	r7,r6
   20c78:	280d883a 	mov	r6,r5
   20c7c:	200b883a 	mov	r5,r4
   20c80:	11000017 	ldw	r4,0(r2)
   20c84:	00207401 	jmpi	20740 <___vfprintf_internal_r>

00020c88 <__sfvwrite_small_dev>:
   20c88:	2880000b 	ldhu	r2,0(r5)
   20c8c:	1080020c 	andi	r2,r2,8
   20c90:	10002126 	beq	r2,zero,20d18 <__sfvwrite_small_dev+0x90>
   20c94:	2880008f 	ldh	r2,2(r5)
   20c98:	defffa04 	addi	sp,sp,-24
   20c9c:	dc000015 	stw	r16,0(sp)
   20ca0:	dfc00515 	stw	ra,20(sp)
   20ca4:	dd000415 	stw	r20,16(sp)
   20ca8:	dcc00315 	stw	r19,12(sp)
   20cac:	dc800215 	stw	r18,8(sp)
   20cb0:	dc400115 	stw	r17,4(sp)
   20cb4:	2821883a 	mov	r16,r5
   20cb8:	10001216 	blt	r2,zero,20d04 <__sfvwrite_small_dev+0x7c>
   20cbc:	2027883a 	mov	r19,r4
   20cc0:	3025883a 	mov	r18,r6
   20cc4:	3823883a 	mov	r17,r7
   20cc8:	05010004 	movi	r20,1024
   20ccc:	04400b0e 	bge	zero,r17,20cfc <__sfvwrite_small_dev+0x74>
   20cd0:	880f883a 	mov	r7,r17
   20cd4:	a440010e 	bge	r20,r17,20cdc <__sfvwrite_small_dev+0x54>
   20cd8:	01c10004 	movi	r7,1024
   20cdc:	8140008f 	ldh	r5,2(r16)
   20ce0:	900d883a 	mov	r6,r18
   20ce4:	9809883a 	mov	r4,r19
   20ce8:	0020d400 	call	20d40 <_write_r>
   20cec:	0080050e 	bge	zero,r2,20d04 <__sfvwrite_small_dev+0x7c>
   20cf0:	88a3c83a 	sub	r17,r17,r2
   20cf4:	90a5883a 	add	r18,r18,r2
   20cf8:	003ff406 	br	20ccc <__sfvwrite_small_dev+0x44>
   20cfc:	0005883a 	mov	r2,zero
   20d00:	00000706 	br	20d20 <__sfvwrite_small_dev+0x98>
   20d04:	8080000b 	ldhu	r2,0(r16)
   20d08:	10801014 	ori	r2,r2,64
   20d0c:	8080000d 	sth	r2,0(r16)
   20d10:	00bfffc4 	movi	r2,-1
   20d14:	00000206 	br	20d20 <__sfvwrite_small_dev+0x98>
   20d18:	00bfffc4 	movi	r2,-1
   20d1c:	f800283a 	ret
   20d20:	dfc00517 	ldw	ra,20(sp)
   20d24:	dd000417 	ldw	r20,16(sp)
   20d28:	dcc00317 	ldw	r19,12(sp)
   20d2c:	dc800217 	ldw	r18,8(sp)
   20d30:	dc400117 	ldw	r17,4(sp)
   20d34:	dc000017 	ldw	r16,0(sp)
   20d38:	dec00604 	addi	sp,sp,24
   20d3c:	f800283a 	ret

00020d40 <_write_r>:
   20d40:	defffd04 	addi	sp,sp,-12
   20d44:	dc000015 	stw	r16,0(sp)
   20d48:	04000134 	movhi	r16,4
   20d4c:	dc400115 	stw	r17,4(sp)
   20d50:	8400d404 	addi	r16,r16,848
   20d54:	2023883a 	mov	r17,r4
   20d58:	2809883a 	mov	r4,r5
   20d5c:	300b883a 	mov	r5,r6
   20d60:	380d883a 	mov	r6,r7
   20d64:	dfc00215 	stw	ra,8(sp)
   20d68:	80000015 	stw	zero,0(r16)
   20d6c:	002130c0 	call	2130c <write>
   20d70:	00ffffc4 	movi	r3,-1
   20d74:	10c0031e 	bne	r2,r3,20d84 <_write_r+0x44>
   20d78:	80c00017 	ldw	r3,0(r16)
   20d7c:	18000126 	beq	r3,zero,20d84 <_write_r+0x44>
   20d80:	88c00015 	stw	r3,0(r17)
   20d84:	dfc00217 	ldw	ra,8(sp)
   20d88:	dc400117 	ldw	r17,4(sp)
   20d8c:	dc000017 	ldw	r16,0(sp)
   20d90:	dec00304 	addi	sp,sp,12
   20d94:	f800283a 	ret

00020d98 <__divsi3>:
   20d98:	20001b16 	blt	r4,zero,20e08 <__divsi3+0x70>
   20d9c:	000f883a 	mov	r7,zero
   20da0:	28001616 	blt	r5,zero,20dfc <__divsi3+0x64>
   20da4:	200d883a 	mov	r6,r4
   20da8:	29001a2e 	bgeu	r5,r4,20e14 <__divsi3+0x7c>
   20dac:	00800804 	movi	r2,32
   20db0:	00c00044 	movi	r3,1
   20db4:	00000106 	br	20dbc <__divsi3+0x24>
   20db8:	10000d26 	beq	r2,zero,20df0 <__divsi3+0x58>
   20dbc:	294b883a 	add	r5,r5,r5
   20dc0:	10bfffc4 	addi	r2,r2,-1
   20dc4:	18c7883a 	add	r3,r3,r3
   20dc8:	293ffb36 	bltu	r5,r4,20db8 <__divsi3+0x20>
   20dcc:	0005883a 	mov	r2,zero
   20dd0:	18000726 	beq	r3,zero,20df0 <__divsi3+0x58>
   20dd4:	0005883a 	mov	r2,zero
   20dd8:	31400236 	bltu	r6,r5,20de4 <__divsi3+0x4c>
   20ddc:	314dc83a 	sub	r6,r6,r5
   20de0:	10c4b03a 	or	r2,r2,r3
   20de4:	1806d07a 	srli	r3,r3,1
   20de8:	280ad07a 	srli	r5,r5,1
   20dec:	183ffa1e 	bne	r3,zero,20dd8 <__divsi3+0x40>
   20df0:	38000126 	beq	r7,zero,20df8 <__divsi3+0x60>
   20df4:	0085c83a 	sub	r2,zero,r2
   20df8:	f800283a 	ret
   20dfc:	014bc83a 	sub	r5,zero,r5
   20e00:	39c0005c 	xori	r7,r7,1
   20e04:	003fe706 	br	20da4 <__divsi3+0xc>
   20e08:	0109c83a 	sub	r4,zero,r4
   20e0c:	01c00044 	movi	r7,1
   20e10:	003fe306 	br	20da0 <__divsi3+0x8>
   20e14:	00c00044 	movi	r3,1
   20e18:	003fee06 	br	20dd4 <__divsi3+0x3c>

00020e1c <__modsi3>:
   20e1c:	20001716 	blt	r4,zero,20e7c <__modsi3+0x60>
   20e20:	000f883a 	mov	r7,zero
   20e24:	2005883a 	mov	r2,r4
   20e28:	28001216 	blt	r5,zero,20e74 <__modsi3+0x58>
   20e2c:	2900162e 	bgeu	r5,r4,20e88 <__modsi3+0x6c>
   20e30:	01800804 	movi	r6,32
   20e34:	00c00044 	movi	r3,1
   20e38:	00000106 	br	20e40 <__modsi3+0x24>
   20e3c:	30000a26 	beq	r6,zero,20e68 <__modsi3+0x4c>
   20e40:	294b883a 	add	r5,r5,r5
   20e44:	31bfffc4 	addi	r6,r6,-1
   20e48:	18c7883a 	add	r3,r3,r3
   20e4c:	293ffb36 	bltu	r5,r4,20e3c <__modsi3+0x20>
   20e50:	18000526 	beq	r3,zero,20e68 <__modsi3+0x4c>
   20e54:	1806d07a 	srli	r3,r3,1
   20e58:	11400136 	bltu	r2,r5,20e60 <__modsi3+0x44>
   20e5c:	1145c83a 	sub	r2,r2,r5
   20e60:	280ad07a 	srli	r5,r5,1
   20e64:	183ffb1e 	bne	r3,zero,20e54 <__modsi3+0x38>
   20e68:	38000126 	beq	r7,zero,20e70 <__modsi3+0x54>
   20e6c:	0085c83a 	sub	r2,zero,r2
   20e70:	f800283a 	ret
   20e74:	014bc83a 	sub	r5,zero,r5
   20e78:	003fec06 	br	20e2c <__modsi3+0x10>
   20e7c:	0109c83a 	sub	r4,zero,r4
   20e80:	01c00044 	movi	r7,1
   20e84:	003fe706 	br	20e24 <__modsi3+0x8>
   20e88:	00c00044 	movi	r3,1
   20e8c:	003ff106 	br	20e54 <__modsi3+0x38>

00020e90 <__udivsi3>:
   20e90:	200d883a 	mov	r6,r4
   20e94:	2900152e 	bgeu	r5,r4,20eec <__udivsi3+0x5c>
   20e98:	28001416 	blt	r5,zero,20eec <__udivsi3+0x5c>
   20e9c:	00800804 	movi	r2,32
   20ea0:	00c00044 	movi	r3,1
   20ea4:	00000206 	br	20eb0 <__udivsi3+0x20>
   20ea8:	10000e26 	beq	r2,zero,20ee4 <__udivsi3+0x54>
   20eac:	28000516 	blt	r5,zero,20ec4 <__udivsi3+0x34>
   20eb0:	294b883a 	add	r5,r5,r5
   20eb4:	10bfffc4 	addi	r2,r2,-1
   20eb8:	18c7883a 	add	r3,r3,r3
   20ebc:	293ffa36 	bltu	r5,r4,20ea8 <__udivsi3+0x18>
   20ec0:	18000826 	beq	r3,zero,20ee4 <__udivsi3+0x54>
   20ec4:	0005883a 	mov	r2,zero
   20ec8:	31400236 	bltu	r6,r5,20ed4 <__udivsi3+0x44>
   20ecc:	314dc83a 	sub	r6,r6,r5
   20ed0:	10c4b03a 	or	r2,r2,r3
   20ed4:	1806d07a 	srli	r3,r3,1
   20ed8:	280ad07a 	srli	r5,r5,1
   20edc:	183ffa1e 	bne	r3,zero,20ec8 <__udivsi3+0x38>
   20ee0:	f800283a 	ret
   20ee4:	0005883a 	mov	r2,zero
   20ee8:	f800283a 	ret
   20eec:	00c00044 	movi	r3,1
   20ef0:	003ff406 	br	20ec4 <__udivsi3+0x34>

00020ef4 <__umodsi3>:
   20ef4:	2005883a 	mov	r2,r4
   20ef8:	2900122e 	bgeu	r5,r4,20f44 <__umodsi3+0x50>
   20efc:	28001116 	blt	r5,zero,20f44 <__umodsi3+0x50>
   20f00:	01800804 	movi	r6,32
   20f04:	00c00044 	movi	r3,1
   20f08:	00000206 	br	20f14 <__umodsi3+0x20>
   20f0c:	30000c26 	beq	r6,zero,20f40 <__umodsi3+0x4c>
   20f10:	28000516 	blt	r5,zero,20f28 <__umodsi3+0x34>
   20f14:	294b883a 	add	r5,r5,r5
   20f18:	31bfffc4 	addi	r6,r6,-1
   20f1c:	18c7883a 	add	r3,r3,r3
   20f20:	293ffa36 	bltu	r5,r4,20f0c <__umodsi3+0x18>
   20f24:	18000626 	beq	r3,zero,20f40 <__umodsi3+0x4c>
   20f28:	1806d07a 	srli	r3,r3,1
   20f2c:	11400136 	bltu	r2,r5,20f34 <__umodsi3+0x40>
   20f30:	1145c83a 	sub	r2,r2,r5
   20f34:	280ad07a 	srli	r5,r5,1
   20f38:	183ffb1e 	bne	r3,zero,20f28 <__umodsi3+0x34>
   20f3c:	f800283a 	ret
   20f40:	f800283a 	ret
   20f44:	00c00044 	movi	r3,1
   20f48:	003ff706 	br	20f28 <__umodsi3+0x34>

00020f4c <__mulsi3>:
   20f4c:	0005883a 	mov	r2,zero
   20f50:	20000726 	beq	r4,zero,20f70 <__mulsi3+0x24>
   20f54:	20c0004c 	andi	r3,r4,1
   20f58:	2008d07a 	srli	r4,r4,1
   20f5c:	18000126 	beq	r3,zero,20f64 <__mulsi3+0x18>
   20f60:	1145883a 	add	r2,r2,r5
   20f64:	294b883a 	add	r5,r5,r5
   20f68:	203ffa1e 	bne	r4,zero,20f54 <__mulsi3+0x8>
   20f6c:	f800283a 	ret
   20f70:	f800283a 	ret

00020f74 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   20f74:	defff004 	addi	sp,sp,-64
   20f78:	df000f15 	stw	fp,60(sp)
   20f7c:	df000f04 	addi	fp,sp,60
   20f80:	e13ffd15 	stw	r4,-12(fp)
   20f84:	e17ffe15 	stw	r5,-8(fp)
   20f88:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   20f8c:	00bffa84 	movi	r2,-22
   20f90:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   20f94:	e0bffd17 	ldw	r2,-12(fp)
   20f98:	10800828 	cmpgeui	r2,r2,32
   20f9c:	10005c1e 	bne	r2,zero,21110 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20fa0:	0005303a 	rdctl	r2,status
   20fa4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20fa8:	e0fff617 	ldw	r3,-40(fp)
   20fac:	00bfff84 	movi	r2,-2
   20fb0:	1884703a 	and	r2,r3,r2
   20fb4:	1001703a 	wrctl	status,r2
  
  return context;
   20fb8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   20fbc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   20fc0:	00800134 	movhi	r2,4
   20fc4:	1080da04 	addi	r2,r2,872
   20fc8:	e0fffd17 	ldw	r3,-12(fp)
   20fcc:	180690fa 	slli	r3,r3,3
   20fd0:	10c5883a 	add	r2,r2,r3
   20fd4:	e0ffff17 	ldw	r3,-4(fp)
   20fd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   20fdc:	00800134 	movhi	r2,4
   20fe0:	1080da04 	addi	r2,r2,872
   20fe4:	e0fffd17 	ldw	r3,-12(fp)
   20fe8:	180690fa 	slli	r3,r3,3
   20fec:	10c5883a 	add	r2,r2,r3
   20ff0:	10800104 	addi	r2,r2,4
   20ff4:	e0fffe17 	ldw	r3,-8(fp)
   20ff8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   20ffc:	e0bfff17 	ldw	r2,-4(fp)
   21000:	10001f26 	beq	r2,zero,21080 <alt_irq_register+0x10c>
   21004:	e0bffd17 	ldw	r2,-12(fp)
   21008:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2100c:	0005303a 	rdctl	r2,status
   21010:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21014:	e0fff717 	ldw	r3,-36(fp)
   21018:	00bfff84 	movi	r2,-2
   2101c:	1884703a 	and	r2,r3,r2
   21020:	1001703a 	wrctl	status,r2
  
  return context;
   21024:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21028:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   2102c:	00c00044 	movi	r3,1
   21030:	e0bff217 	ldw	r2,-56(fp)
   21034:	1884983a 	sll	r2,r3,r2
   21038:	1007883a 	mov	r3,r2
   2103c:	00800134 	movhi	r2,4
   21040:	1080d504 	addi	r2,r2,852
   21044:	10800017 	ldw	r2,0(r2)
   21048:	1886b03a 	or	r3,r3,r2
   2104c:	00800134 	movhi	r2,4
   21050:	1080d504 	addi	r2,r2,852
   21054:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21058:	00800134 	movhi	r2,4
   2105c:	1080d504 	addi	r2,r2,852
   21060:	10800017 	ldw	r2,0(r2)
   21064:	100170fa 	wrctl	ienable,r2
   21068:	e0bff817 	ldw	r2,-32(fp)
   2106c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21070:	e0bff917 	ldw	r2,-28(fp)
   21074:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21078:	0005883a 	mov	r2,zero
   2107c:	00001f06 	br	210fc <alt_irq_register+0x188>
   21080:	e0bffd17 	ldw	r2,-12(fp)
   21084:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21088:	0005303a 	rdctl	r2,status
   2108c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21090:	e0fffa17 	ldw	r3,-24(fp)
   21094:	00bfff84 	movi	r2,-2
   21098:	1884703a 	and	r2,r3,r2
   2109c:	1001703a 	wrctl	status,r2
  
  return context;
   210a0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   210a4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   210a8:	00c00044 	movi	r3,1
   210ac:	e0bff417 	ldw	r2,-48(fp)
   210b0:	1884983a 	sll	r2,r3,r2
   210b4:	0084303a 	nor	r2,zero,r2
   210b8:	1007883a 	mov	r3,r2
   210bc:	00800134 	movhi	r2,4
   210c0:	1080d504 	addi	r2,r2,852
   210c4:	10800017 	ldw	r2,0(r2)
   210c8:	1886703a 	and	r3,r3,r2
   210cc:	00800134 	movhi	r2,4
   210d0:	1080d504 	addi	r2,r2,852
   210d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   210d8:	00800134 	movhi	r2,4
   210dc:	1080d504 	addi	r2,r2,852
   210e0:	10800017 	ldw	r2,0(r2)
   210e4:	100170fa 	wrctl	ienable,r2
   210e8:	e0bffb17 	ldw	r2,-20(fp)
   210ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   210f0:	e0bffc17 	ldw	r2,-16(fp)
   210f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   210f8:	0005883a 	mov	r2,zero
   210fc:	e0bff115 	stw	r2,-60(fp)
   21100:	e0bff317 	ldw	r2,-52(fp)
   21104:	e0bff515 	stw	r2,-44(fp)
   21108:	e0bff517 	ldw	r2,-44(fp)
   2110c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   21110:	e0bff117 	ldw	r2,-60(fp)
}
   21114:	e037883a 	mov	sp,fp
   21118:	df000017 	ldw	fp,0(sp)
   2111c:	dec00104 	addi	sp,sp,4
   21120:	f800283a 	ret

00021124 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   21124:	defffc04 	addi	sp,sp,-16
   21128:	df000315 	stw	fp,12(sp)
   2112c:	df000304 	addi	fp,sp,12
   21130:	e13ffd15 	stw	r4,-12(fp)
   21134:	e17ffe15 	stw	r5,-8(fp)
   21138:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2113c:	e0fffe17 	ldw	r3,-8(fp)
   21140:	e0bffd17 	ldw	r2,-12(fp)
   21144:	18800c26 	beq	r3,r2,21178 <alt_load_section+0x54>
  {
    while( to != end )
   21148:	00000806 	br	2116c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2114c:	e0bffe17 	ldw	r2,-8(fp)
   21150:	10c00104 	addi	r3,r2,4
   21154:	e0fffe15 	stw	r3,-8(fp)
   21158:	e0fffd17 	ldw	r3,-12(fp)
   2115c:	19000104 	addi	r4,r3,4
   21160:	e13ffd15 	stw	r4,-12(fp)
   21164:	18c00017 	ldw	r3,0(r3)
   21168:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2116c:	e0fffe17 	ldw	r3,-8(fp)
   21170:	e0bfff17 	ldw	r2,-4(fp)
   21174:	18bff51e 	bne	r3,r2,2114c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   21178:	0001883a 	nop
   2117c:	e037883a 	mov	sp,fp
   21180:	df000017 	ldw	fp,0(sp)
   21184:	dec00104 	addi	sp,sp,4
   21188:	f800283a 	ret

0002118c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2118c:	defffe04 	addi	sp,sp,-8
   21190:	dfc00115 	stw	ra,4(sp)
   21194:	df000015 	stw	fp,0(sp)
   21198:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2119c:	01800134 	movhi	r6,4
   211a0:	3180d004 	addi	r6,r6,832
   211a4:	01400134 	movhi	r5,4
   211a8:	29401a04 	addi	r5,r5,104
   211ac:	010000b4 	movhi	r4,2
   211b0:	2109b404 	addi	r4,r4,9936
   211b4:	00211240 	call	21124 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   211b8:	018000b4 	movhi	r6,2
   211bc:	31808c04 	addi	r6,r6,560
   211c0:	014000b4 	movhi	r5,2
   211c4:	29400804 	addi	r5,r5,32
   211c8:	010000b4 	movhi	r4,2
   211cc:	21000804 	addi	r4,r4,32
   211d0:	00211240 	call	21124 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   211d4:	01800134 	movhi	r6,4
   211d8:	31801a04 	addi	r6,r6,104
   211dc:	01400134 	movhi	r5,4
   211e0:	29400004 	addi	r5,r5,0
   211e4:	01000134 	movhi	r4,4
   211e8:	21000004 	addi	r4,r4,0
   211ec:	00211240 	call	21124 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   211f0:	00219700 	call	21970 <alt_dcache_flush_all>
  alt_icache_flush_all();
   211f4:	0021b700 	call	21b70 <alt_icache_flush_all>
}
   211f8:	0001883a 	nop
   211fc:	e037883a 	mov	sp,fp
   21200:	dfc00117 	ldw	ra,4(sp)
   21204:	df000017 	ldw	fp,0(sp)
   21208:	dec00204 	addi	sp,sp,8
   2120c:	f800283a 	ret

00021210 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21210:	defffd04 	addi	sp,sp,-12
   21214:	dfc00215 	stw	ra,8(sp)
   21218:	df000115 	stw	fp,4(sp)
   2121c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21220:	0009883a 	mov	r4,zero
   21224:	00214440 	call	21444 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   21228:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2122c:	002147c0 	call	2147c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   21230:	01800134 	movhi	r6,4
   21234:	31800d04 	addi	r6,r6,52
   21238:	01400134 	movhi	r5,4
   2123c:	29400d04 	addi	r5,r5,52
   21240:	01000134 	movhi	r4,4
   21244:	21000d04 	addi	r4,r4,52
   21248:	0021c740 	call	21c74 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2124c:	0021ab00 	call	21ab0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   21250:	010000b4 	movhi	r4,2
   21254:	2106c404 	addi	r4,r4,6928
   21258:	00223500 	call	22350 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2125c:	d0a00f17 	ldw	r2,-32708(gp)
   21260:	d0e01017 	ldw	r3,-32704(gp)
   21264:	d1201117 	ldw	r4,-32700(gp)
   21268:	200d883a 	mov	r6,r4
   2126c:	180b883a 	mov	r5,r3
   21270:	1009883a 	mov	r4,r2
   21274:	002047c0 	call	2047c <main>
   21278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2127c:	01000044 	movi	r4,1
   21280:	00218980 	call	21898 <close>
  exit (result);
   21284:	e13fff17 	ldw	r4,-4(fp)
   21288:	00223640 	call	22364 <exit>

0002128c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2128c:	defffd04 	addi	sp,sp,-12
   21290:	dfc00215 	stw	ra,8(sp)
   21294:	df000115 	stw	fp,4(sp)
   21298:	df000104 	addi	fp,sp,4
   2129c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   212a0:	e13fff17 	ldw	r4,-4(fp)
   212a4:	00216f00 	call	216f0 <alt_busy_sleep>
}
   212a8:	e037883a 	mov	sp,fp
   212ac:	dfc00117 	ldw	ra,4(sp)
   212b0:	df000017 	ldw	fp,0(sp)
   212b4:	dec00204 	addi	sp,sp,8
   212b8:	f800283a 	ret

000212bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   212bc:	defffe04 	addi	sp,sp,-8
   212c0:	dfc00115 	stw	ra,4(sp)
   212c4:	df000015 	stw	fp,0(sp)
   212c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   212cc:	00800134 	movhi	r2,4
   212d0:	1080cf04 	addi	r2,r2,828
   212d4:	10800017 	ldw	r2,0(r2)
   212d8:	10000526 	beq	r2,zero,212f0 <alt_get_errno+0x34>
   212dc:	00800134 	movhi	r2,4
   212e0:	1080cf04 	addi	r2,r2,828
   212e4:	10800017 	ldw	r2,0(r2)
   212e8:	103ee83a 	callr	r2
   212ec:	00000206 	br	212f8 <alt_get_errno+0x3c>
   212f0:	00800134 	movhi	r2,4
   212f4:	1080d404 	addi	r2,r2,848
}
   212f8:	e037883a 	mov	sp,fp
   212fc:	dfc00117 	ldw	ra,4(sp)
   21300:	df000017 	ldw	fp,0(sp)
   21304:	dec00204 	addi	sp,sp,8
   21308:	f800283a 	ret

0002130c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2130c:	defff904 	addi	sp,sp,-28
   21310:	dfc00615 	stw	ra,24(sp)
   21314:	df000515 	stw	fp,20(sp)
   21318:	df000504 	addi	fp,sp,20
   2131c:	e13ffd15 	stw	r4,-12(fp)
   21320:	e17ffe15 	stw	r5,-8(fp)
   21324:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21328:	e0bffd17 	ldw	r2,-12(fp)
   2132c:	10000816 	blt	r2,zero,21350 <write+0x44>
   21330:	01400304 	movi	r5,12
   21334:	e13ffd17 	ldw	r4,-12(fp)
   21338:	0020f4c0 	call	20f4c <__mulsi3>
   2133c:	1007883a 	mov	r3,r2
   21340:	00800134 	movhi	r2,4
   21344:	10806704 	addi	r2,r2,412
   21348:	1885883a 	add	r2,r3,r2
   2134c:	00000106 	br	21354 <write+0x48>
   21350:	0005883a 	mov	r2,zero
   21354:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   21358:	e0bffb17 	ldw	r2,-20(fp)
   2135c:	10002126 	beq	r2,zero,213e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   21360:	e0bffb17 	ldw	r2,-20(fp)
   21364:	10800217 	ldw	r2,8(r2)
   21368:	108000cc 	andi	r2,r2,3
   2136c:	10001826 	beq	r2,zero,213d0 <write+0xc4>
   21370:	e0bffb17 	ldw	r2,-20(fp)
   21374:	10800017 	ldw	r2,0(r2)
   21378:	10800617 	ldw	r2,24(r2)
   2137c:	10001426 	beq	r2,zero,213d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   21380:	e0bffb17 	ldw	r2,-20(fp)
   21384:	10800017 	ldw	r2,0(r2)
   21388:	10800617 	ldw	r2,24(r2)
   2138c:	e0ffff17 	ldw	r3,-4(fp)
   21390:	180d883a 	mov	r6,r3
   21394:	e17ffe17 	ldw	r5,-8(fp)
   21398:	e13ffb17 	ldw	r4,-20(fp)
   2139c:	103ee83a 	callr	r2
   213a0:	e0bffc15 	stw	r2,-16(fp)
   213a4:	e0bffc17 	ldw	r2,-16(fp)
   213a8:	1000070e 	bge	r2,zero,213c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   213ac:	00212bc0 	call	212bc <alt_get_errno>
   213b0:	1007883a 	mov	r3,r2
   213b4:	e0bffc17 	ldw	r2,-16(fp)
   213b8:	0085c83a 	sub	r2,zero,r2
   213bc:	18800015 	stw	r2,0(r3)
        return -1;
   213c0:	00bfffc4 	movi	r2,-1
   213c4:	00000c06 	br	213f8 <write+0xec>
      }
      return rval;
   213c8:	e0bffc17 	ldw	r2,-16(fp)
   213cc:	00000a06 	br	213f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   213d0:	00212bc0 	call	212bc <alt_get_errno>
   213d4:	1007883a 	mov	r3,r2
   213d8:	00800344 	movi	r2,13
   213dc:	18800015 	stw	r2,0(r3)
   213e0:	00000406 	br	213f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   213e4:	00212bc0 	call	212bc <alt_get_errno>
   213e8:	1007883a 	mov	r3,r2
   213ec:	00801444 	movi	r2,81
   213f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   213f4:	00bfffc4 	movi	r2,-1
}
   213f8:	e037883a 	mov	sp,fp
   213fc:	dfc00117 	ldw	ra,4(sp)
   21400:	df000017 	ldw	fp,0(sp)
   21404:	dec00204 	addi	sp,sp,8
   21408:	f800283a 	ret

0002140c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2140c:	defffd04 	addi	sp,sp,-12
   21410:	dfc00215 	stw	ra,8(sp)
   21414:	df000115 	stw	fp,4(sp)
   21418:	df000104 	addi	fp,sp,4
   2141c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   21420:	01400134 	movhi	r5,4
   21424:	2940cc04 	addi	r5,r5,816
   21428:	e13fff17 	ldw	r4,-4(fp)
   2142c:	0021a0c0 	call	21a0c <alt_dev_llist_insert>
}
   21430:	e037883a 	mov	sp,fp
   21434:	dfc00117 	ldw	ra,4(sp)
   21438:	df000017 	ldw	fp,0(sp)
   2143c:	dec00204 	addi	sp,sp,8
   21440:	f800283a 	ret

00021444 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21444:	defffd04 	addi	sp,sp,-12
   21448:	dfc00215 	stw	ra,8(sp)
   2144c:	df000115 	stw	fp,4(sp)
   21450:	df000104 	addi	fp,sp,4
   21454:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   21458:	00220180 	call	22018 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2145c:	00800044 	movi	r2,1
   21460:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21464:	0001883a 	nop
   21468:	e037883a 	mov	sp,fp
   2146c:	dfc00117 	ldw	ra,4(sp)
   21470:	df000017 	ldw	fp,0(sp)
   21474:	dec00204 	addi	sp,sp,8
   21478:	f800283a 	ret

0002147c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2147c:	defffe04 	addi	sp,sp,-8
   21480:	dfc00115 	stw	ra,4(sp)
   21484:	df000015 	stw	fp,0(sp)
   21488:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2148c:	01000134 	movhi	r4,4
   21490:	21005204 	addi	r4,r4,328
   21494:	002140c0 	call	2140c <alt_dev_reg>
}
   21498:	0001883a 	nop
   2149c:	e037883a 	mov	sp,fp
   214a0:	dfc00117 	ldw	ra,4(sp)
   214a4:	df000017 	ldw	fp,0(sp)
   214a8:	dec00204 	addi	sp,sp,8
   214ac:	f800283a 	ret

000214b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   214b0:	defffa04 	addi	sp,sp,-24
   214b4:	dfc00515 	stw	ra,20(sp)
   214b8:	df000415 	stw	fp,16(sp)
   214bc:	df000404 	addi	fp,sp,16
   214c0:	e13ffd15 	stw	r4,-12(fp)
   214c4:	e17ffe15 	stw	r5,-8(fp)
   214c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   214cc:	e0bffd17 	ldw	r2,-12(fp)
   214d0:	10800017 	ldw	r2,0(r2)
   214d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   214d8:	e0bffc17 	ldw	r2,-16(fp)
   214dc:	10c00a04 	addi	r3,r2,40
   214e0:	e0bffd17 	ldw	r2,-12(fp)
   214e4:	10800217 	ldw	r2,8(r2)
   214e8:	100f883a 	mov	r7,r2
   214ec:	e1bfff17 	ldw	r6,-4(fp)
   214f0:	e17ffe17 	ldw	r5,-8(fp)
   214f4:	1809883a 	mov	r4,r3
   214f8:	00215700 	call	21570 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   214fc:	e037883a 	mov	sp,fp
   21500:	dfc00117 	ldw	ra,4(sp)
   21504:	df000017 	ldw	fp,0(sp)
   21508:	dec00204 	addi	sp,sp,8
   2150c:	f800283a 	ret

00021510 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21510:	defffa04 	addi	sp,sp,-24
   21514:	dfc00515 	stw	ra,20(sp)
   21518:	df000415 	stw	fp,16(sp)
   2151c:	df000404 	addi	fp,sp,16
   21520:	e13ffd15 	stw	r4,-12(fp)
   21524:	e17ffe15 	stw	r5,-8(fp)
   21528:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2152c:	e0bffd17 	ldw	r2,-12(fp)
   21530:	10800017 	ldw	r2,0(r2)
   21534:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21538:	e0bffc17 	ldw	r2,-16(fp)
   2153c:	10c00a04 	addi	r3,r2,40
   21540:	e0bffd17 	ldw	r2,-12(fp)
   21544:	10800217 	ldw	r2,8(r2)
   21548:	100f883a 	mov	r7,r2
   2154c:	e1bfff17 	ldw	r6,-4(fp)
   21550:	e17ffe17 	ldw	r5,-8(fp)
   21554:	1809883a 	mov	r4,r3
   21558:	002165c0 	call	2165c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2155c:	e037883a 	mov	sp,fp
   21560:	dfc00117 	ldw	ra,4(sp)
   21564:	df000017 	ldw	fp,0(sp)
   21568:	dec00204 	addi	sp,sp,8
   2156c:	f800283a 	ret

00021570 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   21570:	defff704 	addi	sp,sp,-36
   21574:	df000815 	stw	fp,32(sp)
   21578:	df000804 	addi	fp,sp,32
   2157c:	e13ffc15 	stw	r4,-16(fp)
   21580:	e17ffd15 	stw	r5,-12(fp)
   21584:	e1bffe15 	stw	r6,-8(fp)
   21588:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2158c:	e0bffc17 	ldw	r2,-16(fp)
   21590:	10800017 	ldw	r2,0(r2)
   21594:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   21598:	e0bffd17 	ldw	r2,-12(fp)
   2159c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   215a0:	e0bffe17 	ldw	r2,-8(fp)
   215a4:	e0fffd17 	ldw	r3,-12(fp)
   215a8:	1885883a 	add	r2,r3,r2
   215ac:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   215b0:	00001206 	br	215fc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   215b4:	e0bff917 	ldw	r2,-28(fp)
   215b8:	10800037 	ldwio	r2,0(r2)
   215bc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   215c0:	e0bffb17 	ldw	r2,-20(fp)
   215c4:	10a0000c 	andi	r2,r2,32768
   215c8:	10000626 	beq	r2,zero,215e4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   215cc:	e0bff817 	ldw	r2,-32(fp)
   215d0:	10c00044 	addi	r3,r2,1
   215d4:	e0fff815 	stw	r3,-32(fp)
   215d8:	e0fffb17 	ldw	r3,-20(fp)
   215dc:	10c00005 	stb	r3,0(r2)
   215e0:	00000606 	br	215fc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   215e4:	e0fff817 	ldw	r3,-32(fp)
   215e8:	e0bffd17 	ldw	r2,-12(fp)
   215ec:	1880071e 	bne	r3,r2,2160c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   215f0:	e0bfff17 	ldw	r2,-4(fp)
   215f4:	1090000c 	andi	r2,r2,16384
   215f8:	1000061e 	bne	r2,zero,21614 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   215fc:	e0fff817 	ldw	r3,-32(fp)
   21600:	e0bffa17 	ldw	r2,-24(fp)
   21604:	18bfeb36 	bltu	r3,r2,215b4 <altera_avalon_jtag_uart_read+0x44>
   21608:	00000306 	br	21618 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   2160c:	0001883a 	nop
   21610:	00000106 	br	21618 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   21614:	0001883a 	nop
    
  }

  if (ptr != buffer)
   21618:	e0fff817 	ldw	r3,-32(fp)
   2161c:	e0bffd17 	ldw	r2,-12(fp)
   21620:	18800426 	beq	r3,r2,21634 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   21624:	e0fff817 	ldw	r3,-32(fp)
   21628:	e0bffd17 	ldw	r2,-12(fp)
   2162c:	1885c83a 	sub	r2,r3,r2
   21630:	00000606 	br	2164c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   21634:	e0bfff17 	ldw	r2,-4(fp)
   21638:	1090000c 	andi	r2,r2,16384
   2163c:	10000226 	beq	r2,zero,21648 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   21640:	00bffd44 	movi	r2,-11
   21644:	00000106 	br	2164c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   21648:	00bffec4 	movi	r2,-5
}
   2164c:	e037883a 	mov	sp,fp
   21650:	df000017 	ldw	fp,0(sp)
   21654:	dec00104 	addi	sp,sp,4
   21658:	f800283a 	ret

0002165c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2165c:	defff904 	addi	sp,sp,-28
   21660:	df000615 	stw	fp,24(sp)
   21664:	df000604 	addi	fp,sp,24
   21668:	e13ffc15 	stw	r4,-16(fp)
   2166c:	e17ffd15 	stw	r5,-12(fp)
   21670:	e1bffe15 	stw	r6,-8(fp)
   21674:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   21678:	e0bffc17 	ldw	r2,-16(fp)
   2167c:	10800017 	ldw	r2,0(r2)
   21680:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   21684:	e0bffe17 	ldw	r2,-8(fp)
   21688:	e0fffd17 	ldw	r3,-12(fp)
   2168c:	1885883a 	add	r2,r3,r2
   21690:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   21694:	00000e06 	br	216d0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21698:	e0bffa17 	ldw	r2,-24(fp)
   2169c:	10800104 	addi	r2,r2,4
   216a0:	10800037 	ldwio	r2,0(r2)
   216a4:	10bfffec 	andhi	r2,r2,65535
   216a8:	10000926 	beq	r2,zero,216d0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   216ac:	e0fffa17 	ldw	r3,-24(fp)
   216b0:	e0bffd17 	ldw	r2,-12(fp)
   216b4:	11000044 	addi	r4,r2,1
   216b8:	e13ffd15 	stw	r4,-12(fp)
   216bc:	10800003 	ldbu	r2,0(r2)
   216c0:	10803fcc 	andi	r2,r2,255
   216c4:	1080201c 	xori	r2,r2,128
   216c8:	10bfe004 	addi	r2,r2,-128
   216cc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   216d0:	e0fffd17 	ldw	r3,-12(fp)
   216d4:	e0bffb17 	ldw	r2,-20(fp)
   216d8:	18bfef36 	bltu	r3,r2,21698 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   216dc:	e0bffe17 	ldw	r2,-8(fp)
}
   216e0:	e037883a 	mov	sp,fp
   216e4:	df000017 	ldw	fp,0(sp)
   216e8:	dec00104 	addi	sp,sp,4
   216ec:	f800283a 	ret

000216f0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   216f0:	defffa04 	addi	sp,sp,-24
   216f4:	dfc00515 	stw	ra,20(sp)
   216f8:	df000415 	stw	fp,16(sp)
   216fc:	df000404 	addi	fp,sp,16
   21700:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   21704:	00800244 	movi	r2,9
   21708:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2170c:	014003f4 	movhi	r5,15
   21710:	29509004 	addi	r5,r5,16960
   21714:	e13ffd17 	ldw	r4,-12(fp)
   21718:	0020f4c0 	call	20f4c <__mulsi3>
   2171c:	100b883a 	mov	r5,r2
   21720:	0100bef4 	movhi	r4,763
   21724:	213c2004 	addi	r4,r4,-3968
   21728:	0020e900 	call	20e90 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2172c:	100b883a 	mov	r5,r2
   21730:	01200034 	movhi	r4,32768
   21734:	213fffc4 	addi	r4,r4,-1
   21738:	0020e900 	call	20e90 <__udivsi3>
   2173c:	100b883a 	mov	r5,r2
   21740:	e13fff17 	ldw	r4,-4(fp)
   21744:	0020e900 	call	20e90 <__udivsi3>
   21748:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2174c:	e0bffe17 	ldw	r2,-8(fp)
   21750:	10002a26 	beq	r2,zero,217fc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   21754:	e03ffc15 	stw	zero,-16(fp)
   21758:	00001706 	br	217b8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2175c:	00a00034 	movhi	r2,32768
   21760:	10bfffc4 	addi	r2,r2,-1
   21764:	10bfffc4 	addi	r2,r2,-1
   21768:	103ffe1e 	bne	r2,zero,21764 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2176c:	014003f4 	movhi	r5,15
   21770:	29509004 	addi	r5,r5,16960
   21774:	e13ffd17 	ldw	r4,-12(fp)
   21778:	0020f4c0 	call	20f4c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2177c:	100b883a 	mov	r5,r2
   21780:	0100bef4 	movhi	r4,763
   21784:	213c2004 	addi	r4,r4,-3968
   21788:	0020e900 	call	20e90 <__udivsi3>
   2178c:	100b883a 	mov	r5,r2
   21790:	01200034 	movhi	r4,32768
   21794:	213fffc4 	addi	r4,r4,-1
   21798:	0020e900 	call	20e90 <__udivsi3>
   2179c:	1007883a 	mov	r3,r2
   217a0:	e0bfff17 	ldw	r2,-4(fp)
   217a4:	10c5c83a 	sub	r2,r2,r3
   217a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   217ac:	e0bffc17 	ldw	r2,-16(fp)
   217b0:	10800044 	addi	r2,r2,1
   217b4:	e0bffc15 	stw	r2,-16(fp)
   217b8:	e0fffc17 	ldw	r3,-16(fp)
   217bc:	e0bffe17 	ldw	r2,-8(fp)
   217c0:	18bfe616 	blt	r3,r2,2175c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   217c4:	014003f4 	movhi	r5,15
   217c8:	29509004 	addi	r5,r5,16960
   217cc:	e13ffd17 	ldw	r4,-12(fp)
   217d0:	0020f4c0 	call	20f4c <__mulsi3>
   217d4:	100b883a 	mov	r5,r2
   217d8:	0100bef4 	movhi	r4,763
   217dc:	213c2004 	addi	r4,r4,-3968
   217e0:	0020e900 	call	20e90 <__udivsi3>
   217e4:	e17fff17 	ldw	r5,-4(fp)
   217e8:	1009883a 	mov	r4,r2
   217ec:	0020f4c0 	call	20f4c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   217f0:	10bfffc4 	addi	r2,r2,-1
   217f4:	103ffe1e 	bne	r2,zero,217f0 <alt_busy_sleep+0x100>
   217f8:	00000d06 	br	21830 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   217fc:	014003f4 	movhi	r5,15
   21800:	29509004 	addi	r5,r5,16960
   21804:	e13ffd17 	ldw	r4,-12(fp)
   21808:	0020f4c0 	call	20f4c <__mulsi3>
   2180c:	100b883a 	mov	r5,r2
   21810:	0100bef4 	movhi	r4,763
   21814:	213c2004 	addi	r4,r4,-3968
   21818:	0020e900 	call	20e90 <__udivsi3>
   2181c:	e17fff17 	ldw	r5,-4(fp)
   21820:	1009883a 	mov	r4,r2
   21824:	0020f4c0 	call	20f4c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21828:	10bfffc4 	addi	r2,r2,-1
   2182c:	00bffe16 	blt	zero,r2,21828 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   21830:	0005883a 	mov	r2,zero
}
   21834:	e037883a 	mov	sp,fp
   21838:	dfc00117 	ldw	ra,4(sp)
   2183c:	df000017 	ldw	fp,0(sp)
   21840:	dec00204 	addi	sp,sp,8
   21844:	f800283a 	ret

00021848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21848:	defffe04 	addi	sp,sp,-8
   2184c:	dfc00115 	stw	ra,4(sp)
   21850:	df000015 	stw	fp,0(sp)
   21854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21858:	00800134 	movhi	r2,4
   2185c:	1080cf04 	addi	r2,r2,828
   21860:	10800017 	ldw	r2,0(r2)
   21864:	10000526 	beq	r2,zero,2187c <alt_get_errno+0x34>
   21868:	00800134 	movhi	r2,4
   2186c:	1080cf04 	addi	r2,r2,828
   21870:	10800017 	ldw	r2,0(r2)
   21874:	103ee83a 	callr	r2
   21878:	00000206 	br	21884 <alt_get_errno+0x3c>
   2187c:	00800134 	movhi	r2,4
   21880:	1080d404 	addi	r2,r2,848
}
   21884:	e037883a 	mov	sp,fp
   21888:	dfc00117 	ldw	ra,4(sp)
   2188c:	df000017 	ldw	fp,0(sp)
   21890:	dec00204 	addi	sp,sp,8
   21894:	f800283a 	ret

00021898 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21898:	defffb04 	addi	sp,sp,-20
   2189c:	dfc00415 	stw	ra,16(sp)
   218a0:	df000315 	stw	fp,12(sp)
   218a4:	df000304 	addi	fp,sp,12
   218a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   218ac:	e0bfff17 	ldw	r2,-4(fp)
   218b0:	10000816 	blt	r2,zero,218d4 <close+0x3c>
   218b4:	01400304 	movi	r5,12
   218b8:	e13fff17 	ldw	r4,-4(fp)
   218bc:	0020f4c0 	call	20f4c <__mulsi3>
   218c0:	1007883a 	mov	r3,r2
   218c4:	00800134 	movhi	r2,4
   218c8:	10806704 	addi	r2,r2,412
   218cc:	1885883a 	add	r2,r3,r2
   218d0:	00000106 	br	218d8 <close+0x40>
   218d4:	0005883a 	mov	r2,zero
   218d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   218dc:	e0bffd17 	ldw	r2,-12(fp)
   218e0:	10001926 	beq	r2,zero,21948 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   218e4:	e0bffd17 	ldw	r2,-12(fp)
   218e8:	10800017 	ldw	r2,0(r2)
   218ec:	10800417 	ldw	r2,16(r2)
   218f0:	10000626 	beq	r2,zero,2190c <close+0x74>
   218f4:	e0bffd17 	ldw	r2,-12(fp)
   218f8:	10800017 	ldw	r2,0(r2)
   218fc:	10800417 	ldw	r2,16(r2)
   21900:	e13ffd17 	ldw	r4,-12(fp)
   21904:	103ee83a 	callr	r2
   21908:	00000106 	br	21910 <close+0x78>
   2190c:	0005883a 	mov	r2,zero
   21910:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21914:	e13fff17 	ldw	r4,-4(fp)
   21918:	0021f940 	call	21f94 <alt_release_fd>
    if (rval < 0)
   2191c:	e0bffe17 	ldw	r2,-8(fp)
   21920:	1000070e 	bge	r2,zero,21940 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   21924:	00218480 	call	21848 <alt_get_errno>
   21928:	1007883a 	mov	r3,r2
   2192c:	e0bffe17 	ldw	r2,-8(fp)
   21930:	0085c83a 	sub	r2,zero,r2
   21934:	18800015 	stw	r2,0(r3)
      return -1;
   21938:	00bfffc4 	movi	r2,-1
   2193c:	00000706 	br	2195c <close+0xc4>
    }
    return 0;
   21940:	0005883a 	mov	r2,zero
   21944:	00000506 	br	2195c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21948:	00218480 	call	21848 <alt_get_errno>
   2194c:	1007883a 	mov	r3,r2
   21950:	00801444 	movi	r2,81
   21954:	18800015 	stw	r2,0(r3)
    return -1;
   21958:	00bfffc4 	movi	r2,-1
  }
}
   2195c:	e037883a 	mov	sp,fp
   21960:	dfc00117 	ldw	ra,4(sp)
   21964:	df000017 	ldw	fp,0(sp)
   21968:	dec00204 	addi	sp,sp,8
   2196c:	f800283a 	ret

00021970 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21970:	deffff04 	addi	sp,sp,-4
   21974:	df000015 	stw	fp,0(sp)
   21978:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2197c:	0001883a 	nop
   21980:	e037883a 	mov	sp,fp
   21984:	df000017 	ldw	fp,0(sp)
   21988:	dec00104 	addi	sp,sp,4
   2198c:	f800283a 	ret

00021990 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   21990:	defffc04 	addi	sp,sp,-16
   21994:	df000315 	stw	fp,12(sp)
   21998:	df000304 	addi	fp,sp,12
   2199c:	e13ffd15 	stw	r4,-12(fp)
   219a0:	e17ffe15 	stw	r5,-8(fp)
   219a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   219a8:	e0bfff17 	ldw	r2,-4(fp)
}
   219ac:	e037883a 	mov	sp,fp
   219b0:	df000017 	ldw	fp,0(sp)
   219b4:	dec00104 	addi	sp,sp,4
   219b8:	f800283a 	ret

000219bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   219bc:	defffe04 	addi	sp,sp,-8
   219c0:	dfc00115 	stw	ra,4(sp)
   219c4:	df000015 	stw	fp,0(sp)
   219c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   219cc:	00800134 	movhi	r2,4
   219d0:	1080cf04 	addi	r2,r2,828
   219d4:	10800017 	ldw	r2,0(r2)
   219d8:	10000526 	beq	r2,zero,219f0 <alt_get_errno+0x34>
   219dc:	00800134 	movhi	r2,4
   219e0:	1080cf04 	addi	r2,r2,828
   219e4:	10800017 	ldw	r2,0(r2)
   219e8:	103ee83a 	callr	r2
   219ec:	00000206 	br	219f8 <alt_get_errno+0x3c>
   219f0:	00800134 	movhi	r2,4
   219f4:	1080d404 	addi	r2,r2,848
}
   219f8:	e037883a 	mov	sp,fp
   219fc:	dfc00117 	ldw	ra,4(sp)
   21a00:	df000017 	ldw	fp,0(sp)
   21a04:	dec00204 	addi	sp,sp,8
   21a08:	f800283a 	ret

00021a0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21a0c:	defffa04 	addi	sp,sp,-24
   21a10:	dfc00515 	stw	ra,20(sp)
   21a14:	df000415 	stw	fp,16(sp)
   21a18:	df000404 	addi	fp,sp,16
   21a1c:	e13ffe15 	stw	r4,-8(fp)
   21a20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21a24:	e0bffe17 	ldw	r2,-8(fp)
   21a28:	10000326 	beq	r2,zero,21a38 <alt_dev_llist_insert+0x2c>
   21a2c:	e0bffe17 	ldw	r2,-8(fp)
   21a30:	10800217 	ldw	r2,8(r2)
   21a34:	1000061e 	bne	r2,zero,21a50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   21a38:	00219bc0 	call	219bc <alt_get_errno>
   21a3c:	1007883a 	mov	r3,r2
   21a40:	00800584 	movi	r2,22
   21a44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   21a48:	00bffa84 	movi	r2,-22
   21a4c:	00001306 	br	21a9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21a50:	e0bffe17 	ldw	r2,-8(fp)
   21a54:	e0ffff17 	ldw	r3,-4(fp)
   21a58:	e0fffc15 	stw	r3,-16(fp)
   21a5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21a60:	e0bffd17 	ldw	r2,-12(fp)
   21a64:	e0fffc17 	ldw	r3,-16(fp)
   21a68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21a6c:	e0bffc17 	ldw	r2,-16(fp)
   21a70:	10c00017 	ldw	r3,0(r2)
   21a74:	e0bffd17 	ldw	r2,-12(fp)
   21a78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21a7c:	e0bffc17 	ldw	r2,-16(fp)
   21a80:	10800017 	ldw	r2,0(r2)
   21a84:	e0fffd17 	ldw	r3,-12(fp)
   21a88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21a8c:	e0bffc17 	ldw	r2,-16(fp)
   21a90:	e0fffd17 	ldw	r3,-12(fp)
   21a94:	10c00015 	stw	r3,0(r2)

  return 0;  
   21a98:	0005883a 	mov	r2,zero
}
   21a9c:	e037883a 	mov	sp,fp
   21aa0:	dfc00117 	ldw	ra,4(sp)
   21aa4:	df000017 	ldw	fp,0(sp)
   21aa8:	dec00204 	addi	sp,sp,8
   21aac:	f800283a 	ret

00021ab0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   21ab0:	defffd04 	addi	sp,sp,-12
   21ab4:	dfc00215 	stw	ra,8(sp)
   21ab8:	df000115 	stw	fp,4(sp)
   21abc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21ac0:	008000b4 	movhi	r2,2
   21ac4:	1089b304 	addi	r2,r2,9932
   21ac8:	e0bfff15 	stw	r2,-4(fp)
   21acc:	00000606 	br	21ae8 <_do_ctors+0x38>
        (*ctor) (); 
   21ad0:	e0bfff17 	ldw	r2,-4(fp)
   21ad4:	10800017 	ldw	r2,0(r2)
   21ad8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21adc:	e0bfff17 	ldw	r2,-4(fp)
   21ae0:	10bfff04 	addi	r2,r2,-4
   21ae4:	e0bfff15 	stw	r2,-4(fp)
   21ae8:	e0ffff17 	ldw	r3,-4(fp)
   21aec:	008000b4 	movhi	r2,2
   21af0:	1089b404 	addi	r2,r2,9936
   21af4:	18bff62e 	bgeu	r3,r2,21ad0 <_do_ctors+0x20>
        (*ctor) (); 
}
   21af8:	0001883a 	nop
   21afc:	e037883a 	mov	sp,fp
   21b00:	dfc00117 	ldw	ra,4(sp)
   21b04:	df000017 	ldw	fp,0(sp)
   21b08:	dec00204 	addi	sp,sp,8
   21b0c:	f800283a 	ret

00021b10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   21b10:	defffd04 	addi	sp,sp,-12
   21b14:	dfc00215 	stw	ra,8(sp)
   21b18:	df000115 	stw	fp,4(sp)
   21b1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21b20:	008000b4 	movhi	r2,2
   21b24:	1089b304 	addi	r2,r2,9932
   21b28:	e0bfff15 	stw	r2,-4(fp)
   21b2c:	00000606 	br	21b48 <_do_dtors+0x38>
        (*dtor) (); 
   21b30:	e0bfff17 	ldw	r2,-4(fp)
   21b34:	10800017 	ldw	r2,0(r2)
   21b38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21b3c:	e0bfff17 	ldw	r2,-4(fp)
   21b40:	10bfff04 	addi	r2,r2,-4
   21b44:	e0bfff15 	stw	r2,-4(fp)
   21b48:	e0ffff17 	ldw	r3,-4(fp)
   21b4c:	008000b4 	movhi	r2,2
   21b50:	1089b404 	addi	r2,r2,9936
   21b54:	18bff62e 	bgeu	r3,r2,21b30 <_do_dtors+0x20>
        (*dtor) (); 
}
   21b58:	0001883a 	nop
   21b5c:	e037883a 	mov	sp,fp
   21b60:	dfc00117 	ldw	ra,4(sp)
   21b64:	df000017 	ldw	fp,0(sp)
   21b68:	dec00204 	addi	sp,sp,8
   21b6c:	f800283a 	ret

00021b70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21b70:	deffff04 	addi	sp,sp,-4
   21b74:	df000015 	stw	fp,0(sp)
   21b78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   21b7c:	0001883a 	nop
   21b80:	e037883a 	mov	sp,fp
   21b84:	df000017 	ldw	fp,0(sp)
   21b88:	dec00104 	addi	sp,sp,4
   21b8c:	f800283a 	ret

00021b90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21b90:	defff804 	addi	sp,sp,-32
   21b94:	dfc00715 	stw	ra,28(sp)
   21b98:	df000615 	stw	fp,24(sp)
   21b9c:	dc000515 	stw	r16,20(sp)
   21ba0:	df000604 	addi	fp,sp,24
   21ba4:	e13ffb15 	stw	r4,-20(fp)
   21ba8:	e17ffc15 	stw	r5,-16(fp)
   21bac:	e1bffd15 	stw	r6,-12(fp)
   21bb0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   21bb4:	e1bffe17 	ldw	r6,-8(fp)
   21bb8:	e17ffd17 	ldw	r5,-12(fp)
   21bbc:	e13ffc17 	ldw	r4,-16(fp)
   21bc0:	0021e340 	call	21e34 <open>
   21bc4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   21bc8:	e0bffa17 	ldw	r2,-24(fp)
   21bcc:	10002216 	blt	r2,zero,21c58 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   21bd0:	04000134 	movhi	r16,4
   21bd4:	84006704 	addi	r16,r16,412
   21bd8:	e0bffa17 	ldw	r2,-24(fp)
   21bdc:	01400304 	movi	r5,12
   21be0:	1009883a 	mov	r4,r2
   21be4:	0020f4c0 	call	20f4c <__mulsi3>
   21be8:	8085883a 	add	r2,r16,r2
   21bec:	10c00017 	ldw	r3,0(r2)
   21bf0:	e0bffb17 	ldw	r2,-20(fp)
   21bf4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21bf8:	04000134 	movhi	r16,4
   21bfc:	84006704 	addi	r16,r16,412
   21c00:	e0bffa17 	ldw	r2,-24(fp)
   21c04:	01400304 	movi	r5,12
   21c08:	1009883a 	mov	r4,r2
   21c0c:	0020f4c0 	call	20f4c <__mulsi3>
   21c10:	8085883a 	add	r2,r16,r2
   21c14:	10800104 	addi	r2,r2,4
   21c18:	10c00017 	ldw	r3,0(r2)
   21c1c:	e0bffb17 	ldw	r2,-20(fp)
   21c20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21c24:	04000134 	movhi	r16,4
   21c28:	84006704 	addi	r16,r16,412
   21c2c:	e0bffa17 	ldw	r2,-24(fp)
   21c30:	01400304 	movi	r5,12
   21c34:	1009883a 	mov	r4,r2
   21c38:	0020f4c0 	call	20f4c <__mulsi3>
   21c3c:	8085883a 	add	r2,r16,r2
   21c40:	10800204 	addi	r2,r2,8
   21c44:	10c00017 	ldw	r3,0(r2)
   21c48:	e0bffb17 	ldw	r2,-20(fp)
   21c4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21c50:	e13ffa17 	ldw	r4,-24(fp)
   21c54:	0021f940 	call	21f94 <alt_release_fd>
  }
} 
   21c58:	0001883a 	nop
   21c5c:	e6ffff04 	addi	sp,fp,-4
   21c60:	dfc00217 	ldw	ra,8(sp)
   21c64:	df000117 	ldw	fp,4(sp)
   21c68:	dc000017 	ldw	r16,0(sp)
   21c6c:	dec00304 	addi	sp,sp,12
   21c70:	f800283a 	ret

00021c74 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21c74:	defffb04 	addi	sp,sp,-20
   21c78:	dfc00415 	stw	ra,16(sp)
   21c7c:	df000315 	stw	fp,12(sp)
   21c80:	df000304 	addi	fp,sp,12
   21c84:	e13ffd15 	stw	r4,-12(fp)
   21c88:	e17ffe15 	stw	r5,-8(fp)
   21c8c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21c90:	01c07fc4 	movi	r7,511
   21c94:	01800044 	movi	r6,1
   21c98:	e17ffd17 	ldw	r5,-12(fp)
   21c9c:	01000134 	movhi	r4,4
   21ca0:	21006a04 	addi	r4,r4,424
   21ca4:	0021b900 	call	21b90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21ca8:	01c07fc4 	movi	r7,511
   21cac:	000d883a 	mov	r6,zero
   21cb0:	e17ffe17 	ldw	r5,-8(fp)
   21cb4:	01000134 	movhi	r4,4
   21cb8:	21006704 	addi	r4,r4,412
   21cbc:	0021b900 	call	21b90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21cc0:	01c07fc4 	movi	r7,511
   21cc4:	01800044 	movi	r6,1
   21cc8:	e17fff17 	ldw	r5,-4(fp)
   21ccc:	01000134 	movhi	r4,4
   21cd0:	21006d04 	addi	r4,r4,436
   21cd4:	0021b900 	call	21b90 <alt_open_fd>
}  
   21cd8:	0001883a 	nop
   21cdc:	e037883a 	mov	sp,fp
   21ce0:	dfc00117 	ldw	ra,4(sp)
   21ce4:	df000017 	ldw	fp,0(sp)
   21ce8:	dec00204 	addi	sp,sp,8
   21cec:	f800283a 	ret

00021cf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21cf0:	defffe04 	addi	sp,sp,-8
   21cf4:	dfc00115 	stw	ra,4(sp)
   21cf8:	df000015 	stw	fp,0(sp)
   21cfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21d00:	00800134 	movhi	r2,4
   21d04:	1080cf04 	addi	r2,r2,828
   21d08:	10800017 	ldw	r2,0(r2)
   21d0c:	10000526 	beq	r2,zero,21d24 <alt_get_errno+0x34>
   21d10:	00800134 	movhi	r2,4
   21d14:	1080cf04 	addi	r2,r2,828
   21d18:	10800017 	ldw	r2,0(r2)
   21d1c:	103ee83a 	callr	r2
   21d20:	00000206 	br	21d2c <alt_get_errno+0x3c>
   21d24:	00800134 	movhi	r2,4
   21d28:	1080d404 	addi	r2,r2,848
}
   21d2c:	e037883a 	mov	sp,fp
   21d30:	dfc00117 	ldw	ra,4(sp)
   21d34:	df000017 	ldw	fp,0(sp)
   21d38:	dec00204 	addi	sp,sp,8
   21d3c:	f800283a 	ret

00021d40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21d40:	defffb04 	addi	sp,sp,-20
   21d44:	dfc00415 	stw	ra,16(sp)
   21d48:	df000315 	stw	fp,12(sp)
   21d4c:	dc000215 	stw	r16,8(sp)
   21d50:	df000304 	addi	fp,sp,12
   21d54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21d58:	e0bffe17 	ldw	r2,-8(fp)
   21d5c:	10800217 	ldw	r2,8(r2)
   21d60:	10d00034 	orhi	r3,r2,16384
   21d64:	e0bffe17 	ldw	r2,-8(fp)
   21d68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21d6c:	e03ffd15 	stw	zero,-12(fp)
   21d70:	00002306 	br	21e00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d74:	04000134 	movhi	r16,4
   21d78:	84006704 	addi	r16,r16,412
   21d7c:	e0bffd17 	ldw	r2,-12(fp)
   21d80:	01400304 	movi	r5,12
   21d84:	1009883a 	mov	r4,r2
   21d88:	0020f4c0 	call	20f4c <__mulsi3>
   21d8c:	8085883a 	add	r2,r16,r2
   21d90:	10c00017 	ldw	r3,0(r2)
   21d94:	e0bffe17 	ldw	r2,-8(fp)
   21d98:	10800017 	ldw	r2,0(r2)
   21d9c:	1880151e 	bne	r3,r2,21df4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21da0:	04000134 	movhi	r16,4
   21da4:	84006704 	addi	r16,r16,412
   21da8:	e0bffd17 	ldw	r2,-12(fp)
   21dac:	01400304 	movi	r5,12
   21db0:	1009883a 	mov	r4,r2
   21db4:	0020f4c0 	call	20f4c <__mulsi3>
   21db8:	8085883a 	add	r2,r16,r2
   21dbc:	10800204 	addi	r2,r2,8
   21dc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21dc4:	10000b0e 	bge	r2,zero,21df4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21dc8:	01400304 	movi	r5,12
   21dcc:	e13ffd17 	ldw	r4,-12(fp)
   21dd0:	0020f4c0 	call	20f4c <__mulsi3>
   21dd4:	1007883a 	mov	r3,r2
   21dd8:	00800134 	movhi	r2,4
   21ddc:	10806704 	addi	r2,r2,412
   21de0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21de4:	e0bffe17 	ldw	r2,-8(fp)
   21de8:	18800226 	beq	r3,r2,21df4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21dec:	00bffcc4 	movi	r2,-13
   21df0:	00000a06 	br	21e1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21df4:	e0bffd17 	ldw	r2,-12(fp)
   21df8:	10800044 	addi	r2,r2,1
   21dfc:	e0bffd15 	stw	r2,-12(fp)
   21e00:	00800134 	movhi	r2,4
   21e04:	1080ce04 	addi	r2,r2,824
   21e08:	10800017 	ldw	r2,0(r2)
   21e0c:	1007883a 	mov	r3,r2
   21e10:	e0bffd17 	ldw	r2,-12(fp)
   21e14:	18bfd72e 	bgeu	r3,r2,21d74 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21e18:	0005883a 	mov	r2,zero
}
   21e1c:	e6ffff04 	addi	sp,fp,-4
   21e20:	dfc00217 	ldw	ra,8(sp)
   21e24:	df000117 	ldw	fp,4(sp)
   21e28:	dc000017 	ldw	r16,0(sp)
   21e2c:	dec00304 	addi	sp,sp,12
   21e30:	f800283a 	ret

00021e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21e34:	defff604 	addi	sp,sp,-40
   21e38:	dfc00915 	stw	ra,36(sp)
   21e3c:	df000815 	stw	fp,32(sp)
   21e40:	df000804 	addi	fp,sp,32
   21e44:	e13ffd15 	stw	r4,-12(fp)
   21e48:	e17ffe15 	stw	r5,-8(fp)
   21e4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21e50:	00bfffc4 	movi	r2,-1
   21e54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21e58:	00bffb44 	movi	r2,-19
   21e5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21e60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21e64:	01400134 	movhi	r5,4
   21e68:	2940cc04 	addi	r5,r5,816
   21e6c:	e13ffd17 	ldw	r4,-12(fp)
   21e70:	002203c0 	call	2203c <alt_find_dev>
   21e74:	e0bff815 	stw	r2,-32(fp)
   21e78:	e0bff817 	ldw	r2,-32(fp)
   21e7c:	1000051e 	bne	r2,zero,21e94 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21e80:	e13ffd17 	ldw	r4,-12(fp)
   21e84:	00220cc0 	call	220cc <alt_find_file>
   21e88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21e8c:	00800044 	movi	r2,1
   21e90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21e94:	e0bff817 	ldw	r2,-32(fp)
   21e98:	10002b26 	beq	r2,zero,21f48 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21e9c:	e13ff817 	ldw	r4,-32(fp)
   21ea0:	00221e00 	call	221e0 <alt_get_fd>
   21ea4:	e0bff915 	stw	r2,-28(fp)
   21ea8:	e0bff917 	ldw	r2,-28(fp)
   21eac:	1000030e 	bge	r2,zero,21ebc <open+0x88>
    {
      status = index;
   21eb0:	e0bff917 	ldw	r2,-28(fp)
   21eb4:	e0bffa15 	stw	r2,-24(fp)
   21eb8:	00002506 	br	21f50 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   21ebc:	01400304 	movi	r5,12
   21ec0:	e13ff917 	ldw	r4,-28(fp)
   21ec4:	0020f4c0 	call	20f4c <__mulsi3>
   21ec8:	1007883a 	mov	r3,r2
   21ecc:	00800134 	movhi	r2,4
   21ed0:	10806704 	addi	r2,r2,412
   21ed4:	1885883a 	add	r2,r3,r2
   21ed8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21edc:	e0fffe17 	ldw	r3,-8(fp)
   21ee0:	00900034 	movhi	r2,16384
   21ee4:	10bfffc4 	addi	r2,r2,-1
   21ee8:	1886703a 	and	r3,r3,r2
   21eec:	e0bffc17 	ldw	r2,-16(fp)
   21ef0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21ef4:	e0bffb17 	ldw	r2,-20(fp)
   21ef8:	1000051e 	bne	r2,zero,21f10 <open+0xdc>
   21efc:	e13ffc17 	ldw	r4,-16(fp)
   21f00:	0021d400 	call	21d40 <alt_file_locked>
   21f04:	e0bffa15 	stw	r2,-24(fp)
   21f08:	e0bffa17 	ldw	r2,-24(fp)
   21f0c:	10001016 	blt	r2,zero,21f50 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21f10:	e0bff817 	ldw	r2,-32(fp)
   21f14:	10800317 	ldw	r2,12(r2)
   21f18:	10000826 	beq	r2,zero,21f3c <open+0x108>
   21f1c:	e0bff817 	ldw	r2,-32(fp)
   21f20:	10800317 	ldw	r2,12(r2)
   21f24:	e1ffff17 	ldw	r7,-4(fp)
   21f28:	e1bffe17 	ldw	r6,-8(fp)
   21f2c:	e17ffd17 	ldw	r5,-12(fp)
   21f30:	e13ffc17 	ldw	r4,-16(fp)
   21f34:	103ee83a 	callr	r2
   21f38:	00000106 	br	21f40 <open+0x10c>
   21f3c:	0005883a 	mov	r2,zero
   21f40:	e0bffa15 	stw	r2,-24(fp)
   21f44:	00000206 	br	21f50 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21f48:	00bffb44 	movi	r2,-19
   21f4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21f50:	e0bffa17 	ldw	r2,-24(fp)
   21f54:	1000090e 	bge	r2,zero,21f7c <open+0x148>
  {
    alt_release_fd (index);  
   21f58:	e13ff917 	ldw	r4,-28(fp)
   21f5c:	0021f940 	call	21f94 <alt_release_fd>
    ALT_ERRNO = -status;
   21f60:	0021cf00 	call	21cf0 <alt_get_errno>
   21f64:	1007883a 	mov	r3,r2
   21f68:	e0bffa17 	ldw	r2,-24(fp)
   21f6c:	0085c83a 	sub	r2,zero,r2
   21f70:	18800015 	stw	r2,0(r3)
    return -1;
   21f74:	00bfffc4 	movi	r2,-1
   21f78:	00000106 	br	21f80 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   21f7c:	e0bff917 	ldw	r2,-28(fp)
}
   21f80:	e037883a 	mov	sp,fp
   21f84:	dfc00117 	ldw	ra,4(sp)
   21f88:	df000017 	ldw	fp,0(sp)
   21f8c:	dec00204 	addi	sp,sp,8
   21f90:	f800283a 	ret

00021f94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   21f94:	defffc04 	addi	sp,sp,-16
   21f98:	dfc00315 	stw	ra,12(sp)
   21f9c:	df000215 	stw	fp,8(sp)
   21fa0:	dc000115 	stw	r16,4(sp)
   21fa4:	df000204 	addi	fp,sp,8
   21fa8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   21fac:	e0bffe17 	ldw	r2,-8(fp)
   21fb0:	108000d0 	cmplti	r2,r2,3
   21fb4:	1000111e 	bne	r2,zero,21ffc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   21fb8:	04000134 	movhi	r16,4
   21fbc:	84006704 	addi	r16,r16,412
   21fc0:	e0bffe17 	ldw	r2,-8(fp)
   21fc4:	01400304 	movi	r5,12
   21fc8:	1009883a 	mov	r4,r2
   21fcc:	0020f4c0 	call	20f4c <__mulsi3>
   21fd0:	8085883a 	add	r2,r16,r2
   21fd4:	10800204 	addi	r2,r2,8
   21fd8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   21fdc:	04000134 	movhi	r16,4
   21fe0:	84006704 	addi	r16,r16,412
   21fe4:	e0bffe17 	ldw	r2,-8(fp)
   21fe8:	01400304 	movi	r5,12
   21fec:	1009883a 	mov	r4,r2
   21ff0:	0020f4c0 	call	20f4c <__mulsi3>
   21ff4:	8085883a 	add	r2,r16,r2
   21ff8:	10000015 	stw	zero,0(r2)
  }
}
   21ffc:	0001883a 	nop
   22000:	e6ffff04 	addi	sp,fp,-4
   22004:	dfc00217 	ldw	ra,8(sp)
   22008:	df000117 	ldw	fp,4(sp)
   2200c:	dc000017 	ldw	r16,0(sp)
   22010:	dec00304 	addi	sp,sp,12
   22014:	f800283a 	ret

00022018 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22018:	deffff04 	addi	sp,sp,-4
   2201c:	df000015 	stw	fp,0(sp)
   22020:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22024:	000170fa 	wrctl	ienable,zero
}
   22028:	0001883a 	nop
   2202c:	e037883a 	mov	sp,fp
   22030:	df000017 	ldw	fp,0(sp)
   22034:	dec00104 	addi	sp,sp,4
   22038:	f800283a 	ret

0002203c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2203c:	defffa04 	addi	sp,sp,-24
   22040:	dfc00515 	stw	ra,20(sp)
   22044:	df000415 	stw	fp,16(sp)
   22048:	df000404 	addi	fp,sp,16
   2204c:	e13ffe15 	stw	r4,-8(fp)
   22050:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22054:	e0bfff17 	ldw	r2,-4(fp)
   22058:	10800017 	ldw	r2,0(r2)
   2205c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22060:	e13ffe17 	ldw	r4,-8(fp)
   22064:	00206b80 	call	206b8 <strlen>
   22068:	10800044 	addi	r2,r2,1
   2206c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22070:	00000d06 	br	220a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22074:	e0bffc17 	ldw	r2,-16(fp)
   22078:	10800217 	ldw	r2,8(r2)
   2207c:	e0fffd17 	ldw	r3,-12(fp)
   22080:	180d883a 	mov	r6,r3
   22084:	e17ffe17 	ldw	r5,-8(fp)
   22088:	1009883a 	mov	r4,r2
   2208c:	00223840 	call	22384 <memcmp>
   22090:	1000021e 	bne	r2,zero,2209c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22094:	e0bffc17 	ldw	r2,-16(fp)
   22098:	00000706 	br	220b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2209c:	e0bffc17 	ldw	r2,-16(fp)
   220a0:	10800017 	ldw	r2,0(r2)
   220a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   220a8:	e0fffc17 	ldw	r3,-16(fp)
   220ac:	e0bfff17 	ldw	r2,-4(fp)
   220b0:	18bff01e 	bne	r3,r2,22074 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   220b4:	0005883a 	mov	r2,zero
}
   220b8:	e037883a 	mov	sp,fp
   220bc:	dfc00117 	ldw	ra,4(sp)
   220c0:	df000017 	ldw	fp,0(sp)
   220c4:	dec00204 	addi	sp,sp,8
   220c8:	f800283a 	ret

000220cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   220cc:	defffb04 	addi	sp,sp,-20
   220d0:	dfc00415 	stw	ra,16(sp)
   220d4:	df000315 	stw	fp,12(sp)
   220d8:	df000304 	addi	fp,sp,12
   220dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   220e0:	00800134 	movhi	r2,4
   220e4:	1080ca04 	addi	r2,r2,808
   220e8:	10800017 	ldw	r2,0(r2)
   220ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   220f0:	00003106 	br	221b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   220f4:	e0bffd17 	ldw	r2,-12(fp)
   220f8:	10800217 	ldw	r2,8(r2)
   220fc:	1009883a 	mov	r4,r2
   22100:	00206b80 	call	206b8 <strlen>
   22104:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22108:	e0bffd17 	ldw	r2,-12(fp)
   2210c:	10c00217 	ldw	r3,8(r2)
   22110:	e0bffe17 	ldw	r2,-8(fp)
   22114:	10bfffc4 	addi	r2,r2,-1
   22118:	1885883a 	add	r2,r3,r2
   2211c:	10800003 	ldbu	r2,0(r2)
   22120:	10803fcc 	andi	r2,r2,255
   22124:	1080201c 	xori	r2,r2,128
   22128:	10bfe004 	addi	r2,r2,-128
   2212c:	10800bd8 	cmpnei	r2,r2,47
   22130:	1000031e 	bne	r2,zero,22140 <alt_find_file+0x74>
    {
      len -= 1;
   22134:	e0bffe17 	ldw	r2,-8(fp)
   22138:	10bfffc4 	addi	r2,r2,-1
   2213c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22140:	e0bffe17 	ldw	r2,-8(fp)
   22144:	e0ffff17 	ldw	r3,-4(fp)
   22148:	1885883a 	add	r2,r3,r2
   2214c:	10800003 	ldbu	r2,0(r2)
   22150:	10803fcc 	andi	r2,r2,255
   22154:	1080201c 	xori	r2,r2,128
   22158:	10bfe004 	addi	r2,r2,-128
   2215c:	10800be0 	cmpeqi	r2,r2,47
   22160:	1000081e 	bne	r2,zero,22184 <alt_find_file+0xb8>
   22164:	e0bffe17 	ldw	r2,-8(fp)
   22168:	e0ffff17 	ldw	r3,-4(fp)
   2216c:	1885883a 	add	r2,r3,r2
   22170:	10800003 	ldbu	r2,0(r2)
   22174:	10803fcc 	andi	r2,r2,255
   22178:	1080201c 	xori	r2,r2,128
   2217c:	10bfe004 	addi	r2,r2,-128
   22180:	10000a1e 	bne	r2,zero,221ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   22184:	e0bffd17 	ldw	r2,-12(fp)
   22188:	10800217 	ldw	r2,8(r2)
   2218c:	e0fffe17 	ldw	r3,-8(fp)
   22190:	180d883a 	mov	r6,r3
   22194:	e17fff17 	ldw	r5,-4(fp)
   22198:	1009883a 	mov	r4,r2
   2219c:	00223840 	call	22384 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   221a0:	1000021e 	bne	r2,zero,221ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   221a4:	e0bffd17 	ldw	r2,-12(fp)
   221a8:	00000806 	br	221cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   221ac:	e0bffd17 	ldw	r2,-12(fp)
   221b0:	10800017 	ldw	r2,0(r2)
   221b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   221b8:	e0fffd17 	ldw	r3,-12(fp)
   221bc:	00800134 	movhi	r2,4
   221c0:	1080ca04 	addi	r2,r2,808
   221c4:	18bfcb1e 	bne	r3,r2,220f4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   221c8:	0005883a 	mov	r2,zero
}
   221cc:	e037883a 	mov	sp,fp
   221d0:	dfc00117 	ldw	ra,4(sp)
   221d4:	df000017 	ldw	fp,0(sp)
   221d8:	dec00204 	addi	sp,sp,8
   221dc:	f800283a 	ret

000221e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   221e0:	defffa04 	addi	sp,sp,-24
   221e4:	dfc00515 	stw	ra,20(sp)
   221e8:	df000415 	stw	fp,16(sp)
   221ec:	dc000315 	stw	r16,12(sp)
   221f0:	df000404 	addi	fp,sp,16
   221f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   221f8:	00bffa04 	movi	r2,-24
   221fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22200:	e03ffc15 	stw	zero,-16(fp)
   22204:	00002106 	br	2228c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   22208:	04000134 	movhi	r16,4
   2220c:	84006704 	addi	r16,r16,412
   22210:	e0bffc17 	ldw	r2,-16(fp)
   22214:	01400304 	movi	r5,12
   22218:	1009883a 	mov	r4,r2
   2221c:	0020f4c0 	call	20f4c <__mulsi3>
   22220:	8085883a 	add	r2,r16,r2
   22224:	10800017 	ldw	r2,0(r2)
   22228:	1000151e 	bne	r2,zero,22280 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2222c:	04000134 	movhi	r16,4
   22230:	84006704 	addi	r16,r16,412
   22234:	e0bffc17 	ldw	r2,-16(fp)
   22238:	01400304 	movi	r5,12
   2223c:	1009883a 	mov	r4,r2
   22240:	0020f4c0 	call	20f4c <__mulsi3>
   22244:	8085883a 	add	r2,r16,r2
   22248:	e0fffe17 	ldw	r3,-8(fp)
   2224c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22250:	00800134 	movhi	r2,4
   22254:	1080ce04 	addi	r2,r2,824
   22258:	10c00017 	ldw	r3,0(r2)
   2225c:	e0bffc17 	ldw	r2,-16(fp)
   22260:	1880040e 	bge	r3,r2,22274 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   22264:	00800134 	movhi	r2,4
   22268:	1080ce04 	addi	r2,r2,824
   2226c:	e0fffc17 	ldw	r3,-16(fp)
   22270:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   22274:	e0bffc17 	ldw	r2,-16(fp)
   22278:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2227c:	00000606 	br	22298 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22280:	e0bffc17 	ldw	r2,-16(fp)
   22284:	10800044 	addi	r2,r2,1
   22288:	e0bffc15 	stw	r2,-16(fp)
   2228c:	e0bffc17 	ldw	r2,-16(fp)
   22290:	10800810 	cmplti	r2,r2,32
   22294:	103fdc1e 	bne	r2,zero,22208 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22298:	e0bffd17 	ldw	r2,-12(fp)
}
   2229c:	e6ffff04 	addi	sp,fp,-4
   222a0:	dfc00217 	ldw	ra,8(sp)
   222a4:	df000117 	ldw	fp,4(sp)
   222a8:	dc000017 	ldw	r16,0(sp)
   222ac:	dec00304 	addi	sp,sp,12
   222b0:	f800283a 	ret

000222b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   222b4:	defffe04 	addi	sp,sp,-8
   222b8:	df000115 	stw	fp,4(sp)
   222bc:	df000104 	addi	fp,sp,4
   222c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   222c4:	e0bfff17 	ldw	r2,-4(fp)
   222c8:	10bffe84 	addi	r2,r2,-6
   222cc:	10c00428 	cmpgeui	r3,r2,16
   222d0:	18001a1e 	bne	r3,zero,2233c <alt_exception_cause_generated_bad_addr+0x88>
   222d4:	100690ba 	slli	r3,r2,2
   222d8:	008000b4 	movhi	r2,2
   222dc:	1088bb04 	addi	r2,r2,8940
   222e0:	1885883a 	add	r2,r3,r2
   222e4:	10800017 	ldw	r2,0(r2)
   222e8:	1000683a 	jmp	r2
   222ec:	0002232c 	andhi	zero,zero,2188
   222f0:	0002232c 	andhi	zero,zero,2188
   222f4:	0002233c 	xorhi	zero,zero,2188
   222f8:	0002233c 	xorhi	zero,zero,2188
   222fc:	0002233c 	xorhi	zero,zero,2188
   22300:	0002232c 	andhi	zero,zero,2188
   22304:	00022334 	movhi	zero,2188
   22308:	0002233c 	xorhi	zero,zero,2188
   2230c:	0002232c 	andhi	zero,zero,2188
   22310:	0002232c 	andhi	zero,zero,2188
   22314:	0002233c 	xorhi	zero,zero,2188
   22318:	0002232c 	andhi	zero,zero,2188
   2231c:	00022334 	movhi	zero,2188
   22320:	0002233c 	xorhi	zero,zero,2188
   22324:	0002233c 	xorhi	zero,zero,2188
   22328:	0002232c 	andhi	zero,zero,2188
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2232c:	00800044 	movi	r2,1
   22330:	00000306 	br	22340 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22334:	0005883a 	mov	r2,zero
   22338:	00000106 	br	22340 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2233c:	0005883a 	mov	r2,zero
  }
}
   22340:	e037883a 	mov	sp,fp
   22344:	df000017 	ldw	fp,0(sp)
   22348:	dec00104 	addi	sp,sp,4
   2234c:	f800283a 	ret

00022350 <atexit>:
   22350:	200b883a 	mov	r5,r4
   22354:	000f883a 	mov	r7,zero
   22358:	000d883a 	mov	r6,zero
   2235c:	0009883a 	mov	r4,zero
   22360:	00223b41 	jmpi	223b4 <__register_exitproc>

00022364 <exit>:
   22364:	defffe04 	addi	sp,sp,-8
   22368:	000b883a 	mov	r5,zero
   2236c:	dc000015 	stw	r16,0(sp)
   22370:	dfc00115 	stw	ra,4(sp)
   22374:	2021883a 	mov	r16,r4
   22378:	002250c0 	call	2250c <__call_exitprocs>
   2237c:	8009883a 	mov	r4,r16
   22380:	002269c0 	call	2269c <_exit>

00022384 <memcmp>:
   22384:	218d883a 	add	r6,r4,r6
   22388:	21800826 	beq	r4,r6,223ac <memcmp+0x28>
   2238c:	20800003 	ldbu	r2,0(r4)
   22390:	28c00003 	ldbu	r3,0(r5)
   22394:	10c00226 	beq	r2,r3,223a0 <memcmp+0x1c>
   22398:	10c5c83a 	sub	r2,r2,r3
   2239c:	f800283a 	ret
   223a0:	21000044 	addi	r4,r4,1
   223a4:	29400044 	addi	r5,r5,1
   223a8:	003ff706 	br	22388 <memcmp+0x4>
   223ac:	0005883a 	mov	r2,zero
   223b0:	f800283a 	ret

000223b4 <__register_exitproc>:
   223b4:	00800134 	movhi	r2,4
   223b8:	1080c704 	addi	r2,r2,796
   223bc:	10c00017 	ldw	r3,0(r2)
   223c0:	defff904 	addi	sp,sp,-28
   223c4:	dc000015 	stw	r16,0(sp)
   223c8:	1c000c17 	ldw	r16,48(r3)
   223cc:	dd400515 	stw	r21,20(sp)
   223d0:	dd000415 	stw	r20,16(sp)
   223d4:	dcc00315 	stw	r19,12(sp)
   223d8:	dc800215 	stw	r18,8(sp)
   223dc:	dc400115 	stw	r17,4(sp)
   223e0:	dfc00615 	stw	ra,24(sp)
   223e4:	202b883a 	mov	r21,r4
   223e8:	2823883a 	mov	r17,r5
   223ec:	3027883a 	mov	r19,r6
   223f0:	3825883a 	mov	r18,r7
   223f4:	1029883a 	mov	r20,r2
   223f8:	8000021e 	bne	r16,zero,22404 <__register_exitproc+0x50>
   223fc:	1c000d04 	addi	r16,r3,52
   22400:	1c000c15 	stw	r16,48(r3)
   22404:	80800117 	ldw	r2,4(r16)
   22408:	00c007c4 	movi	r3,31
   2240c:	1880110e 	bge	r3,r2,22454 <__register_exitproc+0xa0>
   22410:	00800034 	movhi	r2,0
   22414:	10800004 	addi	r2,r2,0
   22418:	1000021e 	bne	r2,zero,22424 <__register_exitproc+0x70>
   2241c:	00bfffc4 	movi	r2,-1
   22420:	00003106 	br	224e8 <__register_exitproc+0x134>
   22424:	01002304 	movi	r4,140
   22428:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2242c:	1021883a 	mov	r16,r2
   22430:	103ffa26 	beq	r2,zero,2241c <__register_exitproc+0x68>
   22434:	10000115 	stw	zero,4(r2)
   22438:	a0800017 	ldw	r2,0(r20)
   2243c:	10c00c17 	ldw	r3,48(r2)
   22440:	80c00015 	stw	r3,0(r16)
   22444:	14000c15 	stw	r16,48(r2)
   22448:	80002215 	stw	zero,136(r16)
   2244c:	a8001d26 	beq	r21,zero,224c4 <__register_exitproc+0x110>
   22450:	00000606 	br	2246c <__register_exitproc+0xb8>
   22454:	a8001b26 	beq	r21,zero,224c4 <__register_exitproc+0x110>
   22458:	80802217 	ldw	r2,136(r16)
   2245c:	1000091e 	bne	r2,zero,22484 <__register_exitproc+0xd0>
   22460:	00800034 	movhi	r2,0
   22464:	10800004 	addi	r2,r2,0
   22468:	103fec26 	beq	r2,zero,2241c <__register_exitproc+0x68>
   2246c:	01004204 	movi	r4,264
   22470:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22474:	103fe926 	beq	r2,zero,2241c <__register_exitproc+0x68>
   22478:	10004015 	stw	zero,256(r2)
   2247c:	10004115 	stw	zero,260(r2)
   22480:	80802215 	stw	r2,136(r16)
   22484:	81400117 	ldw	r5,4(r16)
   22488:	01000044 	movi	r4,1
   2248c:	2947883a 	add	r3,r5,r5
   22490:	18c7883a 	add	r3,r3,r3
   22494:	10c7883a 	add	r3,r2,r3
   22498:	1cc00015 	stw	r19,0(r3)
   2249c:	2148983a 	sll	r4,r4,r5
   224a0:	11404017 	ldw	r5,256(r2)
   224a4:	290ab03a 	or	r5,r5,r4
   224a8:	11404015 	stw	r5,256(r2)
   224ac:	1c802015 	stw	r18,128(r3)
   224b0:	00c00084 	movi	r3,2
   224b4:	a8c0031e 	bne	r21,r3,224c4 <__register_exitproc+0x110>
   224b8:	10c04117 	ldw	r3,260(r2)
   224bc:	1908b03a 	or	r4,r3,r4
   224c0:	11004115 	stw	r4,260(r2)
   224c4:	80800117 	ldw	r2,4(r16)
   224c8:	10c00044 	addi	r3,r2,1
   224cc:	10800084 	addi	r2,r2,2
   224d0:	1085883a 	add	r2,r2,r2
   224d4:	1085883a 	add	r2,r2,r2
   224d8:	80c00115 	stw	r3,4(r16)
   224dc:	80a1883a 	add	r16,r16,r2
   224e0:	84400015 	stw	r17,0(r16)
   224e4:	0005883a 	mov	r2,zero
   224e8:	dfc00617 	ldw	ra,24(sp)
   224ec:	dd400517 	ldw	r21,20(sp)
   224f0:	dd000417 	ldw	r20,16(sp)
   224f4:	dcc00317 	ldw	r19,12(sp)
   224f8:	dc800217 	ldw	r18,8(sp)
   224fc:	dc400117 	ldw	r17,4(sp)
   22500:	dc000017 	ldw	r16,0(sp)
   22504:	dec00704 	addi	sp,sp,28
   22508:	f800283a 	ret

0002250c <__call_exitprocs>:
   2250c:	defff504 	addi	sp,sp,-44
   22510:	dd000515 	stw	r20,20(sp)
   22514:	05000134 	movhi	r20,4
   22518:	dc800315 	stw	r18,12(sp)
   2251c:	dfc00a15 	stw	ra,40(sp)
   22520:	df000915 	stw	fp,36(sp)
   22524:	ddc00815 	stw	r23,32(sp)
   22528:	dd800715 	stw	r22,28(sp)
   2252c:	dd400615 	stw	r21,24(sp)
   22530:	dcc00415 	stw	r19,16(sp)
   22534:	dc400215 	stw	r17,8(sp)
   22538:	dc000115 	stw	r16,4(sp)
   2253c:	d9000015 	stw	r4,0(sp)
   22540:	2825883a 	mov	r18,r5
   22544:	a500c704 	addi	r20,r20,796
   22548:	a4400017 	ldw	r17,0(r20)
   2254c:	8cc00c17 	ldw	r19,48(r17)
   22550:	8c400c04 	addi	r17,r17,48
   22554:	98004526 	beq	r19,zero,2266c <__call_exitprocs+0x160>
   22558:	9c000117 	ldw	r16,4(r19)
   2255c:	00900034 	movhi	r2,16384
   22560:	10bfffc4 	addi	r2,r2,-1
   22564:	9d402217 	ldw	r21,136(r19)
   22568:	85bfffc4 	addi	r22,r16,-1
   2256c:	80a1883a 	add	r16,r16,r2
   22570:	8421883a 	add	r16,r16,r16
   22574:	8421883a 	add	r16,r16,r16
   22578:	ac2f883a 	add	r23,r21,r16
   2257c:	84000204 	addi	r16,r16,8
   22580:	9c21883a 	add	r16,r19,r16
   22584:	b0002716 	blt	r22,zero,22624 <__call_exitprocs+0x118>
   22588:	90000726 	beq	r18,zero,225a8 <__call_exitprocs+0x9c>
   2258c:	a800041e 	bne	r21,zero,225a0 <__call_exitprocs+0x94>
   22590:	b5bfffc4 	addi	r22,r22,-1
   22594:	bdffff04 	addi	r23,r23,-4
   22598:	843fff04 	addi	r16,r16,-4
   2259c:	003ff906 	br	22584 <__call_exitprocs+0x78>
   225a0:	b9002017 	ldw	r4,128(r23)
   225a4:	913ffa1e 	bne	r18,r4,22590 <__call_exitprocs+0x84>
   225a8:	99000117 	ldw	r4,4(r19)
   225ac:	82000017 	ldw	r8,0(r16)
   225b0:	213fffc4 	addi	r4,r4,-1
   225b4:	b100021e 	bne	r22,r4,225c0 <__call_exitprocs+0xb4>
   225b8:	9d800115 	stw	r22,4(r19)
   225bc:	00000106 	br	225c4 <__call_exitprocs+0xb8>
   225c0:	80000015 	stw	zero,0(r16)
   225c4:	403ff226 	beq	r8,zero,22590 <__call_exitprocs+0x84>
   225c8:	9f000117 	ldw	fp,4(r19)
   225cc:	a8000526 	beq	r21,zero,225e4 <__call_exitprocs+0xd8>
   225d0:	00800044 	movi	r2,1
   225d4:	1592983a 	sll	r9,r2,r22
   225d8:	a9404017 	ldw	r5,256(r21)
   225dc:	494a703a 	and	r5,r9,r5
   225e0:	2800021e 	bne	r5,zero,225ec <__call_exitprocs+0xe0>
   225e4:	403ee83a 	callr	r8
   225e8:	00000906 	br	22610 <__call_exitprocs+0x104>
   225ec:	a9004117 	ldw	r4,260(r21)
   225f0:	4908703a 	and	r4,r9,r4
   225f4:	2000041e 	bne	r4,zero,22608 <__call_exitprocs+0xfc>
   225f8:	b9400017 	ldw	r5,0(r23)
   225fc:	d9000017 	ldw	r4,0(sp)
   22600:	403ee83a 	callr	r8
   22604:	00000206 	br	22610 <__call_exitprocs+0x104>
   22608:	b9000017 	ldw	r4,0(r23)
   2260c:	403ee83a 	callr	r8
   22610:	99000117 	ldw	r4,4(r19)
   22614:	e13fcc1e 	bne	fp,r4,22548 <__call_exitprocs+0x3c>
   22618:	89000017 	ldw	r4,0(r17)
   2261c:	993fdc26 	beq	r19,r4,22590 <__call_exitprocs+0x84>
   22620:	003fc906 	br	22548 <__call_exitprocs+0x3c>
   22624:	00800034 	movhi	r2,0
   22628:	10800004 	addi	r2,r2,0
   2262c:	10000f26 	beq	r2,zero,2266c <__call_exitprocs+0x160>
   22630:	99400117 	ldw	r5,4(r19)
   22634:	99000017 	ldw	r4,0(r19)
   22638:	2800091e 	bne	r5,zero,22660 <__call_exitprocs+0x154>
   2263c:	20000826 	beq	r4,zero,22660 <__call_exitprocs+0x154>
   22640:	89000015 	stw	r4,0(r17)
   22644:	a8000226 	beq	r21,zero,22650 <__call_exitprocs+0x144>
   22648:	a809883a 	mov	r4,r21
   2264c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22650:	9809883a 	mov	r4,r19
   22654:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22658:	8cc00017 	ldw	r19,0(r17)
   2265c:	003fbd06 	br	22554 <__call_exitprocs+0x48>
   22660:	9823883a 	mov	r17,r19
   22664:	2027883a 	mov	r19,r4
   22668:	003fba06 	br	22554 <__call_exitprocs+0x48>
   2266c:	dfc00a17 	ldw	ra,40(sp)
   22670:	df000917 	ldw	fp,36(sp)
   22674:	ddc00817 	ldw	r23,32(sp)
   22678:	dd800717 	ldw	r22,28(sp)
   2267c:	dd400617 	ldw	r21,24(sp)
   22680:	dd000517 	ldw	r20,20(sp)
   22684:	dcc00417 	ldw	r19,16(sp)
   22688:	dc800317 	ldw	r18,12(sp)
   2268c:	dc400217 	ldw	r17,8(sp)
   22690:	dc000117 	ldw	r16,4(sp)
   22694:	dec00b04 	addi	sp,sp,44
   22698:	f800283a 	ret

0002269c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2269c:	defffd04 	addi	sp,sp,-12
   226a0:	df000215 	stw	fp,8(sp)
   226a4:	df000204 	addi	fp,sp,8
   226a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   226ac:	0001883a 	nop
   226b0:	e0bfff17 	ldw	r2,-4(fp)
   226b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   226b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   226bc:	10000226 	beq	r2,zero,226c8 <_exit+0x2c>
    ALT_SIM_FAIL();
   226c0:	002af070 	cmpltui	zero,zero,43969
   226c4:	00000106 	br	226cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   226c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   226cc:	003fff06 	br	226cc <_exit+0x30>
