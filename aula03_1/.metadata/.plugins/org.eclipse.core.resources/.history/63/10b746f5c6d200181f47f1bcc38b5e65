/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

char reversed;
int duty_cycle;
volatile int *edge_capture;
volatile int *prev_state;
volatile int *p_pio

//#define SIM

//int NAME_init( ..... );          // Inicializa o periférico
//int NAME_config( ..... );        // Configura o periférico
//int NAME_halt( ..... );          // Desativa o periférico
//int NAME_en_irq( ..... );        // Habilita interrupção
//int NAME_disable_irq( ..... );   // Desabilita interrupção
//int NAME_read_xxxxx( ..... );    // read data xxxx from device
//int NAME_write_xxxxx( ..... );   // write data to xxxx device

// LED Peripheral
#define LEDS_DATA_OFFSET  (1 << 1)
#define DUTY_CYCLE_OFFSET (1)
#define TIMER_OFFSET      (1 << 2)

#define DUTY_CYCLE_DEFAULT 0
#define TIMER_DEFAULT      0
#define LEDS_DATA_DEFAULT  0


void handle_button_interrupts(void *context, alt_u32 id)
{
	volatile int *p_pio_base = (volatile int *) p_pio
	volatile int *edge_capture_ptr = (volatile int *) context;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p_pio_base, 0x0);
	reversed = !reversed;
	printf("hello from interrupt -- %d\n", reversed);
}


int hbridge_disable_irq(unsigned *p_pio)
{
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p_pio, 0x0);
	return 0;
}

int hbridge_read_duty_cycle(unsigned *p_pio)
{
	return *(p_pio + DUTY_CYCLE_OFFSET);
}

int hbridge_write_duty_cycle(unsigned *p_pio, int dt)
{
	if (dt < 0) return 1;

	*(p_pio + DUTY_CYCLE_OFFSET) = dt;
	return 0;
}


int hbridge_enable_irq(unsigned *p_pio_base, unsigned *p_pio_irq)
{
	p_pio = p_pio_base;
	void *edge_capture_ptr = (void *) &edge_capture;
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p_pio_base, 0xf);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p_pio_base, 0x0);
	alt_irq_register(p_pio_irq, edge_capture_ptr,
			handle_button_interrupts);
	return 0;
}

int hbridge_halt(unsigned *p_avalon, unsigned *p_pio)
{
	*(p_avalon + DUTY_CYCLE_OFFSET) = 0;

}

int hbridge_init(unsigned *p_avalon, int dc, int timer, char rev,
		unsigned leds, unsigned *p_pio_base, unsigned *p_pio_irq) {
	*(p_avalon + DUTY_CYCLE_OFFSET) = dc;
	*(p_avalon + TIMER_OFFSET) = timer;
	*(p_avalon + LEDS_DATA_OFFSET) = leds;
	reversed = rev;
	hbridge_enable_irq(p_pio_base, p_pio_irq);
	return 0;
}

int main(void){
  int led = 0;
  unsigned int *p_avalon = (unsigned int *) PERIPHERAL_LED_0_BASE;

  *prev_state = 0;
  hbridge_init(p_avalon, 300, 15, 0, 15, PIO_1_BASE, PIO_1_IRQ);

#ifndef SIM
  printf("Embarcados++ \n");
#endif

  int dc = 0;
  while(1) {
	  hbridge_init(dc, 15, 0);
#ifndef SIM
          usleep(1000000 >> p_avalon[DUTY_CYCLE_OFFSET]); // remover durante a simulação
#endif

	  printf("%d\n", dc);
  };

  return 0;
}
