
pfjesuss.elf:     file format elf32-littlenios2
pfjesuss.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004d78 memsz 0x00004d78 flags r-x
    LOAD off    0x00006000 vaddr 0x00040000 paddr 0x00024d98 align 2**12
         filesz 0x00000a30 memsz 0x00000b84 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004b1c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00024d4c  00024d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a30  00040000  00024d98  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00040a30  000257c8  00006a30  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000257c8  000257c8  00006a30  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00040b84  00040b84  00006a30  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000970  00000000  00000000  00006a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015003  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000056ef  00000000  00000000  0001c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000630d  00000000  00000000  00021aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000133c  00000000  00000000  00027dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000024f6  00000000  00000000  00029104  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a51  00000000  00000000  0002b5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003004c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000650  00000000  00000000  00030060  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000328ce  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000328d1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000328dd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000328de  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000328df  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000328ea  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000328f5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00032900  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000027  00000000  00000000  00032909  2**0
                  CONTENTS, READONLY
 27 .jdi          0000404c  00000000  00000000  00032930  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041ee4  00000000  00000000  0003697c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00024d4c l    d  .rodata	00000000 .rodata
00040000 l    d  .rwdata	00000000 .rwdata
00040a30 l    d  .bss	00000000 .bss
000257c8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00040b84 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pfjesuss_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020548 l     F .text	00000008 __fp_unlock
0002055c l     F .text	0000019c __sinit.part.1
000206f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00040000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000231e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023310 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002333c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000235f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000236f0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000237dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000239cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00040a2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023c54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023da4 l     F .text	00000038 alt_dev_reg
000409d4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000240a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002427c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000243dc l     F .text	00000050 alt_get_errno
0002442c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00040a58 g     O .bss	00000004 alt_instruction_exception_handler
00022fb8 g     F .text	00000054 _isatty_r
00023908 g     F .text	0000007c alt_main
000203dc g     F .text	000000c0 _puts_r
00040a84 g     O .bss	00000100 alt_irq
00022ce0 g     F .text	00000060 _lseek_r
00024d98 g       *ABS*	00000000 __flash_rwdata_start
00040b84 g       *ABS*	00000000 __alt_heap_start
00022294 g     F .text	0000005c __sseek
000208a8 g     F .text	00000010 __sinit
00020700 g     F .text	00000078 __sfmoreglue
000239a8 g     F .text	00000024 __malloc_unlock
00021980 g     F .text	0000015c memmove
00020890 g     F .text	00000018 _cleanup
00040a30 g     O .bss	00000004 n
00024680 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00040a34 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022f5c g     F .text	0000005c _fstat_r
00040a44 g     O .bss	00000004 errno
00022210 g     F .text	00000008 __seofread
00040a50 g     O .bss	00000004 alt_argv
00048a00 g       *ABS*	00000000 _gp
00040854 g     O .rwdata	00000180 alt_fd_list
000246a4 g     F .text	00000090 alt_find_dev
00021838 g     F .text	00000148 memcpy
00020550 g     F .text	0000000c _cleanup_r
00024360 g     F .text	0000007c alt_io_redirect
00024d4c g       *ABS*	00000000 __DTOR_END__
0002049c g     F .text	00000014 puts
0002491c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023f08 g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023104 g     F .text	00000064 .hidden __udivsi3
00023644 g     F .text	000000ac isatty
00040a40 g     O .bss	00000004 __malloc_top_pad
000208f8 g     F .text	000004c8 __sfvwrite_r
00022168 g     F .text	00000054 _sbrk_r
00022efc g     F .text	00000060 _read_r
00040a20 g     O .rwdata	00000004 alt_max_fd
00022500 g     F .text	000000f0 _fclose_r
0002287c g     F .text	00000030 fflush
00040a3c g     O .bss	00000004 __malloc_max_sbrked_mem
00023444 g     F .text	000001b0 alt_irq_register
0002382c g     F .text	000000dc lseek
00040a00 g     O .rwdata	00000004 _global_impure_ptr
00021c04 g     F .text	00000564 _realloc_r
00040b84 g       *ABS*	00000000 __bss_end
000208c8 g     F .text	00000018 __fp_lock_all
00040a48 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0004082c g     O .rwdata	00000028 alt_dev_null
00024088 g     F .text	00000020 alt_dcache_flush_all
00040a30 g       *ABS*	00000000 __ram_rwdata_end
00040a18 g     O .rwdata	00000008 alt_dev_list
00023ca4 g     F .text	00000100 write
00024d98 g       *ABS*	00000000 __ram_rodata_end
0002338c g     F .text	000000b8 fstat
00023168 g     F .text	00000058 .hidden __umodsi3
00040b84 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020374 g     F .text	00000068 init_pio
00024d4c g       *ABS*	00000000 __CTOR_LIST__
0005f400 g       *ABS*	00000000 __alt_stack_pointer
00023ff4 g     F .text	00000094 altera_avalon_jtag_uart_write
000208b8 g     F .text	00000004 __sfp_lock_acquire
00021754 g     F .text	000000e4 memchr
000229d0 g     F .text	00000310 _free_r
00024b98 g     F .text	00000180 __call_exitprocs
00040a08 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00023a1c g     F .text	00000104 read
00023e14 g     F .text	00000034 alt_sys_init
00024a80 g     F .text	00000118 __register_exitproc
000231c0 g     F .text	00000028 .hidden __mulsi3
00040000 g       *ABS*	00000000 __ram_rwdata_start
00024d4c g       *ABS*	00000000 __ram_rodata_start
00040a5c g     O .bss	00000028 __malloc_current_mallinfo
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00023e48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024848 g     F .text	000000d4 alt_get_fd
000224ac g     F .text	00000054 _close_r
00024a04 g     F .text	0000007c memcmp
00040b84 g       *ABS*	00000000 __alt_stack_base
00022358 g     F .text	00000154 __swsetup_r
00020778 g     F .text	00000118 __sfp
00040424 g     O .rwdata	00000408 __malloc_av_
000208c4 g     F .text	00000004 __sinit_lock_release
000221bc g     F .text	00000054 __sread
00024734 g     F .text	00000114 alt_find_file
000240f8 g     F .text	000000a4 alt_dev_llist_insert
00023984 g     F .text	00000024 __malloc_lock
00023ba4 g     F .text	000000b0 sbrk
00022820 g     F .text	0000005c _fflush_r
00040a30 g       *ABS*	00000000 __bss_start
00021adc g     F .text	00000128 memset
0002026c g     F .text	0000003c main
00040a54 g     O .bss	00000004 alt_envp
00040a38 g     O .bss	00000004 __malloc_max_total_mem
00023ea8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000222f0 g     F .text	00000008 __sclose
0005f400 g       *ABS*	00000000 __alt_heap_limit
000225f0 g     F .text	00000014 fclose
00020f48 g     F .text	0000080c _malloc_r
00040a24 g     O .rwdata	00000004 alt_errno
00020dc0 g     F .text	000000c4 _fwalk
0002300c g     F .text	00000084 .hidden __divsi3
000228ac g     F .text	00000124 _malloc_trim_r
00024d4c g       *ABS*	00000000 __CTOR_END__
00024d4c g       *ABS*	00000000 __flash_rodata_start
00024d4c g       *ABS*	00000000 __DTOR_LIST__
000202a8 g     F .text	00000044 delay
00023ddc g     F .text	00000038 alt_irq_init
00023b20 g     F .text	00000084 alt_release_fd
000249b8 g     F .text	00000014 atexit
000222f8 g     F .text	00000060 _write_r
00040a04 g     O .rwdata	00000004 _impure_ptr
00040a4c g     O .bss	00000004 alt_argc
00022604 g     F .text	0000021c __sflush_r
000241fc g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000208e0 g     F .text	00000018 __fp_unlock_all
00040a10 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00040a30 g       *ABS*	00000000 _edata
00040b84 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00022218 g     F .text	0000007c __swrite
00040a0c g     O .rwdata	00000004 __malloc_trim_threshold
000249cc g     F .text	00000038 exit
00020e84 g     F .text	000000c4 _fwalk_reent
00023090 g     F .text	00000074 .hidden __modsi3
0005f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000208bc g     F .text	00000004 __sfp_lock_release
00024d18 g     F .text	00000034 _exit
00022d40 g     F .text	000001bc __smakebuf_r
000204b0 g     F .text	00000098 strlen
00024520 g     F .text	00000160 open
0002425c g     F .text	00000020 alt_icache_flush_all
00040a28 g     O .rwdata	00000004 alt_priority_mask
0002419c g     F .text	00000060 _do_ctors
000202ec g     F .text	00000088 handle_button_interrupts
00023238 g     F .text	000000d8 close
00023758 g     F .text	00000084 alt_load
000208c0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	1082a104 	addi	r2,r2,2692
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	1082a104 	addi	r2,r2,2692
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01617 	ldw	r2,-32680(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01617 	ldw	r2,-32680(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2023c:	d6a28014 	ori	gp,gp,35328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20244:	10828c14 	ori	r2,r2,2608

    movhi r3, %hi(__bss_end)
   20248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2024c:	18c2e114 	ori	r3,r3,2948

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00237580 	call	23758 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00239080 	call	23908 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <alt_after_alt_main>

0002026c <main>:
int n = 0;
volatile int* edge_capture;

void init_pio();

int main(void){
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	dfc00315 	stw	ra,12(sp)
   20274:	df000215 	stw	fp,8(sp)
   20278:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   2027c:	e03ffe15 	stw	zero,-8(fp)
  int n = 0;
   20280:	e03fff15 	stw	zero,-4(fp)

  init_pio();
   20284:	00203740 	call	20374 <init_pio>

  printf("Embarcados++ \n");
   20288:	010000b4 	movhi	r4,2
   2028c:	21135304 	addi	r4,r4,19788
   20290:	002049c0 	call	2049c <puts>

  while(1){
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, n);
   20294:	008001b4 	movhi	r2,6
   20298:	10840c04 	addi	r2,r2,4144
   2029c:	e0ffff17 	ldw	r3,-4(fp)
   202a0:	10c00035 	stwio	r3,0(r2)
//	  int value = IORD_32DIRECT(PIO_1_BASE, 0);
//	  IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << value);
//	  usleep(50000);
  };
   202a4:	003ffb06 	br	20294 <main+0x28>

000202a8 <delay>:

  return 0;
}


void delay(int n){
   202a8:	defffd04 	addi	sp,sp,-12
   202ac:	df000215 	stw	fp,8(sp)
   202b0:	df000204 	addi	fp,sp,8
   202b4:	e13fff15 	stw	r4,-4(fp)
	unsigned int delay = 0 ;
   202b8:	e03ffe15 	stw	zero,-8(fp)
	while(delay < n){
   202bc:	00000306 	br	202cc <delay+0x24>
		delay++;
   202c0:	e0bffe17 	ldw	r2,-8(fp)
   202c4:	10800044 	addi	r2,r2,1
   202c8:	e0bffe15 	stw	r2,-8(fp)
}


void delay(int n){
	unsigned int delay = 0 ;
	while(delay < n){
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	e0fffe17 	ldw	r3,-8(fp)
   202d4:	18bffa36 	bltu	r3,r2,202c0 <delay+0x18>
		delay++;
	}
}
   202d8:	0001883a 	nop
   202dc:	e037883a 	mov	sp,fp
   202e0:	df000017 	ldw	fp,0(sp)
   202e4:	dec00104 	addi	sp,sp,4
   202e8:	f800283a 	ret

000202ec <handle_button_interrupts>:

void handle_button_interrupts(void* context, alt_u32 id)
{
   202ec:	defffb04 	addi	sp,sp,-20
   202f0:	df000415 	stw	fp,16(sp)
   202f4:	df000404 	addi	fp,sp,16
   202f8:	e13ffe15 	stw	r4,-8(fp)
   202fc:	e17fff15 	stw	r5,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
   20300:	e0bffe17 	ldw	r2,-8(fp)
   20304:	e0bffc15 	stw	r2,-16(fp)
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE);
   20308:	008001b4 	movhi	r2,6
   2030c:	10840f04 	addi	r2,r2,4156
   20310:	10c00037 	ldwio	r3,0(r2)
   20314:	e0bffc17 	ldw	r2,-16(fp)
   20318:	10c00015 	stw	r3,0(r2)
    n++;
   2031c:	d0a00c17 	ldw	r2,-32720(gp)
   20320:	10800044 	addi	r2,r2,1
   20324:	d0a00c15 	stw	r2,-32720(gp)
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
   20328:	0007883a 	mov	r3,zero
   2032c:	008001b4 	movhi	r2,6
   20330:	10840f04 	addi	r2,r2,4156
   20334:	10c00035 	stwio	r3,0(r2)
    int value = IORD_32DIRECT(PIO_1_BASE, 0);
   20338:	008001b4 	movhi	r2,6
   2033c:	10840804 	addi	r2,r2,4128
   20340:	10800037 	ldwio	r2,0(r2)
   20344:	e0bffd15 	stw	r2,-12(fp)
	IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << value);
   20348:	00c00044 	movi	r3,1
   2034c:	e0bffd17 	ldw	r2,-12(fp)
   20350:	1886983a 	sll	r3,r3,r2
   20354:	008001b4 	movhi	r2,6
   20358:	10840c04 	addi	r2,r2,4144
   2035c:	10c00035 	stwio	r3,0(r2)
}
   20360:	0001883a 	nop
   20364:	e037883a 	mov	sp,fp
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00104 	addi	sp,sp,4
   20370:	f800283a 	ret

00020374 <init_pio>:

/* Initialize the pio. */
void init_pio()
{
   20374:	defffd04 	addi	sp,sp,-12
   20378:	dfc00215 	stw	ra,8(sp)
   2037c:	df000115 	stw	fp,4(sp)
   20380:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
   20384:	00800134 	movhi	r2,4
   20388:	10828d04 	addi	r2,r2,2612
   2038c:	e0bfff15 	stw	r2,-4(fp)
    /* Enable first four interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
   20390:	00c003c4 	movi	r3,15
   20394:	008001b4 	movhi	r2,6
   20398:	10840a04 	addi	r2,r2,4136
   2039c:	10c00035 	stwio	r3,0(r2)
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   203a0:	0007883a 	mov	r3,zero
   203a4:	008001b4 	movhi	r2,6
   203a8:	10840b04 	addi	r2,r2,4140
   203ac:	10c00035 	stwio	r3,0(r2)
    /* Register the interrupt handler. */
    alt_irq_register( PIO_1_IRQ, edge_capture_ptr,
   203b0:	018000b4 	movhi	r6,2
   203b4:	3180bb04 	addi	r6,r6,748
   203b8:	e17fff17 	ldw	r5,-4(fp)
   203bc:	0009883a 	mov	r4,zero
   203c0:	00234440 	call	23444 <alt_irq_register>
                      handle_button_interrupts );
}
   203c4:	0001883a 	nop
   203c8:	e037883a 	mov	sp,fp
   203cc:	dfc00117 	ldw	ra,4(sp)
   203d0:	df000017 	ldw	fp,0(sp)
   203d4:	dec00204 	addi	sp,sp,8
   203d8:	f800283a 	ret

000203dc <_puts_r>:
   203dc:	defff604 	addi	sp,sp,-40
   203e0:	dc000715 	stw	r16,28(sp)
   203e4:	2021883a 	mov	r16,r4
   203e8:	2809883a 	mov	r4,r5
   203ec:	dc400815 	stw	r17,32(sp)
   203f0:	dfc00915 	stw	ra,36(sp)
   203f4:	2823883a 	mov	r17,r5
   203f8:	00204b00 	call	204b0 <strlen>
   203fc:	10c00044 	addi	r3,r2,1
   20400:	d8800115 	stw	r2,4(sp)
   20404:	008000b4 	movhi	r2,2
   20408:	10935704 	addi	r2,r2,19804
   2040c:	d8800215 	stw	r2,8(sp)
   20410:	00800044 	movi	r2,1
   20414:	d8800315 	stw	r2,12(sp)
   20418:	00800084 	movi	r2,2
   2041c:	dc400015 	stw	r17,0(sp)
   20420:	d8c00615 	stw	r3,24(sp)
   20424:	dec00415 	stw	sp,16(sp)
   20428:	d8800515 	stw	r2,20(sp)
   2042c:	80000226 	beq	r16,zero,20438 <_puts_r+0x5c>
   20430:	80800e17 	ldw	r2,56(r16)
   20434:	10001426 	beq	r2,zero,20488 <_puts_r+0xac>
   20438:	81400217 	ldw	r5,8(r16)
   2043c:	2880030b 	ldhu	r2,12(r5)
   20440:	10c8000c 	andi	r3,r2,8192
   20444:	1800061e 	bne	r3,zero,20460 <_puts_r+0x84>
   20448:	29001917 	ldw	r4,100(r5)
   2044c:	00f7ffc4 	movi	r3,-8193
   20450:	10880014 	ori	r2,r2,8192
   20454:	20c6703a 	and	r3,r4,r3
   20458:	2880030d 	sth	r2,12(r5)
   2045c:	28c01915 	stw	r3,100(r5)
   20460:	d9800404 	addi	r6,sp,16
   20464:	8009883a 	mov	r4,r16
   20468:	00208f80 	call	208f8 <__sfvwrite_r>
   2046c:	1000091e 	bne	r2,zero,20494 <_puts_r+0xb8>
   20470:	00800284 	movi	r2,10
   20474:	dfc00917 	ldw	ra,36(sp)
   20478:	dc400817 	ldw	r17,32(sp)
   2047c:	dc000717 	ldw	r16,28(sp)
   20480:	dec00a04 	addi	sp,sp,40
   20484:	f800283a 	ret
   20488:	8009883a 	mov	r4,r16
   2048c:	00208a80 	call	208a8 <__sinit>
   20490:	003fe906 	br	20438 <_puts_r+0x5c>
   20494:	00bfffc4 	movi	r2,-1
   20498:	003ff606 	br	20474 <_puts_r+0x98>

0002049c <puts>:
   2049c:	00800134 	movhi	r2,4
   204a0:	10828104 	addi	r2,r2,2564
   204a4:	200b883a 	mov	r5,r4
   204a8:	11000017 	ldw	r4,0(r2)
   204ac:	00203dc1 	jmpi	203dc <_puts_r>

000204b0 <strlen>:
   204b0:	208000cc 	andi	r2,r4,3
   204b4:	10002026 	beq	r2,zero,20538 <strlen+0x88>
   204b8:	20800007 	ldb	r2,0(r4)
   204bc:	10002026 	beq	r2,zero,20540 <strlen+0x90>
   204c0:	2005883a 	mov	r2,r4
   204c4:	00000206 	br	204d0 <strlen+0x20>
   204c8:	10c00007 	ldb	r3,0(r2)
   204cc:	18001826 	beq	r3,zero,20530 <strlen+0x80>
   204d0:	10800044 	addi	r2,r2,1
   204d4:	10c000cc 	andi	r3,r2,3
   204d8:	183ffb1e 	bne	r3,zero,204c8 <strlen+0x18>
   204dc:	10c00017 	ldw	r3,0(r2)
   204e0:	01ffbff4 	movhi	r7,65279
   204e4:	39ffbfc4 	addi	r7,r7,-257
   204e8:	00ca303a 	nor	r5,zero,r3
   204ec:	01a02074 	movhi	r6,32897
   204f0:	19c7883a 	add	r3,r3,r7
   204f4:	31a02004 	addi	r6,r6,-32640
   204f8:	1946703a 	and	r3,r3,r5
   204fc:	1986703a 	and	r3,r3,r6
   20500:	1800091e 	bne	r3,zero,20528 <strlen+0x78>
   20504:	10800104 	addi	r2,r2,4
   20508:	10c00017 	ldw	r3,0(r2)
   2050c:	19cb883a 	add	r5,r3,r7
   20510:	00c6303a 	nor	r3,zero,r3
   20514:	28c6703a 	and	r3,r5,r3
   20518:	1986703a 	and	r3,r3,r6
   2051c:	183ff926 	beq	r3,zero,20504 <strlen+0x54>
   20520:	00000106 	br	20528 <strlen+0x78>
   20524:	10800044 	addi	r2,r2,1
   20528:	10c00007 	ldb	r3,0(r2)
   2052c:	183ffd1e 	bne	r3,zero,20524 <strlen+0x74>
   20530:	1105c83a 	sub	r2,r2,r4
   20534:	f800283a 	ret
   20538:	2005883a 	mov	r2,r4
   2053c:	003fe706 	br	204dc <strlen+0x2c>
   20540:	0005883a 	mov	r2,zero
   20544:	f800283a 	ret

00020548 <__fp_unlock>:
   20548:	0005883a 	mov	r2,zero
   2054c:	f800283a 	ret

00020550 <_cleanup_r>:
   20550:	014000b4 	movhi	r5,2
   20554:	29494004 	addi	r5,r5,9472
   20558:	0020e841 	jmpi	20e84 <_fwalk_reent>

0002055c <__sinit.part.1>:
   2055c:	defff704 	addi	sp,sp,-36
   20560:	00c000b4 	movhi	r3,2
   20564:	dfc00815 	stw	ra,32(sp)
   20568:	ddc00715 	stw	r23,28(sp)
   2056c:	dd800615 	stw	r22,24(sp)
   20570:	dd400515 	stw	r21,20(sp)
   20574:	dd000415 	stw	r20,16(sp)
   20578:	dcc00315 	stw	r19,12(sp)
   2057c:	dc800215 	stw	r18,8(sp)
   20580:	dc400115 	stw	r17,4(sp)
   20584:	dc000015 	stw	r16,0(sp)
   20588:	18c15404 	addi	r3,r3,1360
   2058c:	24000117 	ldw	r16,4(r4)
   20590:	20c00f15 	stw	r3,60(r4)
   20594:	2080bb04 	addi	r2,r4,748
   20598:	00c000c4 	movi	r3,3
   2059c:	20c0b915 	stw	r3,740(r4)
   205a0:	2080ba15 	stw	r2,744(r4)
   205a4:	2000b815 	stw	zero,736(r4)
   205a8:	05c00204 	movi	r23,8
   205ac:	00800104 	movi	r2,4
   205b0:	2025883a 	mov	r18,r4
   205b4:	b80d883a 	mov	r6,r23
   205b8:	81001704 	addi	r4,r16,92
   205bc:	000b883a 	mov	r5,zero
   205c0:	80000015 	stw	zero,0(r16)
   205c4:	80000115 	stw	zero,4(r16)
   205c8:	80000215 	stw	zero,8(r16)
   205cc:	8080030d 	sth	r2,12(r16)
   205d0:	80001915 	stw	zero,100(r16)
   205d4:	8000038d 	sth	zero,14(r16)
   205d8:	80000415 	stw	zero,16(r16)
   205dc:	80000515 	stw	zero,20(r16)
   205e0:	80000615 	stw	zero,24(r16)
   205e4:	0021adc0 	call	21adc <memset>
   205e8:	058000b4 	movhi	r22,2
   205ec:	94400217 	ldw	r17,8(r18)
   205f0:	054000b4 	movhi	r21,2
   205f4:	050000b4 	movhi	r20,2
   205f8:	04c000b4 	movhi	r19,2
   205fc:	b5886f04 	addi	r22,r22,8636
   20600:	ad488604 	addi	r21,r21,8728
   20604:	a508a504 	addi	r20,r20,8852
   20608:	9cc8bc04 	addi	r19,r19,8944
   2060c:	85800815 	stw	r22,32(r16)
   20610:	85400915 	stw	r21,36(r16)
   20614:	85000a15 	stw	r20,40(r16)
   20618:	84c00b15 	stw	r19,44(r16)
   2061c:	84000715 	stw	r16,28(r16)
   20620:	00800284 	movi	r2,10
   20624:	8880030d 	sth	r2,12(r17)
   20628:	00800044 	movi	r2,1
   2062c:	b80d883a 	mov	r6,r23
   20630:	89001704 	addi	r4,r17,92
   20634:	000b883a 	mov	r5,zero
   20638:	88000015 	stw	zero,0(r17)
   2063c:	88000115 	stw	zero,4(r17)
   20640:	88000215 	stw	zero,8(r17)
   20644:	88001915 	stw	zero,100(r17)
   20648:	8880038d 	sth	r2,14(r17)
   2064c:	88000415 	stw	zero,16(r17)
   20650:	88000515 	stw	zero,20(r17)
   20654:	88000615 	stw	zero,24(r17)
   20658:	0021adc0 	call	21adc <memset>
   2065c:	94000317 	ldw	r16,12(r18)
   20660:	00800484 	movi	r2,18
   20664:	8c400715 	stw	r17,28(r17)
   20668:	8d800815 	stw	r22,32(r17)
   2066c:	8d400915 	stw	r21,36(r17)
   20670:	8d000a15 	stw	r20,40(r17)
   20674:	8cc00b15 	stw	r19,44(r17)
   20678:	8080030d 	sth	r2,12(r16)
   2067c:	00800084 	movi	r2,2
   20680:	80000015 	stw	zero,0(r16)
   20684:	80000115 	stw	zero,4(r16)
   20688:	80000215 	stw	zero,8(r16)
   2068c:	80001915 	stw	zero,100(r16)
   20690:	8080038d 	sth	r2,14(r16)
   20694:	80000415 	stw	zero,16(r16)
   20698:	80000515 	stw	zero,20(r16)
   2069c:	80000615 	stw	zero,24(r16)
   206a0:	b80d883a 	mov	r6,r23
   206a4:	000b883a 	mov	r5,zero
   206a8:	81001704 	addi	r4,r16,92
   206ac:	0021adc0 	call	21adc <memset>
   206b0:	00800044 	movi	r2,1
   206b4:	84000715 	stw	r16,28(r16)
   206b8:	85800815 	stw	r22,32(r16)
   206bc:	85400915 	stw	r21,36(r16)
   206c0:	85000a15 	stw	r20,40(r16)
   206c4:	84c00b15 	stw	r19,44(r16)
   206c8:	90800e15 	stw	r2,56(r18)
   206cc:	dfc00817 	ldw	ra,32(sp)
   206d0:	ddc00717 	ldw	r23,28(sp)
   206d4:	dd800617 	ldw	r22,24(sp)
   206d8:	dd400517 	ldw	r21,20(sp)
   206dc:	dd000417 	ldw	r20,16(sp)
   206e0:	dcc00317 	ldw	r19,12(sp)
   206e4:	dc800217 	ldw	r18,8(sp)
   206e8:	dc400117 	ldw	r17,4(sp)
   206ec:	dc000017 	ldw	r16,0(sp)
   206f0:	dec00904 	addi	sp,sp,36
   206f4:	f800283a 	ret

000206f8 <__fp_lock>:
   206f8:	0005883a 	mov	r2,zero
   206fc:	f800283a 	ret

00020700 <__sfmoreglue>:
   20700:	defffc04 	addi	sp,sp,-16
   20704:	dc800215 	stw	r18,8(sp)
   20708:	2825883a 	mov	r18,r5
   2070c:	dc000015 	stw	r16,0(sp)
   20710:	01401a04 	movi	r5,104
   20714:	2021883a 	mov	r16,r4
   20718:	913fffc4 	addi	r4,r18,-1
   2071c:	dfc00315 	stw	ra,12(sp)
   20720:	dc400115 	stw	r17,4(sp)
   20724:	00231c00 	call	231c0 <__mulsi3>
   20728:	8009883a 	mov	r4,r16
   2072c:	11401d04 	addi	r5,r2,116
   20730:	1023883a 	mov	r17,r2
   20734:	0020f480 	call	20f48 <_malloc_r>
   20738:	1021883a 	mov	r16,r2
   2073c:	10000726 	beq	r2,zero,2075c <__sfmoreglue+0x5c>
   20740:	11000304 	addi	r4,r2,12
   20744:	10000015 	stw	zero,0(r2)
   20748:	14800115 	stw	r18,4(r2)
   2074c:	11000215 	stw	r4,8(r2)
   20750:	89801a04 	addi	r6,r17,104
   20754:	000b883a 	mov	r5,zero
   20758:	0021adc0 	call	21adc <memset>
   2075c:	8005883a 	mov	r2,r16
   20760:	dfc00317 	ldw	ra,12(sp)
   20764:	dc800217 	ldw	r18,8(sp)
   20768:	dc400117 	ldw	r17,4(sp)
   2076c:	dc000017 	ldw	r16,0(sp)
   20770:	dec00404 	addi	sp,sp,16
   20774:	f800283a 	ret

00020778 <__sfp>:
   20778:	defffb04 	addi	sp,sp,-20
   2077c:	dc000015 	stw	r16,0(sp)
   20780:	04000134 	movhi	r16,4
   20784:	84028004 	addi	r16,r16,2560
   20788:	dcc00315 	stw	r19,12(sp)
   2078c:	2027883a 	mov	r19,r4
   20790:	81000017 	ldw	r4,0(r16)
   20794:	dfc00415 	stw	ra,16(sp)
   20798:	dc800215 	stw	r18,8(sp)
   2079c:	20800e17 	ldw	r2,56(r4)
   207a0:	dc400115 	stw	r17,4(sp)
   207a4:	1000021e 	bne	r2,zero,207b0 <__sfp+0x38>
   207a8:	002055c0 	call	2055c <__sinit.part.1>
   207ac:	81000017 	ldw	r4,0(r16)
   207b0:	2480b804 	addi	r18,r4,736
   207b4:	047fffc4 	movi	r17,-1
   207b8:	91000117 	ldw	r4,4(r18)
   207bc:	94000217 	ldw	r16,8(r18)
   207c0:	213fffc4 	addi	r4,r4,-1
   207c4:	20000a16 	blt	r4,zero,207f0 <__sfp+0x78>
   207c8:	8080030f 	ldh	r2,12(r16)
   207cc:	10000c26 	beq	r2,zero,20800 <__sfp+0x88>
   207d0:	80c01d04 	addi	r3,r16,116
   207d4:	00000206 	br	207e0 <__sfp+0x68>
   207d8:	18bfe60f 	ldh	r2,-104(r3)
   207dc:	10000826 	beq	r2,zero,20800 <__sfp+0x88>
   207e0:	213fffc4 	addi	r4,r4,-1
   207e4:	1c3ffd04 	addi	r16,r3,-12
   207e8:	18c01a04 	addi	r3,r3,104
   207ec:	247ffa1e 	bne	r4,r17,207d8 <__sfp+0x60>
   207f0:	90800017 	ldw	r2,0(r18)
   207f4:	10001d26 	beq	r2,zero,2086c <__sfp+0xf4>
   207f8:	1025883a 	mov	r18,r2
   207fc:	003fee06 	br	207b8 <__sfp+0x40>
   20800:	00bfffc4 	movi	r2,-1
   20804:	8080038d 	sth	r2,14(r16)
   20808:	00800044 	movi	r2,1
   2080c:	8080030d 	sth	r2,12(r16)
   20810:	80001915 	stw	zero,100(r16)
   20814:	80000015 	stw	zero,0(r16)
   20818:	80000215 	stw	zero,8(r16)
   2081c:	80000115 	stw	zero,4(r16)
   20820:	80000415 	stw	zero,16(r16)
   20824:	80000515 	stw	zero,20(r16)
   20828:	80000615 	stw	zero,24(r16)
   2082c:	01800204 	movi	r6,8
   20830:	000b883a 	mov	r5,zero
   20834:	81001704 	addi	r4,r16,92
   20838:	0021adc0 	call	21adc <memset>
   2083c:	8005883a 	mov	r2,r16
   20840:	80000c15 	stw	zero,48(r16)
   20844:	80000d15 	stw	zero,52(r16)
   20848:	80001115 	stw	zero,68(r16)
   2084c:	80001215 	stw	zero,72(r16)
   20850:	dfc00417 	ldw	ra,16(sp)
   20854:	dcc00317 	ldw	r19,12(sp)
   20858:	dc800217 	ldw	r18,8(sp)
   2085c:	dc400117 	ldw	r17,4(sp)
   20860:	dc000017 	ldw	r16,0(sp)
   20864:	dec00504 	addi	sp,sp,20
   20868:	f800283a 	ret
   2086c:	01400104 	movi	r5,4
   20870:	9809883a 	mov	r4,r19
   20874:	00207000 	call	20700 <__sfmoreglue>
   20878:	90800015 	stw	r2,0(r18)
   2087c:	103fde1e 	bne	r2,zero,207f8 <__sfp+0x80>
   20880:	00800304 	movi	r2,12
   20884:	98800015 	stw	r2,0(r19)
   20888:	0005883a 	mov	r2,zero
   2088c:	003ff006 	br	20850 <__sfp+0xd8>

00020890 <_cleanup>:
   20890:	00800134 	movhi	r2,4
   20894:	10828004 	addi	r2,r2,2560
   20898:	11000017 	ldw	r4,0(r2)
   2089c:	014000b4 	movhi	r5,2
   208a0:	29494004 	addi	r5,r5,9472
   208a4:	0020e841 	jmpi	20e84 <_fwalk_reent>

000208a8 <__sinit>:
   208a8:	20800e17 	ldw	r2,56(r4)
   208ac:	10000126 	beq	r2,zero,208b4 <__sinit+0xc>
   208b0:	f800283a 	ret
   208b4:	002055c1 	jmpi	2055c <__sinit.part.1>

000208b8 <__sfp_lock_acquire>:
   208b8:	f800283a 	ret

000208bc <__sfp_lock_release>:
   208bc:	f800283a 	ret

000208c0 <__sinit_lock_acquire>:
   208c0:	f800283a 	ret

000208c4 <__sinit_lock_release>:
   208c4:	f800283a 	ret

000208c8 <__fp_lock_all>:
   208c8:	00800134 	movhi	r2,4
   208cc:	10828104 	addi	r2,r2,2564
   208d0:	11000017 	ldw	r4,0(r2)
   208d4:	014000b4 	movhi	r5,2
   208d8:	2941be04 	addi	r5,r5,1784
   208dc:	0020dc01 	jmpi	20dc0 <_fwalk>

000208e0 <__fp_unlock_all>:
   208e0:	00800134 	movhi	r2,4
   208e4:	10828104 	addi	r2,r2,2564
   208e8:	11000017 	ldw	r4,0(r2)
   208ec:	014000b4 	movhi	r5,2
   208f0:	29415204 	addi	r5,r5,1352
   208f4:	0020dc01 	jmpi	20dc0 <_fwalk>

000208f8 <__sfvwrite_r>:
   208f8:	30800217 	ldw	r2,8(r6)
   208fc:	10006726 	beq	r2,zero,20a9c <__sfvwrite_r+0x1a4>
   20900:	28c0030b 	ldhu	r3,12(r5)
   20904:	defff404 	addi	sp,sp,-48
   20908:	dd400715 	stw	r21,28(sp)
   2090c:	dd000615 	stw	r20,24(sp)
   20910:	dc000215 	stw	r16,8(sp)
   20914:	dfc00b15 	stw	ra,44(sp)
   20918:	df000a15 	stw	fp,40(sp)
   2091c:	ddc00915 	stw	r23,36(sp)
   20920:	dd800815 	stw	r22,32(sp)
   20924:	dcc00515 	stw	r19,20(sp)
   20928:	dc800415 	stw	r18,16(sp)
   2092c:	dc400315 	stw	r17,12(sp)
   20930:	1880020c 	andi	r2,r3,8
   20934:	2821883a 	mov	r16,r5
   20938:	202b883a 	mov	r21,r4
   2093c:	3029883a 	mov	r20,r6
   20940:	10002726 	beq	r2,zero,209e0 <__sfvwrite_r+0xe8>
   20944:	28800417 	ldw	r2,16(r5)
   20948:	10002526 	beq	r2,zero,209e0 <__sfvwrite_r+0xe8>
   2094c:	1880008c 	andi	r2,r3,2
   20950:	a4400017 	ldw	r17,0(r20)
   20954:	10002a26 	beq	r2,zero,20a00 <__sfvwrite_r+0x108>
   20958:	05a00034 	movhi	r22,32768
   2095c:	0027883a 	mov	r19,zero
   20960:	0025883a 	mov	r18,zero
   20964:	b5bf0004 	addi	r22,r22,-1024
   20968:	980d883a 	mov	r6,r19
   2096c:	a809883a 	mov	r4,r21
   20970:	90004626 	beq	r18,zero,20a8c <__sfvwrite_r+0x194>
   20974:	900f883a 	mov	r7,r18
   20978:	b480022e 	bgeu	r22,r18,20984 <__sfvwrite_r+0x8c>
   2097c:	01e00034 	movhi	r7,32768
   20980:	39ff0004 	addi	r7,r7,-1024
   20984:	80800917 	ldw	r2,36(r16)
   20988:	81400717 	ldw	r5,28(r16)
   2098c:	103ee83a 	callr	r2
   20990:	00805a0e 	bge	zero,r2,20afc <__sfvwrite_r+0x204>
   20994:	a0c00217 	ldw	r3,8(r20)
   20998:	98a7883a 	add	r19,r19,r2
   2099c:	90a5c83a 	sub	r18,r18,r2
   209a0:	1885c83a 	sub	r2,r3,r2
   209a4:	a0800215 	stw	r2,8(r20)
   209a8:	103fef1e 	bne	r2,zero,20968 <__sfvwrite_r+0x70>
   209ac:	0005883a 	mov	r2,zero
   209b0:	dfc00b17 	ldw	ra,44(sp)
   209b4:	df000a17 	ldw	fp,40(sp)
   209b8:	ddc00917 	ldw	r23,36(sp)
   209bc:	dd800817 	ldw	r22,32(sp)
   209c0:	dd400717 	ldw	r21,28(sp)
   209c4:	dd000617 	ldw	r20,24(sp)
   209c8:	dcc00517 	ldw	r19,20(sp)
   209cc:	dc800417 	ldw	r18,16(sp)
   209d0:	dc400317 	ldw	r17,12(sp)
   209d4:	dc000217 	ldw	r16,8(sp)
   209d8:	dec00c04 	addi	sp,sp,48
   209dc:	f800283a 	ret
   209e0:	800b883a 	mov	r5,r16
   209e4:	a809883a 	mov	r4,r21
   209e8:	00223580 	call	22358 <__swsetup_r>
   209ec:	1000ee1e 	bne	r2,zero,20da8 <__sfvwrite_r+0x4b0>
   209f0:	80c0030b 	ldhu	r3,12(r16)
   209f4:	a4400017 	ldw	r17,0(r20)
   209f8:	1880008c 	andi	r2,r3,2
   209fc:	103fd61e 	bne	r2,zero,20958 <__sfvwrite_r+0x60>
   20a00:	1880004c 	andi	r2,r3,1
   20a04:	1000421e 	bne	r2,zero,20b10 <__sfvwrite_r+0x218>
   20a08:	0039883a 	mov	fp,zero
   20a0c:	0025883a 	mov	r18,zero
   20a10:	90001a26 	beq	r18,zero,20a7c <__sfvwrite_r+0x184>
   20a14:	1880800c 	andi	r2,r3,512
   20a18:	84c00217 	ldw	r19,8(r16)
   20a1c:	10002126 	beq	r2,zero,20aa4 <__sfvwrite_r+0x1ac>
   20a20:	982f883a 	mov	r23,r19
   20a24:	94c09636 	bltu	r18,r19,20c80 <__sfvwrite_r+0x388>
   20a28:	1881200c 	andi	r2,r3,1152
   20a2c:	1000a11e 	bne	r2,zero,20cb4 <__sfvwrite_r+0x3bc>
   20a30:	81000017 	ldw	r4,0(r16)
   20a34:	b80d883a 	mov	r6,r23
   20a38:	e00b883a 	mov	r5,fp
   20a3c:	00219800 	call	21980 <memmove>
   20a40:	80c00217 	ldw	r3,8(r16)
   20a44:	81000017 	ldw	r4,0(r16)
   20a48:	9005883a 	mov	r2,r18
   20a4c:	1ce7c83a 	sub	r19,r3,r19
   20a50:	25cf883a 	add	r7,r4,r23
   20a54:	84c00215 	stw	r19,8(r16)
   20a58:	81c00015 	stw	r7,0(r16)
   20a5c:	a0c00217 	ldw	r3,8(r20)
   20a60:	e0b9883a 	add	fp,fp,r2
   20a64:	90a5c83a 	sub	r18,r18,r2
   20a68:	18a7c83a 	sub	r19,r3,r2
   20a6c:	a4c00215 	stw	r19,8(r20)
   20a70:	983fce26 	beq	r19,zero,209ac <__sfvwrite_r+0xb4>
   20a74:	80c0030b 	ldhu	r3,12(r16)
   20a78:	903fe61e 	bne	r18,zero,20a14 <__sfvwrite_r+0x11c>
   20a7c:	8f000017 	ldw	fp,0(r17)
   20a80:	8c800117 	ldw	r18,4(r17)
   20a84:	8c400204 	addi	r17,r17,8
   20a88:	003fe106 	br	20a10 <__sfvwrite_r+0x118>
   20a8c:	8cc00017 	ldw	r19,0(r17)
   20a90:	8c800117 	ldw	r18,4(r17)
   20a94:	8c400204 	addi	r17,r17,8
   20a98:	003fb306 	br	20968 <__sfvwrite_r+0x70>
   20a9c:	0005883a 	mov	r2,zero
   20aa0:	f800283a 	ret
   20aa4:	81000017 	ldw	r4,0(r16)
   20aa8:	80800417 	ldw	r2,16(r16)
   20aac:	11005a36 	bltu	r2,r4,20c18 <__sfvwrite_r+0x320>
   20ab0:	85c00517 	ldw	r23,20(r16)
   20ab4:	95c05836 	bltu	r18,r23,20c18 <__sfvwrite_r+0x320>
   20ab8:	00a00034 	movhi	r2,32768
   20abc:	10bfffc4 	addi	r2,r2,-1
   20ac0:	9009883a 	mov	r4,r18
   20ac4:	1480012e 	bgeu	r2,r18,20acc <__sfvwrite_r+0x1d4>
   20ac8:	1009883a 	mov	r4,r2
   20acc:	b80b883a 	mov	r5,r23
   20ad0:	002300c0 	call	2300c <__divsi3>
   20ad4:	b80b883a 	mov	r5,r23
   20ad8:	1009883a 	mov	r4,r2
   20adc:	00231c00 	call	231c0 <__mulsi3>
   20ae0:	81400717 	ldw	r5,28(r16)
   20ae4:	80c00917 	ldw	r3,36(r16)
   20ae8:	100f883a 	mov	r7,r2
   20aec:	e00d883a 	mov	r6,fp
   20af0:	a809883a 	mov	r4,r21
   20af4:	183ee83a 	callr	r3
   20af8:	00bfd816 	blt	zero,r2,20a5c <__sfvwrite_r+0x164>
   20afc:	8080030b 	ldhu	r2,12(r16)
   20b00:	10801014 	ori	r2,r2,64
   20b04:	8080030d 	sth	r2,12(r16)
   20b08:	00bfffc4 	movi	r2,-1
   20b0c:	003fa806 	br	209b0 <__sfvwrite_r+0xb8>
   20b10:	0027883a 	mov	r19,zero
   20b14:	0011883a 	mov	r8,zero
   20b18:	0039883a 	mov	fp,zero
   20b1c:	0025883a 	mov	r18,zero
   20b20:	90001f26 	beq	r18,zero,20ba0 <__sfvwrite_r+0x2a8>
   20b24:	40005a26 	beq	r8,zero,20c90 <__sfvwrite_r+0x398>
   20b28:	982d883a 	mov	r22,r19
   20b2c:	94c0012e 	bgeu	r18,r19,20b34 <__sfvwrite_r+0x23c>
   20b30:	902d883a 	mov	r22,r18
   20b34:	81000017 	ldw	r4,0(r16)
   20b38:	80800417 	ldw	r2,16(r16)
   20b3c:	b02f883a 	mov	r23,r22
   20b40:	81c00517 	ldw	r7,20(r16)
   20b44:	1100032e 	bgeu	r2,r4,20b54 <__sfvwrite_r+0x25c>
   20b48:	80c00217 	ldw	r3,8(r16)
   20b4c:	38c7883a 	add	r3,r7,r3
   20b50:	1d801816 	blt	r3,r22,20bb4 <__sfvwrite_r+0x2bc>
   20b54:	b1c03e16 	blt	r22,r7,20c50 <__sfvwrite_r+0x358>
   20b58:	80800917 	ldw	r2,36(r16)
   20b5c:	81400717 	ldw	r5,28(r16)
   20b60:	e00d883a 	mov	r6,fp
   20b64:	da000115 	stw	r8,4(sp)
   20b68:	a809883a 	mov	r4,r21
   20b6c:	103ee83a 	callr	r2
   20b70:	102f883a 	mov	r23,r2
   20b74:	da000117 	ldw	r8,4(sp)
   20b78:	00bfe00e 	bge	zero,r2,20afc <__sfvwrite_r+0x204>
   20b7c:	9de7c83a 	sub	r19,r19,r23
   20b80:	98001f26 	beq	r19,zero,20c00 <__sfvwrite_r+0x308>
   20b84:	a0800217 	ldw	r2,8(r20)
   20b88:	e5f9883a 	add	fp,fp,r23
   20b8c:	95e5c83a 	sub	r18,r18,r23
   20b90:	15efc83a 	sub	r23,r2,r23
   20b94:	a5c00215 	stw	r23,8(r20)
   20b98:	b83f8426 	beq	r23,zero,209ac <__sfvwrite_r+0xb4>
   20b9c:	903fe11e 	bne	r18,zero,20b24 <__sfvwrite_r+0x22c>
   20ba0:	8f000017 	ldw	fp,0(r17)
   20ba4:	8c800117 	ldw	r18,4(r17)
   20ba8:	0011883a 	mov	r8,zero
   20bac:	8c400204 	addi	r17,r17,8
   20bb0:	003fdb06 	br	20b20 <__sfvwrite_r+0x228>
   20bb4:	180d883a 	mov	r6,r3
   20bb8:	e00b883a 	mov	r5,fp
   20bbc:	da000115 	stw	r8,4(sp)
   20bc0:	d8c00015 	stw	r3,0(sp)
   20bc4:	00219800 	call	21980 <memmove>
   20bc8:	d8c00017 	ldw	r3,0(sp)
   20bcc:	80800017 	ldw	r2,0(r16)
   20bd0:	800b883a 	mov	r5,r16
   20bd4:	a809883a 	mov	r4,r21
   20bd8:	10c5883a 	add	r2,r2,r3
   20bdc:	80800015 	stw	r2,0(r16)
   20be0:	d8c00015 	stw	r3,0(sp)
   20be4:	00228200 	call	22820 <_fflush_r>
   20be8:	d8c00017 	ldw	r3,0(sp)
   20bec:	da000117 	ldw	r8,4(sp)
   20bf0:	103fc21e 	bne	r2,zero,20afc <__sfvwrite_r+0x204>
   20bf4:	182f883a 	mov	r23,r3
   20bf8:	9de7c83a 	sub	r19,r19,r23
   20bfc:	983fe11e 	bne	r19,zero,20b84 <__sfvwrite_r+0x28c>
   20c00:	800b883a 	mov	r5,r16
   20c04:	a809883a 	mov	r4,r21
   20c08:	00228200 	call	22820 <_fflush_r>
   20c0c:	103fbb1e 	bne	r2,zero,20afc <__sfvwrite_r+0x204>
   20c10:	0011883a 	mov	r8,zero
   20c14:	003fdb06 	br	20b84 <__sfvwrite_r+0x28c>
   20c18:	94c0012e 	bgeu	r18,r19,20c20 <__sfvwrite_r+0x328>
   20c1c:	9027883a 	mov	r19,r18
   20c20:	980d883a 	mov	r6,r19
   20c24:	e00b883a 	mov	r5,fp
   20c28:	00219800 	call	21980 <memmove>
   20c2c:	80800217 	ldw	r2,8(r16)
   20c30:	80c00017 	ldw	r3,0(r16)
   20c34:	14c5c83a 	sub	r2,r2,r19
   20c38:	1cc7883a 	add	r3,r3,r19
   20c3c:	80800215 	stw	r2,8(r16)
   20c40:	80c00015 	stw	r3,0(r16)
   20c44:	10004326 	beq	r2,zero,20d54 <__sfvwrite_r+0x45c>
   20c48:	9805883a 	mov	r2,r19
   20c4c:	003f8306 	br	20a5c <__sfvwrite_r+0x164>
   20c50:	b00d883a 	mov	r6,r22
   20c54:	e00b883a 	mov	r5,fp
   20c58:	da000115 	stw	r8,4(sp)
   20c5c:	00219800 	call	21980 <memmove>
   20c60:	80800217 	ldw	r2,8(r16)
   20c64:	80c00017 	ldw	r3,0(r16)
   20c68:	da000117 	ldw	r8,4(sp)
   20c6c:	1585c83a 	sub	r2,r2,r22
   20c70:	1dad883a 	add	r22,r3,r22
   20c74:	80800215 	stw	r2,8(r16)
   20c78:	85800015 	stw	r22,0(r16)
   20c7c:	003fbf06 	br	20b7c <__sfvwrite_r+0x284>
   20c80:	81000017 	ldw	r4,0(r16)
   20c84:	9027883a 	mov	r19,r18
   20c88:	902f883a 	mov	r23,r18
   20c8c:	003f6906 	br	20a34 <__sfvwrite_r+0x13c>
   20c90:	900d883a 	mov	r6,r18
   20c94:	01400284 	movi	r5,10
   20c98:	e009883a 	mov	r4,fp
   20c9c:	00217540 	call	21754 <memchr>
   20ca0:	10003e26 	beq	r2,zero,20d9c <__sfvwrite_r+0x4a4>
   20ca4:	10800044 	addi	r2,r2,1
   20ca8:	1727c83a 	sub	r19,r2,fp
   20cac:	02000044 	movi	r8,1
   20cb0:	003f9d06 	br	20b28 <__sfvwrite_r+0x230>
   20cb4:	80800517 	ldw	r2,20(r16)
   20cb8:	81400417 	ldw	r5,16(r16)
   20cbc:	81c00017 	ldw	r7,0(r16)
   20cc0:	10a7883a 	add	r19,r2,r2
   20cc4:	9885883a 	add	r2,r19,r2
   20cc8:	1026d7fa 	srli	r19,r2,31
   20ccc:	396dc83a 	sub	r22,r7,r5
   20cd0:	b1000044 	addi	r4,r22,1
   20cd4:	9885883a 	add	r2,r19,r2
   20cd8:	1027d07a 	srai	r19,r2,1
   20cdc:	2485883a 	add	r2,r4,r18
   20ce0:	980d883a 	mov	r6,r19
   20ce4:	9880022e 	bgeu	r19,r2,20cf0 <__sfvwrite_r+0x3f8>
   20ce8:	1027883a 	mov	r19,r2
   20cec:	100d883a 	mov	r6,r2
   20cf0:	18c1000c 	andi	r3,r3,1024
   20cf4:	18001c26 	beq	r3,zero,20d68 <__sfvwrite_r+0x470>
   20cf8:	300b883a 	mov	r5,r6
   20cfc:	a809883a 	mov	r4,r21
   20d00:	0020f480 	call	20f48 <_malloc_r>
   20d04:	102f883a 	mov	r23,r2
   20d08:	10002926 	beq	r2,zero,20db0 <__sfvwrite_r+0x4b8>
   20d0c:	81400417 	ldw	r5,16(r16)
   20d10:	b00d883a 	mov	r6,r22
   20d14:	1009883a 	mov	r4,r2
   20d18:	00218380 	call	21838 <memcpy>
   20d1c:	8080030b 	ldhu	r2,12(r16)
   20d20:	00fedfc4 	movi	r3,-1153
   20d24:	10c4703a 	and	r2,r2,r3
   20d28:	10802014 	ori	r2,r2,128
   20d2c:	8080030d 	sth	r2,12(r16)
   20d30:	bd89883a 	add	r4,r23,r22
   20d34:	9d8fc83a 	sub	r7,r19,r22
   20d38:	85c00415 	stw	r23,16(r16)
   20d3c:	84c00515 	stw	r19,20(r16)
   20d40:	81000015 	stw	r4,0(r16)
   20d44:	9027883a 	mov	r19,r18
   20d48:	81c00215 	stw	r7,8(r16)
   20d4c:	902f883a 	mov	r23,r18
   20d50:	003f3806 	br	20a34 <__sfvwrite_r+0x13c>
   20d54:	800b883a 	mov	r5,r16
   20d58:	a809883a 	mov	r4,r21
   20d5c:	00228200 	call	22820 <_fflush_r>
   20d60:	103fb926 	beq	r2,zero,20c48 <__sfvwrite_r+0x350>
   20d64:	003f6506 	br	20afc <__sfvwrite_r+0x204>
   20d68:	a809883a 	mov	r4,r21
   20d6c:	0021c040 	call	21c04 <_realloc_r>
   20d70:	102f883a 	mov	r23,r2
   20d74:	103fee1e 	bne	r2,zero,20d30 <__sfvwrite_r+0x438>
   20d78:	81400417 	ldw	r5,16(r16)
   20d7c:	a809883a 	mov	r4,r21
   20d80:	00229d00 	call	229d0 <_free_r>
   20d84:	8080030b 	ldhu	r2,12(r16)
   20d88:	00ffdfc4 	movi	r3,-129
   20d8c:	1884703a 	and	r2,r3,r2
   20d90:	00c00304 	movi	r3,12
   20d94:	a8c00015 	stw	r3,0(r21)
   20d98:	003f5906 	br	20b00 <__sfvwrite_r+0x208>
   20d9c:	94c00044 	addi	r19,r18,1
   20da0:	02000044 	movi	r8,1
   20da4:	003f6006 	br	20b28 <__sfvwrite_r+0x230>
   20da8:	00bfffc4 	movi	r2,-1
   20dac:	003f0006 	br	209b0 <__sfvwrite_r+0xb8>
   20db0:	00800304 	movi	r2,12
   20db4:	a8800015 	stw	r2,0(r21)
   20db8:	8080030b 	ldhu	r2,12(r16)
   20dbc:	003f5006 	br	20b00 <__sfvwrite_r+0x208>

00020dc0 <_fwalk>:
   20dc0:	defff704 	addi	sp,sp,-36
   20dc4:	dd000415 	stw	r20,16(sp)
   20dc8:	dfc00815 	stw	ra,32(sp)
   20dcc:	ddc00715 	stw	r23,28(sp)
   20dd0:	dd800615 	stw	r22,24(sp)
   20dd4:	dd400515 	stw	r21,20(sp)
   20dd8:	dcc00315 	stw	r19,12(sp)
   20ddc:	dc800215 	stw	r18,8(sp)
   20de0:	dc400115 	stw	r17,4(sp)
   20de4:	dc000015 	stw	r16,0(sp)
   20de8:	2500b804 	addi	r20,r4,736
   20dec:	a0002326 	beq	r20,zero,20e7c <_fwalk+0xbc>
   20df0:	282b883a 	mov	r21,r5
   20df4:	002f883a 	mov	r23,zero
   20df8:	05800044 	movi	r22,1
   20dfc:	04ffffc4 	movi	r19,-1
   20e00:	a4400117 	ldw	r17,4(r20)
   20e04:	a4800217 	ldw	r18,8(r20)
   20e08:	8c7fffc4 	addi	r17,r17,-1
   20e0c:	88000d16 	blt	r17,zero,20e44 <_fwalk+0x84>
   20e10:	94000304 	addi	r16,r18,12
   20e14:	94800384 	addi	r18,r18,14
   20e18:	8080000b 	ldhu	r2,0(r16)
   20e1c:	8c7fffc4 	addi	r17,r17,-1
   20e20:	813ffd04 	addi	r4,r16,-12
   20e24:	b080042e 	bgeu	r22,r2,20e38 <_fwalk+0x78>
   20e28:	9080000f 	ldh	r2,0(r18)
   20e2c:	14c00226 	beq	r2,r19,20e38 <_fwalk+0x78>
   20e30:	a83ee83a 	callr	r21
   20e34:	b8aeb03a 	or	r23,r23,r2
   20e38:	84001a04 	addi	r16,r16,104
   20e3c:	94801a04 	addi	r18,r18,104
   20e40:	8cfff51e 	bne	r17,r19,20e18 <_fwalk+0x58>
   20e44:	a5000017 	ldw	r20,0(r20)
   20e48:	a03fed1e 	bne	r20,zero,20e00 <_fwalk+0x40>
   20e4c:	b805883a 	mov	r2,r23
   20e50:	dfc00817 	ldw	ra,32(sp)
   20e54:	ddc00717 	ldw	r23,28(sp)
   20e58:	dd800617 	ldw	r22,24(sp)
   20e5c:	dd400517 	ldw	r21,20(sp)
   20e60:	dd000417 	ldw	r20,16(sp)
   20e64:	dcc00317 	ldw	r19,12(sp)
   20e68:	dc800217 	ldw	r18,8(sp)
   20e6c:	dc400117 	ldw	r17,4(sp)
   20e70:	dc000017 	ldw	r16,0(sp)
   20e74:	dec00904 	addi	sp,sp,36
   20e78:	f800283a 	ret
   20e7c:	002f883a 	mov	r23,zero
   20e80:	003ff206 	br	20e4c <_fwalk+0x8c>

00020e84 <_fwalk_reent>:
   20e84:	defff704 	addi	sp,sp,-36
   20e88:	dd000415 	stw	r20,16(sp)
   20e8c:	dfc00815 	stw	ra,32(sp)
   20e90:	ddc00715 	stw	r23,28(sp)
   20e94:	dd800615 	stw	r22,24(sp)
   20e98:	dd400515 	stw	r21,20(sp)
   20e9c:	dcc00315 	stw	r19,12(sp)
   20ea0:	dc800215 	stw	r18,8(sp)
   20ea4:	dc400115 	stw	r17,4(sp)
   20ea8:	dc000015 	stw	r16,0(sp)
   20eac:	2500b804 	addi	r20,r4,736
   20eb0:	a0002326 	beq	r20,zero,20f40 <_fwalk_reent+0xbc>
   20eb4:	282b883a 	mov	r21,r5
   20eb8:	2027883a 	mov	r19,r4
   20ebc:	002f883a 	mov	r23,zero
   20ec0:	05800044 	movi	r22,1
   20ec4:	04bfffc4 	movi	r18,-1
   20ec8:	a4400117 	ldw	r17,4(r20)
   20ecc:	a4000217 	ldw	r16,8(r20)
   20ed0:	8c7fffc4 	addi	r17,r17,-1
   20ed4:	88000c16 	blt	r17,zero,20f08 <_fwalk_reent+0x84>
   20ed8:	84000304 	addi	r16,r16,12
   20edc:	8080000b 	ldhu	r2,0(r16)
   20ee0:	8c7fffc4 	addi	r17,r17,-1
   20ee4:	817ffd04 	addi	r5,r16,-12
   20ee8:	b080052e 	bgeu	r22,r2,20f00 <_fwalk_reent+0x7c>
   20eec:	8080008f 	ldh	r2,2(r16)
   20ef0:	9809883a 	mov	r4,r19
   20ef4:	14800226 	beq	r2,r18,20f00 <_fwalk_reent+0x7c>
   20ef8:	a83ee83a 	callr	r21
   20efc:	b8aeb03a 	or	r23,r23,r2
   20f00:	84001a04 	addi	r16,r16,104
   20f04:	8cbff51e 	bne	r17,r18,20edc <_fwalk_reent+0x58>
   20f08:	a5000017 	ldw	r20,0(r20)
   20f0c:	a03fee1e 	bne	r20,zero,20ec8 <_fwalk_reent+0x44>
   20f10:	b805883a 	mov	r2,r23
   20f14:	dfc00817 	ldw	ra,32(sp)
   20f18:	ddc00717 	ldw	r23,28(sp)
   20f1c:	dd800617 	ldw	r22,24(sp)
   20f20:	dd400517 	ldw	r21,20(sp)
   20f24:	dd000417 	ldw	r20,16(sp)
   20f28:	dcc00317 	ldw	r19,12(sp)
   20f2c:	dc800217 	ldw	r18,8(sp)
   20f30:	dc400117 	ldw	r17,4(sp)
   20f34:	dc000017 	ldw	r16,0(sp)
   20f38:	dec00904 	addi	sp,sp,36
   20f3c:	f800283a 	ret
   20f40:	002f883a 	mov	r23,zero
   20f44:	003ff206 	br	20f10 <_fwalk_reent+0x8c>

00020f48 <_malloc_r>:
   20f48:	defff504 	addi	sp,sp,-44
   20f4c:	dc800315 	stw	r18,12(sp)
   20f50:	dfc00a15 	stw	ra,40(sp)
   20f54:	df000915 	stw	fp,36(sp)
   20f58:	ddc00815 	stw	r23,32(sp)
   20f5c:	dd800715 	stw	r22,28(sp)
   20f60:	dd400615 	stw	r21,24(sp)
   20f64:	dd000515 	stw	r20,20(sp)
   20f68:	dcc00415 	stw	r19,16(sp)
   20f6c:	dc400215 	stw	r17,8(sp)
   20f70:	dc000115 	stw	r16,4(sp)
   20f74:	288002c4 	addi	r2,r5,11
   20f78:	00c00584 	movi	r3,22
   20f7c:	2025883a 	mov	r18,r4
   20f80:	18807f2e 	bgeu	r3,r2,21180 <_malloc_r+0x238>
   20f84:	047ffe04 	movi	r17,-8
   20f88:	1462703a 	and	r17,r2,r17
   20f8c:	8800a316 	blt	r17,zero,2121c <_malloc_r+0x2d4>
   20f90:	8940a236 	bltu	r17,r5,2121c <_malloc_r+0x2d4>
   20f94:	00239840 	call	23984 <__malloc_lock>
   20f98:	00807dc4 	movi	r2,503
   20f9c:	1441e92e 	bgeu	r2,r17,21744 <_malloc_r+0x7fc>
   20fa0:	8804d27a 	srli	r2,r17,9
   20fa4:	1000a126 	beq	r2,zero,2122c <_malloc_r+0x2e4>
   20fa8:	00c00104 	movi	r3,4
   20fac:	18811e36 	bltu	r3,r2,21428 <_malloc_r+0x4e0>
   20fb0:	8804d1ba 	srli	r2,r17,6
   20fb4:	12000e44 	addi	r8,r2,57
   20fb8:	11c00e04 	addi	r7,r2,56
   20fbc:	4209883a 	add	r4,r8,r8
   20fc0:	04c00134 	movhi	r19,4
   20fc4:	2109883a 	add	r4,r4,r4
   20fc8:	9cc10904 	addi	r19,r19,1060
   20fcc:	2109883a 	add	r4,r4,r4
   20fd0:	9909883a 	add	r4,r19,r4
   20fd4:	24000117 	ldw	r16,4(r4)
   20fd8:	213ffe04 	addi	r4,r4,-8
   20fdc:	24009726 	beq	r4,r16,2123c <_malloc_r+0x2f4>
   20fe0:	80800117 	ldw	r2,4(r16)
   20fe4:	01bfff04 	movi	r6,-4
   20fe8:	014003c4 	movi	r5,15
   20fec:	1184703a 	and	r2,r2,r6
   20ff0:	1447c83a 	sub	r3,r2,r17
   20ff4:	28c00716 	blt	r5,r3,21014 <_malloc_r+0xcc>
   20ff8:	1800920e 	bge	r3,zero,21244 <_malloc_r+0x2fc>
   20ffc:	84000317 	ldw	r16,12(r16)
   21000:	24008e26 	beq	r4,r16,2123c <_malloc_r+0x2f4>
   21004:	80800117 	ldw	r2,4(r16)
   21008:	1184703a 	and	r2,r2,r6
   2100c:	1447c83a 	sub	r3,r2,r17
   21010:	28fff90e 	bge	r5,r3,20ff8 <_malloc_r+0xb0>
   21014:	3809883a 	mov	r4,r7
   21018:	01800134 	movhi	r6,4
   2101c:	9c000417 	ldw	r16,16(r19)
   21020:	31810904 	addi	r6,r6,1060
   21024:	32000204 	addi	r8,r6,8
   21028:	82013426 	beq	r16,r8,214fc <_malloc_r+0x5b4>
   2102c:	80c00117 	ldw	r3,4(r16)
   21030:	00bfff04 	movi	r2,-4
   21034:	188e703a 	and	r7,r3,r2
   21038:	3c45c83a 	sub	r2,r7,r17
   2103c:	00c003c4 	movi	r3,15
   21040:	18811f16 	blt	r3,r2,214c0 <_malloc_r+0x578>
   21044:	32000515 	stw	r8,20(r6)
   21048:	32000415 	stw	r8,16(r6)
   2104c:	10007f0e 	bge	r2,zero,2124c <_malloc_r+0x304>
   21050:	00807fc4 	movi	r2,511
   21054:	11c0fd36 	bltu	r2,r7,2144c <_malloc_r+0x504>
   21058:	3806d0fa 	srli	r3,r7,3
   2105c:	01c00044 	movi	r7,1
   21060:	30800117 	ldw	r2,4(r6)
   21064:	19400044 	addi	r5,r3,1
   21068:	294b883a 	add	r5,r5,r5
   2106c:	1807d0ba 	srai	r3,r3,2
   21070:	294b883a 	add	r5,r5,r5
   21074:	294b883a 	add	r5,r5,r5
   21078:	298b883a 	add	r5,r5,r6
   2107c:	38c6983a 	sll	r3,r7,r3
   21080:	29c00017 	ldw	r7,0(r5)
   21084:	2a7ffe04 	addi	r9,r5,-8
   21088:	1886b03a 	or	r3,r3,r2
   2108c:	82400315 	stw	r9,12(r16)
   21090:	81c00215 	stw	r7,8(r16)
   21094:	30c00115 	stw	r3,4(r6)
   21098:	2c000015 	stw	r16,0(r5)
   2109c:	3c000315 	stw	r16,12(r7)
   210a0:	2005d0ba 	srai	r2,r4,2
   210a4:	01400044 	movi	r5,1
   210a8:	288a983a 	sll	r5,r5,r2
   210ac:	19406f36 	bltu	r3,r5,2126c <_malloc_r+0x324>
   210b0:	28c4703a 	and	r2,r5,r3
   210b4:	10000a1e 	bne	r2,zero,210e0 <_malloc_r+0x198>
   210b8:	00bfff04 	movi	r2,-4
   210bc:	294b883a 	add	r5,r5,r5
   210c0:	2088703a 	and	r4,r4,r2
   210c4:	28c4703a 	and	r2,r5,r3
   210c8:	21000104 	addi	r4,r4,4
   210cc:	1000041e 	bne	r2,zero,210e0 <_malloc_r+0x198>
   210d0:	294b883a 	add	r5,r5,r5
   210d4:	28c4703a 	and	r2,r5,r3
   210d8:	21000104 	addi	r4,r4,4
   210dc:	103ffc26 	beq	r2,zero,210d0 <_malloc_r+0x188>
   210e0:	02bfff04 	movi	r10,-4
   210e4:	024003c4 	movi	r9,15
   210e8:	21800044 	addi	r6,r4,1
   210ec:	318d883a 	add	r6,r6,r6
   210f0:	318d883a 	add	r6,r6,r6
   210f4:	318d883a 	add	r6,r6,r6
   210f8:	998d883a 	add	r6,r19,r6
   210fc:	333ffe04 	addi	r12,r6,-8
   21100:	2017883a 	mov	r11,r4
   21104:	31800104 	addi	r6,r6,4
   21108:	34000017 	ldw	r16,0(r6)
   2110c:	31fffd04 	addi	r7,r6,-12
   21110:	81c0041e 	bne	r16,r7,21124 <_malloc_r+0x1dc>
   21114:	0000fb06 	br	21504 <_malloc_r+0x5bc>
   21118:	1801030e 	bge	r3,zero,21528 <_malloc_r+0x5e0>
   2111c:	84000317 	ldw	r16,12(r16)
   21120:	81c0f826 	beq	r16,r7,21504 <_malloc_r+0x5bc>
   21124:	80800117 	ldw	r2,4(r16)
   21128:	1284703a 	and	r2,r2,r10
   2112c:	1447c83a 	sub	r3,r2,r17
   21130:	48fff90e 	bge	r9,r3,21118 <_malloc_r+0x1d0>
   21134:	80800317 	ldw	r2,12(r16)
   21138:	81000217 	ldw	r4,8(r16)
   2113c:	89400054 	ori	r5,r17,1
   21140:	81400115 	stw	r5,4(r16)
   21144:	20800315 	stw	r2,12(r4)
   21148:	11000215 	stw	r4,8(r2)
   2114c:	8463883a 	add	r17,r16,r17
   21150:	9c400515 	stw	r17,20(r19)
   21154:	9c400415 	stw	r17,16(r19)
   21158:	18800054 	ori	r2,r3,1
   2115c:	88800115 	stw	r2,4(r17)
   21160:	8a000315 	stw	r8,12(r17)
   21164:	8a000215 	stw	r8,8(r17)
   21168:	88e3883a 	add	r17,r17,r3
   2116c:	88c00015 	stw	r3,0(r17)
   21170:	9009883a 	mov	r4,r18
   21174:	00239a80 	call	239a8 <__malloc_unlock>
   21178:	80800204 	addi	r2,r16,8
   2117c:	00001b06 	br	211ec <_malloc_r+0x2a4>
   21180:	04400404 	movi	r17,16
   21184:	89402536 	bltu	r17,r5,2121c <_malloc_r+0x2d4>
   21188:	00239840 	call	23984 <__malloc_lock>
   2118c:	00800184 	movi	r2,6
   21190:	01000084 	movi	r4,2
   21194:	04c00134 	movhi	r19,4
   21198:	1085883a 	add	r2,r2,r2
   2119c:	9cc10904 	addi	r19,r19,1060
   211a0:	1085883a 	add	r2,r2,r2
   211a4:	9885883a 	add	r2,r19,r2
   211a8:	14000117 	ldw	r16,4(r2)
   211ac:	10fffe04 	addi	r3,r2,-8
   211b0:	80c0d926 	beq	r16,r3,21518 <_malloc_r+0x5d0>
   211b4:	80c00117 	ldw	r3,4(r16)
   211b8:	81000317 	ldw	r4,12(r16)
   211bc:	00bfff04 	movi	r2,-4
   211c0:	1884703a 	and	r2,r3,r2
   211c4:	81400217 	ldw	r5,8(r16)
   211c8:	8085883a 	add	r2,r16,r2
   211cc:	10c00117 	ldw	r3,4(r2)
   211d0:	29000315 	stw	r4,12(r5)
   211d4:	21400215 	stw	r5,8(r4)
   211d8:	18c00054 	ori	r3,r3,1
   211dc:	10c00115 	stw	r3,4(r2)
   211e0:	9009883a 	mov	r4,r18
   211e4:	00239a80 	call	239a8 <__malloc_unlock>
   211e8:	80800204 	addi	r2,r16,8
   211ec:	dfc00a17 	ldw	ra,40(sp)
   211f0:	df000917 	ldw	fp,36(sp)
   211f4:	ddc00817 	ldw	r23,32(sp)
   211f8:	dd800717 	ldw	r22,28(sp)
   211fc:	dd400617 	ldw	r21,24(sp)
   21200:	dd000517 	ldw	r20,20(sp)
   21204:	dcc00417 	ldw	r19,16(sp)
   21208:	dc800317 	ldw	r18,12(sp)
   2120c:	dc400217 	ldw	r17,8(sp)
   21210:	dc000117 	ldw	r16,4(sp)
   21214:	dec00b04 	addi	sp,sp,44
   21218:	f800283a 	ret
   2121c:	00800304 	movi	r2,12
   21220:	90800015 	stw	r2,0(r18)
   21224:	0005883a 	mov	r2,zero
   21228:	003ff006 	br	211ec <_malloc_r+0x2a4>
   2122c:	01002004 	movi	r4,128
   21230:	02001004 	movi	r8,64
   21234:	01c00fc4 	movi	r7,63
   21238:	003f6106 	br	20fc0 <_malloc_r+0x78>
   2123c:	4009883a 	mov	r4,r8
   21240:	003f7506 	br	21018 <_malloc_r+0xd0>
   21244:	81000317 	ldw	r4,12(r16)
   21248:	003fde06 	br	211c4 <_malloc_r+0x27c>
   2124c:	81c5883a 	add	r2,r16,r7
   21250:	11400117 	ldw	r5,4(r2)
   21254:	9009883a 	mov	r4,r18
   21258:	29400054 	ori	r5,r5,1
   2125c:	11400115 	stw	r5,4(r2)
   21260:	00239a80 	call	239a8 <__malloc_unlock>
   21264:	80800204 	addi	r2,r16,8
   21268:	003fe006 	br	211ec <_malloc_r+0x2a4>
   2126c:	9c000217 	ldw	r16,8(r19)
   21270:	00bfff04 	movi	r2,-4
   21274:	85800117 	ldw	r22,4(r16)
   21278:	b0ac703a 	and	r22,r22,r2
   2127c:	b4400336 	bltu	r22,r17,2128c <_malloc_r+0x344>
   21280:	b445c83a 	sub	r2,r22,r17
   21284:	00c003c4 	movi	r3,15
   21288:	18805d16 	blt	r3,r2,21400 <_malloc_r+0x4b8>
   2128c:	05c00134 	movhi	r23,4
   21290:	00800134 	movhi	r2,4
   21294:	10829004 	addi	r2,r2,2624
   21298:	bdc28204 	addi	r23,r23,2568
   2129c:	15400017 	ldw	r21,0(r2)
   212a0:	b8c00017 	ldw	r3,0(r23)
   212a4:	00bfffc4 	movi	r2,-1
   212a8:	858d883a 	add	r6,r16,r22
   212ac:	8d6b883a 	add	r21,r17,r21
   212b0:	1880ea26 	beq	r3,r2,2165c <_malloc_r+0x714>
   212b4:	ad4403c4 	addi	r21,r21,4111
   212b8:	00bc0004 	movi	r2,-4096
   212bc:	a8aa703a 	and	r21,r21,r2
   212c0:	a80b883a 	mov	r5,r21
   212c4:	9009883a 	mov	r4,r18
   212c8:	d9800015 	stw	r6,0(sp)
   212cc:	00221680 	call	22168 <_sbrk_r>
   212d0:	1029883a 	mov	r20,r2
   212d4:	00bfffc4 	movi	r2,-1
   212d8:	d9800017 	ldw	r6,0(sp)
   212dc:	a080e826 	beq	r20,r2,21680 <_malloc_r+0x738>
   212e0:	a180a636 	bltu	r20,r6,2157c <_malloc_r+0x634>
   212e4:	07000134 	movhi	fp,4
   212e8:	e7029704 	addi	fp,fp,2652
   212ec:	e0800017 	ldw	r2,0(fp)
   212f0:	a887883a 	add	r3,r21,r2
   212f4:	e0c00015 	stw	r3,0(fp)
   212f8:	3500e626 	beq	r6,r20,21694 <_malloc_r+0x74c>
   212fc:	b9000017 	ldw	r4,0(r23)
   21300:	00bfffc4 	movi	r2,-1
   21304:	2080ee26 	beq	r4,r2,216c0 <_malloc_r+0x778>
   21308:	a185c83a 	sub	r2,r20,r6
   2130c:	10c5883a 	add	r2,r2,r3
   21310:	e0800015 	stw	r2,0(fp)
   21314:	a0c001cc 	andi	r3,r20,7
   21318:	1800bc26 	beq	r3,zero,2160c <_malloc_r+0x6c4>
   2131c:	a0e9c83a 	sub	r20,r20,r3
   21320:	00840204 	movi	r2,4104
   21324:	a5000204 	addi	r20,r20,8
   21328:	10c7c83a 	sub	r3,r2,r3
   2132c:	a545883a 	add	r2,r20,r21
   21330:	1083ffcc 	andi	r2,r2,4095
   21334:	18abc83a 	sub	r21,r3,r2
   21338:	a80b883a 	mov	r5,r21
   2133c:	9009883a 	mov	r4,r18
   21340:	00221680 	call	22168 <_sbrk_r>
   21344:	00ffffc4 	movi	r3,-1
   21348:	10c0e126 	beq	r2,r3,216d0 <_malloc_r+0x788>
   2134c:	1505c83a 	sub	r2,r2,r20
   21350:	1545883a 	add	r2,r2,r21
   21354:	10800054 	ori	r2,r2,1
   21358:	e0c00017 	ldw	r3,0(fp)
   2135c:	9d000215 	stw	r20,8(r19)
   21360:	a0800115 	stw	r2,4(r20)
   21364:	a8c7883a 	add	r3,r21,r3
   21368:	e0c00015 	stw	r3,0(fp)
   2136c:	84c00e26 	beq	r16,r19,213a8 <_malloc_r+0x460>
   21370:	018003c4 	movi	r6,15
   21374:	3580a72e 	bgeu	r6,r22,21614 <_malloc_r+0x6cc>
   21378:	81400117 	ldw	r5,4(r16)
   2137c:	013ffe04 	movi	r4,-8
   21380:	b0bffd04 	addi	r2,r22,-12
   21384:	1104703a 	and	r2,r2,r4
   21388:	2900004c 	andi	r4,r5,1
   2138c:	2088b03a 	or	r4,r4,r2
   21390:	81000115 	stw	r4,4(r16)
   21394:	01400144 	movi	r5,5
   21398:	8089883a 	add	r4,r16,r2
   2139c:	21400115 	stw	r5,4(r4)
   213a0:	21400215 	stw	r5,8(r4)
   213a4:	3080cd36 	bltu	r6,r2,216dc <_malloc_r+0x794>
   213a8:	00800134 	movhi	r2,4
   213ac:	10828f04 	addi	r2,r2,2620
   213b0:	11000017 	ldw	r4,0(r2)
   213b4:	20c0012e 	bgeu	r4,r3,213bc <_malloc_r+0x474>
   213b8:	10c00015 	stw	r3,0(r2)
   213bc:	00800134 	movhi	r2,4
   213c0:	10828e04 	addi	r2,r2,2616
   213c4:	11000017 	ldw	r4,0(r2)
   213c8:	9c000217 	ldw	r16,8(r19)
   213cc:	20c0012e 	bgeu	r4,r3,213d4 <_malloc_r+0x48c>
   213d0:	10c00015 	stw	r3,0(r2)
   213d4:	80c00117 	ldw	r3,4(r16)
   213d8:	00bfff04 	movi	r2,-4
   213dc:	1886703a 	and	r3,r3,r2
   213e0:	1c45c83a 	sub	r2,r3,r17
   213e4:	1c400236 	bltu	r3,r17,213f0 <_malloc_r+0x4a8>
   213e8:	00c003c4 	movi	r3,15
   213ec:	18800416 	blt	r3,r2,21400 <_malloc_r+0x4b8>
   213f0:	9009883a 	mov	r4,r18
   213f4:	00239a80 	call	239a8 <__malloc_unlock>
   213f8:	0005883a 	mov	r2,zero
   213fc:	003f7b06 	br	211ec <_malloc_r+0x2a4>
   21400:	88c00054 	ori	r3,r17,1
   21404:	80c00115 	stw	r3,4(r16)
   21408:	8463883a 	add	r17,r16,r17
   2140c:	10800054 	ori	r2,r2,1
   21410:	9c400215 	stw	r17,8(r19)
   21414:	88800115 	stw	r2,4(r17)
   21418:	9009883a 	mov	r4,r18
   2141c:	00239a80 	call	239a8 <__malloc_unlock>
   21420:	80800204 	addi	r2,r16,8
   21424:	003f7106 	br	211ec <_malloc_r+0x2a4>
   21428:	00c00504 	movi	r3,20
   2142c:	18804a2e 	bgeu	r3,r2,21558 <_malloc_r+0x610>
   21430:	00c01504 	movi	r3,84
   21434:	18806e36 	bltu	r3,r2,215f0 <_malloc_r+0x6a8>
   21438:	8804d33a 	srli	r2,r17,12
   2143c:	12001bc4 	addi	r8,r2,111
   21440:	11c01b84 	addi	r7,r2,110
   21444:	4209883a 	add	r4,r8,r8
   21448:	003edd06 	br	20fc0 <_malloc_r+0x78>
   2144c:	3804d27a 	srli	r2,r7,9
   21450:	00c00104 	movi	r3,4
   21454:	1880442e 	bgeu	r3,r2,21568 <_malloc_r+0x620>
   21458:	00c00504 	movi	r3,20
   2145c:	18808136 	bltu	r3,r2,21664 <_malloc_r+0x71c>
   21460:	11401704 	addi	r5,r2,92
   21464:	10c016c4 	addi	r3,r2,91
   21468:	294b883a 	add	r5,r5,r5
   2146c:	294b883a 	add	r5,r5,r5
   21470:	294b883a 	add	r5,r5,r5
   21474:	994b883a 	add	r5,r19,r5
   21478:	28800017 	ldw	r2,0(r5)
   2147c:	01800134 	movhi	r6,4
   21480:	297ffe04 	addi	r5,r5,-8
   21484:	31810904 	addi	r6,r6,1060
   21488:	28806526 	beq	r5,r2,21620 <_malloc_r+0x6d8>
   2148c:	01bfff04 	movi	r6,-4
   21490:	10c00117 	ldw	r3,4(r2)
   21494:	1986703a 	and	r3,r3,r6
   21498:	38c0022e 	bgeu	r7,r3,214a4 <_malloc_r+0x55c>
   2149c:	10800217 	ldw	r2,8(r2)
   214a0:	28bffb1e 	bne	r5,r2,21490 <_malloc_r+0x548>
   214a4:	11400317 	ldw	r5,12(r2)
   214a8:	98c00117 	ldw	r3,4(r19)
   214ac:	81400315 	stw	r5,12(r16)
   214b0:	80800215 	stw	r2,8(r16)
   214b4:	2c000215 	stw	r16,8(r5)
   214b8:	14000315 	stw	r16,12(r2)
   214bc:	003ef806 	br	210a0 <_malloc_r+0x158>
   214c0:	88c00054 	ori	r3,r17,1
   214c4:	80c00115 	stw	r3,4(r16)
   214c8:	8463883a 	add	r17,r16,r17
   214cc:	34400515 	stw	r17,20(r6)
   214d0:	34400415 	stw	r17,16(r6)
   214d4:	10c00054 	ori	r3,r2,1
   214d8:	8a000315 	stw	r8,12(r17)
   214dc:	8a000215 	stw	r8,8(r17)
   214e0:	88c00115 	stw	r3,4(r17)
   214e4:	88a3883a 	add	r17,r17,r2
   214e8:	88800015 	stw	r2,0(r17)
   214ec:	9009883a 	mov	r4,r18
   214f0:	00239a80 	call	239a8 <__malloc_unlock>
   214f4:	80800204 	addi	r2,r16,8
   214f8:	003f3c06 	br	211ec <_malloc_r+0x2a4>
   214fc:	30c00117 	ldw	r3,4(r6)
   21500:	003ee706 	br	210a0 <_malloc_r+0x158>
   21504:	5ac00044 	addi	r11,r11,1
   21508:	588000cc 	andi	r2,r11,3
   2150c:	31800204 	addi	r6,r6,8
   21510:	103efd1e 	bne	r2,zero,21108 <_malloc_r+0x1c0>
   21514:	00002406 	br	215a8 <_malloc_r+0x660>
   21518:	14000317 	ldw	r16,12(r2)
   2151c:	143f251e 	bne	r2,r16,211b4 <_malloc_r+0x26c>
   21520:	21000084 	addi	r4,r4,2
   21524:	003ebc06 	br	21018 <_malloc_r+0xd0>
   21528:	8085883a 	add	r2,r16,r2
   2152c:	10c00117 	ldw	r3,4(r2)
   21530:	81000317 	ldw	r4,12(r16)
   21534:	81400217 	ldw	r5,8(r16)
   21538:	18c00054 	ori	r3,r3,1
   2153c:	10c00115 	stw	r3,4(r2)
   21540:	29000315 	stw	r4,12(r5)
   21544:	21400215 	stw	r5,8(r4)
   21548:	9009883a 	mov	r4,r18
   2154c:	00239a80 	call	239a8 <__malloc_unlock>
   21550:	80800204 	addi	r2,r16,8
   21554:	003f2506 	br	211ec <_malloc_r+0x2a4>
   21558:	12001704 	addi	r8,r2,92
   2155c:	11c016c4 	addi	r7,r2,91
   21560:	4209883a 	add	r4,r8,r8
   21564:	003e9606 	br	20fc0 <_malloc_r+0x78>
   21568:	3804d1ba 	srli	r2,r7,6
   2156c:	11400e44 	addi	r5,r2,57
   21570:	10c00e04 	addi	r3,r2,56
   21574:	294b883a 	add	r5,r5,r5
   21578:	003fbc06 	br	2146c <_malloc_r+0x524>
   2157c:	84ff5926 	beq	r16,r19,212e4 <_malloc_r+0x39c>
   21580:	00800134 	movhi	r2,4
   21584:	10810904 	addi	r2,r2,1060
   21588:	14000217 	ldw	r16,8(r2)
   2158c:	00bfff04 	movi	r2,-4
   21590:	80c00117 	ldw	r3,4(r16)
   21594:	1886703a 	and	r3,r3,r2
   21598:	003f9106 	br	213e0 <_malloc_r+0x498>
   2159c:	60800217 	ldw	r2,8(r12)
   215a0:	213fffc4 	addi	r4,r4,-1
   215a4:	1300651e 	bne	r2,r12,2173c <_malloc_r+0x7f4>
   215a8:	208000cc 	andi	r2,r4,3
   215ac:	633ffe04 	addi	r12,r12,-8
   215b0:	103ffa1e 	bne	r2,zero,2159c <_malloc_r+0x654>
   215b4:	98800117 	ldw	r2,4(r19)
   215b8:	0146303a 	nor	r3,zero,r5
   215bc:	1884703a 	and	r2,r3,r2
   215c0:	98800115 	stw	r2,4(r19)
   215c4:	294b883a 	add	r5,r5,r5
   215c8:	117f2836 	bltu	r2,r5,2126c <_malloc_r+0x324>
   215cc:	283f2726 	beq	r5,zero,2126c <_malloc_r+0x324>
   215d0:	2886703a 	and	r3,r5,r2
   215d4:	5809883a 	mov	r4,r11
   215d8:	183ec31e 	bne	r3,zero,210e8 <_malloc_r+0x1a0>
   215dc:	294b883a 	add	r5,r5,r5
   215e0:	2886703a 	and	r3,r5,r2
   215e4:	21000104 	addi	r4,r4,4
   215e8:	183ffc26 	beq	r3,zero,215dc <_malloc_r+0x694>
   215ec:	003ebe06 	br	210e8 <_malloc_r+0x1a0>
   215f0:	00c05504 	movi	r3,340
   215f4:	18801236 	bltu	r3,r2,21640 <_malloc_r+0x6f8>
   215f8:	8804d3fa 	srli	r2,r17,15
   215fc:	12001e04 	addi	r8,r2,120
   21600:	11c01dc4 	addi	r7,r2,119
   21604:	4209883a 	add	r4,r8,r8
   21608:	003e6d06 	br	20fc0 <_malloc_r+0x78>
   2160c:	00c40004 	movi	r3,4096
   21610:	003f4606 	br	2132c <_malloc_r+0x3e4>
   21614:	00800044 	movi	r2,1
   21618:	a0800115 	stw	r2,4(r20)
   2161c:	003f7406 	br	213f0 <_malloc_r+0x4a8>
   21620:	1805d0ba 	srai	r2,r3,2
   21624:	01c00044 	movi	r7,1
   21628:	30c00117 	ldw	r3,4(r6)
   2162c:	388e983a 	sll	r7,r7,r2
   21630:	2805883a 	mov	r2,r5
   21634:	38c6b03a 	or	r3,r7,r3
   21638:	30c00115 	stw	r3,4(r6)
   2163c:	003f9b06 	br	214ac <_malloc_r+0x564>
   21640:	00c15504 	movi	r3,1364
   21644:	18801a36 	bltu	r3,r2,216b0 <_malloc_r+0x768>
   21648:	8804d4ba 	srli	r2,r17,18
   2164c:	12001f44 	addi	r8,r2,125
   21650:	11c01f04 	addi	r7,r2,124
   21654:	4209883a 	add	r4,r8,r8
   21658:	003e5906 	br	20fc0 <_malloc_r+0x78>
   2165c:	ad400404 	addi	r21,r21,16
   21660:	003f1706 	br	212c0 <_malloc_r+0x378>
   21664:	00c01504 	movi	r3,84
   21668:	18802336 	bltu	r3,r2,216f8 <_malloc_r+0x7b0>
   2166c:	3804d33a 	srli	r2,r7,12
   21670:	11401bc4 	addi	r5,r2,111
   21674:	10c01b84 	addi	r3,r2,110
   21678:	294b883a 	add	r5,r5,r5
   2167c:	003f7b06 	br	2146c <_malloc_r+0x524>
   21680:	9c000217 	ldw	r16,8(r19)
   21684:	00bfff04 	movi	r2,-4
   21688:	80c00117 	ldw	r3,4(r16)
   2168c:	1886703a 	and	r3,r3,r2
   21690:	003f5306 	br	213e0 <_malloc_r+0x498>
   21694:	3083ffcc 	andi	r2,r6,4095
   21698:	103f181e 	bne	r2,zero,212fc <_malloc_r+0x3b4>
   2169c:	99000217 	ldw	r4,8(r19)
   216a0:	b545883a 	add	r2,r22,r21
   216a4:	10800054 	ori	r2,r2,1
   216a8:	20800115 	stw	r2,4(r4)
   216ac:	003f3e06 	br	213a8 <_malloc_r+0x460>
   216b0:	01003f84 	movi	r4,254
   216b4:	02001fc4 	movi	r8,127
   216b8:	01c01f84 	movi	r7,126
   216bc:	003e4006 	br	20fc0 <_malloc_r+0x78>
   216c0:	00800134 	movhi	r2,4
   216c4:	10828204 	addi	r2,r2,2568
   216c8:	15000015 	stw	r20,0(r2)
   216cc:	003f1106 	br	21314 <_malloc_r+0x3cc>
   216d0:	00800044 	movi	r2,1
   216d4:	002b883a 	mov	r21,zero
   216d8:	003f1f06 	br	21358 <_malloc_r+0x410>
   216dc:	81400204 	addi	r5,r16,8
   216e0:	9009883a 	mov	r4,r18
   216e4:	00229d00 	call	229d0 <_free_r>
   216e8:	00800134 	movhi	r2,4
   216ec:	10829704 	addi	r2,r2,2652
   216f0:	10c00017 	ldw	r3,0(r2)
   216f4:	003f2c06 	br	213a8 <_malloc_r+0x460>
   216f8:	00c05504 	movi	r3,340
   216fc:	18800536 	bltu	r3,r2,21714 <_malloc_r+0x7cc>
   21700:	3804d3fa 	srli	r2,r7,15
   21704:	11401e04 	addi	r5,r2,120
   21708:	10c01dc4 	addi	r3,r2,119
   2170c:	294b883a 	add	r5,r5,r5
   21710:	003f5606 	br	2146c <_malloc_r+0x524>
   21714:	00c15504 	movi	r3,1364
   21718:	18800536 	bltu	r3,r2,21730 <_malloc_r+0x7e8>
   2171c:	3804d4ba 	srli	r2,r7,18
   21720:	11401f44 	addi	r5,r2,125
   21724:	10c01f04 	addi	r3,r2,124
   21728:	294b883a 	add	r5,r5,r5
   2172c:	003f4f06 	br	2146c <_malloc_r+0x524>
   21730:	01403f84 	movi	r5,254
   21734:	00c01f84 	movi	r3,126
   21738:	003f4c06 	br	2146c <_malloc_r+0x524>
   2173c:	98800117 	ldw	r2,4(r19)
   21740:	003fa006 	br	215c4 <_malloc_r+0x67c>
   21744:	8808d0fa 	srli	r4,r17,3
   21748:	20800044 	addi	r2,r4,1
   2174c:	1085883a 	add	r2,r2,r2
   21750:	003e9006 	br	21194 <_malloc_r+0x24c>

00021754 <memchr>:
   21754:	208000cc 	andi	r2,r4,3
   21758:	280f883a 	mov	r7,r5
   2175c:	10003426 	beq	r2,zero,21830 <memchr+0xdc>
   21760:	30bfffc4 	addi	r2,r6,-1
   21764:	30001a26 	beq	r6,zero,217d0 <memchr+0x7c>
   21768:	20c00003 	ldbu	r3,0(r4)
   2176c:	29803fcc 	andi	r6,r5,255
   21770:	30c0051e 	bne	r6,r3,21788 <memchr+0x34>
   21774:	00001806 	br	217d8 <memchr+0x84>
   21778:	10001526 	beq	r2,zero,217d0 <memchr+0x7c>
   2177c:	20c00003 	ldbu	r3,0(r4)
   21780:	10bfffc4 	addi	r2,r2,-1
   21784:	30c01426 	beq	r6,r3,217d8 <memchr+0x84>
   21788:	21000044 	addi	r4,r4,1
   2178c:	20c000cc 	andi	r3,r4,3
   21790:	183ff91e 	bne	r3,zero,21778 <memchr+0x24>
   21794:	020000c4 	movi	r8,3
   21798:	40801136 	bltu	r8,r2,217e0 <memchr+0x8c>
   2179c:	10000c26 	beq	r2,zero,217d0 <memchr+0x7c>
   217a0:	20c00003 	ldbu	r3,0(r4)
   217a4:	29403fcc 	andi	r5,r5,255
   217a8:	28c00b26 	beq	r5,r3,217d8 <memchr+0x84>
   217ac:	20c00044 	addi	r3,r4,1
   217b0:	39803fcc 	andi	r6,r7,255
   217b4:	2089883a 	add	r4,r4,r2
   217b8:	00000306 	br	217c8 <memchr+0x74>
   217bc:	18c00044 	addi	r3,r3,1
   217c0:	197fffc3 	ldbu	r5,-1(r3)
   217c4:	31400526 	beq	r6,r5,217dc <memchr+0x88>
   217c8:	1805883a 	mov	r2,r3
   217cc:	20fffb1e 	bne	r4,r3,217bc <memchr+0x68>
   217d0:	0005883a 	mov	r2,zero
   217d4:	f800283a 	ret
   217d8:	2005883a 	mov	r2,r4
   217dc:	f800283a 	ret
   217e0:	28c03fcc 	andi	r3,r5,255
   217e4:	1812923a 	slli	r9,r3,8
   217e8:	02ffbff4 	movhi	r11,65279
   217ec:	02a02074 	movhi	r10,32897
   217f0:	48d2b03a 	or	r9,r9,r3
   217f4:	4806943a 	slli	r3,r9,16
   217f8:	5affbfc4 	addi	r11,r11,-257
   217fc:	52a02004 	addi	r10,r10,-32640
   21800:	48d2b03a 	or	r9,r9,r3
   21804:	20c00017 	ldw	r3,0(r4)
   21808:	48c6f03a 	xor	r3,r9,r3
   2180c:	1acd883a 	add	r6,r3,r11
   21810:	00c6303a 	nor	r3,zero,r3
   21814:	30c6703a 	and	r3,r6,r3
   21818:	1a86703a 	and	r3,r3,r10
   2181c:	183fe01e 	bne	r3,zero,217a0 <memchr+0x4c>
   21820:	10bfff04 	addi	r2,r2,-4
   21824:	21000104 	addi	r4,r4,4
   21828:	40bff636 	bltu	r8,r2,21804 <memchr+0xb0>
   2182c:	003fdb06 	br	2179c <memchr+0x48>
   21830:	3005883a 	mov	r2,r6
   21834:	003fd706 	br	21794 <memchr+0x40>

00021838 <memcpy>:
   21838:	defffd04 	addi	sp,sp,-12
   2183c:	dfc00215 	stw	ra,8(sp)
   21840:	dc400115 	stw	r17,4(sp)
   21844:	dc000015 	stw	r16,0(sp)
   21848:	00c003c4 	movi	r3,15
   2184c:	2005883a 	mov	r2,r4
   21850:	1980452e 	bgeu	r3,r6,21968 <memcpy+0x130>
   21854:	2906b03a 	or	r3,r5,r4
   21858:	18c000cc 	andi	r3,r3,3
   2185c:	1800441e 	bne	r3,zero,21970 <memcpy+0x138>
   21860:	347ffc04 	addi	r17,r6,-16
   21864:	8822d13a 	srli	r17,r17,4
   21868:	28c00104 	addi	r3,r5,4
   2186c:	23400104 	addi	r13,r4,4
   21870:	8820913a 	slli	r16,r17,4
   21874:	2b000204 	addi	r12,r5,8
   21878:	22c00204 	addi	r11,r4,8
   2187c:	84000504 	addi	r16,r16,20
   21880:	2a800304 	addi	r10,r5,12
   21884:	22400304 	addi	r9,r4,12
   21888:	2c21883a 	add	r16,r5,r16
   2188c:	2811883a 	mov	r8,r5
   21890:	200f883a 	mov	r7,r4
   21894:	41000017 	ldw	r4,0(r8)
   21898:	1fc00017 	ldw	ra,0(r3)
   2189c:	63c00017 	ldw	r15,0(r12)
   218a0:	39000015 	stw	r4,0(r7)
   218a4:	53800017 	ldw	r14,0(r10)
   218a8:	6fc00015 	stw	ra,0(r13)
   218ac:	5bc00015 	stw	r15,0(r11)
   218b0:	4b800015 	stw	r14,0(r9)
   218b4:	18c00404 	addi	r3,r3,16
   218b8:	39c00404 	addi	r7,r7,16
   218bc:	42000404 	addi	r8,r8,16
   218c0:	6b400404 	addi	r13,r13,16
   218c4:	63000404 	addi	r12,r12,16
   218c8:	5ac00404 	addi	r11,r11,16
   218cc:	52800404 	addi	r10,r10,16
   218d0:	4a400404 	addi	r9,r9,16
   218d4:	1c3fef1e 	bne	r3,r16,21894 <memcpy+0x5c>
   218d8:	89c00044 	addi	r7,r17,1
   218dc:	380e913a 	slli	r7,r7,4
   218e0:	310003cc 	andi	r4,r6,15
   218e4:	02c000c4 	movi	r11,3
   218e8:	11c7883a 	add	r3,r2,r7
   218ec:	29cb883a 	add	r5,r5,r7
   218f0:	5900212e 	bgeu	r11,r4,21978 <memcpy+0x140>
   218f4:	1813883a 	mov	r9,r3
   218f8:	2811883a 	mov	r8,r5
   218fc:	200f883a 	mov	r7,r4
   21900:	42800017 	ldw	r10,0(r8)
   21904:	4a400104 	addi	r9,r9,4
   21908:	39ffff04 	addi	r7,r7,-4
   2190c:	4abfff15 	stw	r10,-4(r9)
   21910:	42000104 	addi	r8,r8,4
   21914:	59fffa36 	bltu	r11,r7,21900 <memcpy+0xc8>
   21918:	213fff04 	addi	r4,r4,-4
   2191c:	2008d0ba 	srli	r4,r4,2
   21920:	318000cc 	andi	r6,r6,3
   21924:	21000044 	addi	r4,r4,1
   21928:	2109883a 	add	r4,r4,r4
   2192c:	2109883a 	add	r4,r4,r4
   21930:	1907883a 	add	r3,r3,r4
   21934:	290b883a 	add	r5,r5,r4
   21938:	30000626 	beq	r6,zero,21954 <memcpy+0x11c>
   2193c:	198d883a 	add	r6,r3,r6
   21940:	29c00003 	ldbu	r7,0(r5)
   21944:	18c00044 	addi	r3,r3,1
   21948:	29400044 	addi	r5,r5,1
   2194c:	19ffffc5 	stb	r7,-1(r3)
   21950:	19bffb1e 	bne	r3,r6,21940 <memcpy+0x108>
   21954:	dfc00217 	ldw	ra,8(sp)
   21958:	dc400117 	ldw	r17,4(sp)
   2195c:	dc000017 	ldw	r16,0(sp)
   21960:	dec00304 	addi	sp,sp,12
   21964:	f800283a 	ret
   21968:	2007883a 	mov	r3,r4
   2196c:	003ff206 	br	21938 <memcpy+0x100>
   21970:	2007883a 	mov	r3,r4
   21974:	003ff106 	br	2193c <memcpy+0x104>
   21978:	200d883a 	mov	r6,r4
   2197c:	003fee06 	br	21938 <memcpy+0x100>

00021980 <memmove>:
   21980:	2005883a 	mov	r2,r4
   21984:	29000b2e 	bgeu	r5,r4,219b4 <memmove+0x34>
   21988:	298f883a 	add	r7,r5,r6
   2198c:	21c0092e 	bgeu	r4,r7,219b4 <memmove+0x34>
   21990:	2187883a 	add	r3,r4,r6
   21994:	198bc83a 	sub	r5,r3,r6
   21998:	30004826 	beq	r6,zero,21abc <memmove+0x13c>
   2199c:	39ffffc4 	addi	r7,r7,-1
   219a0:	39000003 	ldbu	r4,0(r7)
   219a4:	18ffffc4 	addi	r3,r3,-1
   219a8:	19000005 	stb	r4,0(r3)
   219ac:	28fffb1e 	bne	r5,r3,2199c <memmove+0x1c>
   219b0:	f800283a 	ret
   219b4:	00c003c4 	movi	r3,15
   219b8:	1980412e 	bgeu	r3,r6,21ac0 <memmove+0x140>
   219bc:	2886b03a 	or	r3,r5,r2
   219c0:	18c000cc 	andi	r3,r3,3
   219c4:	1800401e 	bne	r3,zero,21ac8 <memmove+0x148>
   219c8:	33fffc04 	addi	r15,r6,-16
   219cc:	781ed13a 	srli	r15,r15,4
   219d0:	28c00104 	addi	r3,r5,4
   219d4:	13400104 	addi	r13,r2,4
   219d8:	781c913a 	slli	r14,r15,4
   219dc:	2b000204 	addi	r12,r5,8
   219e0:	12c00204 	addi	r11,r2,8
   219e4:	73800504 	addi	r14,r14,20
   219e8:	2a800304 	addi	r10,r5,12
   219ec:	12400304 	addi	r9,r2,12
   219f0:	2b9d883a 	add	r14,r5,r14
   219f4:	2811883a 	mov	r8,r5
   219f8:	100f883a 	mov	r7,r2
   219fc:	41000017 	ldw	r4,0(r8)
   21a00:	39c00404 	addi	r7,r7,16
   21a04:	18c00404 	addi	r3,r3,16
   21a08:	393ffc15 	stw	r4,-16(r7)
   21a0c:	193ffc17 	ldw	r4,-16(r3)
   21a10:	6b400404 	addi	r13,r13,16
   21a14:	5ac00404 	addi	r11,r11,16
   21a18:	693ffc15 	stw	r4,-16(r13)
   21a1c:	61000017 	ldw	r4,0(r12)
   21a20:	4a400404 	addi	r9,r9,16
   21a24:	42000404 	addi	r8,r8,16
   21a28:	593ffc15 	stw	r4,-16(r11)
   21a2c:	51000017 	ldw	r4,0(r10)
   21a30:	63000404 	addi	r12,r12,16
   21a34:	52800404 	addi	r10,r10,16
   21a38:	493ffc15 	stw	r4,-16(r9)
   21a3c:	1bbfef1e 	bne	r3,r14,219fc <memmove+0x7c>
   21a40:	79000044 	addi	r4,r15,1
   21a44:	2008913a 	slli	r4,r4,4
   21a48:	328003cc 	andi	r10,r6,15
   21a4c:	02c000c4 	movi	r11,3
   21a50:	1107883a 	add	r3,r2,r4
   21a54:	290b883a 	add	r5,r5,r4
   21a58:	5a801e2e 	bgeu	r11,r10,21ad4 <memmove+0x154>
   21a5c:	1813883a 	mov	r9,r3
   21a60:	2811883a 	mov	r8,r5
   21a64:	500f883a 	mov	r7,r10
   21a68:	41000017 	ldw	r4,0(r8)
   21a6c:	4a400104 	addi	r9,r9,4
   21a70:	39ffff04 	addi	r7,r7,-4
   21a74:	493fff15 	stw	r4,-4(r9)
   21a78:	42000104 	addi	r8,r8,4
   21a7c:	59fffa36 	bltu	r11,r7,21a68 <memmove+0xe8>
   21a80:	513fff04 	addi	r4,r10,-4
   21a84:	2008d0ba 	srli	r4,r4,2
   21a88:	318000cc 	andi	r6,r6,3
   21a8c:	21000044 	addi	r4,r4,1
   21a90:	2109883a 	add	r4,r4,r4
   21a94:	2109883a 	add	r4,r4,r4
   21a98:	1907883a 	add	r3,r3,r4
   21a9c:	290b883a 	add	r5,r5,r4
   21aa0:	30000b26 	beq	r6,zero,21ad0 <memmove+0x150>
   21aa4:	198d883a 	add	r6,r3,r6
   21aa8:	29c00003 	ldbu	r7,0(r5)
   21aac:	18c00044 	addi	r3,r3,1
   21ab0:	29400044 	addi	r5,r5,1
   21ab4:	19ffffc5 	stb	r7,-1(r3)
   21ab8:	19bffb1e 	bne	r3,r6,21aa8 <memmove+0x128>
   21abc:	f800283a 	ret
   21ac0:	1007883a 	mov	r3,r2
   21ac4:	003ff606 	br	21aa0 <memmove+0x120>
   21ac8:	1007883a 	mov	r3,r2
   21acc:	003ff506 	br	21aa4 <memmove+0x124>
   21ad0:	f800283a 	ret
   21ad4:	500d883a 	mov	r6,r10
   21ad8:	003ff106 	br	21aa0 <memmove+0x120>

00021adc <memset>:
   21adc:	20c000cc 	andi	r3,r4,3
   21ae0:	2005883a 	mov	r2,r4
   21ae4:	18004426 	beq	r3,zero,21bf8 <memset+0x11c>
   21ae8:	31ffffc4 	addi	r7,r6,-1
   21aec:	30004026 	beq	r6,zero,21bf0 <memset+0x114>
   21af0:	2813883a 	mov	r9,r5
   21af4:	200d883a 	mov	r6,r4
   21af8:	2007883a 	mov	r3,r4
   21afc:	00000406 	br	21b10 <memset+0x34>
   21b00:	3a3fffc4 	addi	r8,r7,-1
   21b04:	31800044 	addi	r6,r6,1
   21b08:	38003926 	beq	r7,zero,21bf0 <memset+0x114>
   21b0c:	400f883a 	mov	r7,r8
   21b10:	18c00044 	addi	r3,r3,1
   21b14:	32400005 	stb	r9,0(r6)
   21b18:	1a0000cc 	andi	r8,r3,3
   21b1c:	403ff81e 	bne	r8,zero,21b00 <memset+0x24>
   21b20:	010000c4 	movi	r4,3
   21b24:	21c02d2e 	bgeu	r4,r7,21bdc <memset+0x100>
   21b28:	29003fcc 	andi	r4,r5,255
   21b2c:	200c923a 	slli	r6,r4,8
   21b30:	3108b03a 	or	r4,r6,r4
   21b34:	200c943a 	slli	r6,r4,16
   21b38:	218cb03a 	or	r6,r4,r6
   21b3c:	010003c4 	movi	r4,15
   21b40:	21c0182e 	bgeu	r4,r7,21ba4 <memset+0xc8>
   21b44:	3b3ffc04 	addi	r12,r7,-16
   21b48:	6018d13a 	srli	r12,r12,4
   21b4c:	1a000104 	addi	r8,r3,4
   21b50:	1ac00204 	addi	r11,r3,8
   21b54:	6008913a 	slli	r4,r12,4
   21b58:	1a800304 	addi	r10,r3,12
   21b5c:	1813883a 	mov	r9,r3
   21b60:	21000504 	addi	r4,r4,20
   21b64:	1909883a 	add	r4,r3,r4
   21b68:	49800015 	stw	r6,0(r9)
   21b6c:	41800015 	stw	r6,0(r8)
   21b70:	59800015 	stw	r6,0(r11)
   21b74:	51800015 	stw	r6,0(r10)
   21b78:	42000404 	addi	r8,r8,16
   21b7c:	4a400404 	addi	r9,r9,16
   21b80:	5ac00404 	addi	r11,r11,16
   21b84:	52800404 	addi	r10,r10,16
   21b88:	413ff71e 	bne	r8,r4,21b68 <memset+0x8c>
   21b8c:	63000044 	addi	r12,r12,1
   21b90:	6018913a 	slli	r12,r12,4
   21b94:	39c003cc 	andi	r7,r7,15
   21b98:	010000c4 	movi	r4,3
   21b9c:	1b07883a 	add	r3,r3,r12
   21ba0:	21c00e2e 	bgeu	r4,r7,21bdc <memset+0x100>
   21ba4:	1813883a 	mov	r9,r3
   21ba8:	3811883a 	mov	r8,r7
   21bac:	010000c4 	movi	r4,3
   21bb0:	49800015 	stw	r6,0(r9)
   21bb4:	423fff04 	addi	r8,r8,-4
   21bb8:	4a400104 	addi	r9,r9,4
   21bbc:	223ffc36 	bltu	r4,r8,21bb0 <memset+0xd4>
   21bc0:	393fff04 	addi	r4,r7,-4
   21bc4:	2008d0ba 	srli	r4,r4,2
   21bc8:	39c000cc 	andi	r7,r7,3
   21bcc:	21000044 	addi	r4,r4,1
   21bd0:	2109883a 	add	r4,r4,r4
   21bd4:	2109883a 	add	r4,r4,r4
   21bd8:	1907883a 	add	r3,r3,r4
   21bdc:	38000526 	beq	r7,zero,21bf4 <memset+0x118>
   21be0:	19cf883a 	add	r7,r3,r7
   21be4:	19400005 	stb	r5,0(r3)
   21be8:	18c00044 	addi	r3,r3,1
   21bec:	38fffd1e 	bne	r7,r3,21be4 <memset+0x108>
   21bf0:	f800283a 	ret
   21bf4:	f800283a 	ret
   21bf8:	2007883a 	mov	r3,r4
   21bfc:	300f883a 	mov	r7,r6
   21c00:	003fc706 	br	21b20 <memset+0x44>

00021c04 <_realloc_r>:
   21c04:	defff604 	addi	sp,sp,-40
   21c08:	dc400115 	stw	r17,4(sp)
   21c0c:	dfc00915 	stw	ra,36(sp)
   21c10:	df000815 	stw	fp,32(sp)
   21c14:	ddc00715 	stw	r23,28(sp)
   21c18:	dd800615 	stw	r22,24(sp)
   21c1c:	dd400515 	stw	r21,20(sp)
   21c20:	dd000415 	stw	r20,16(sp)
   21c24:	dcc00315 	stw	r19,12(sp)
   21c28:	dc800215 	stw	r18,8(sp)
   21c2c:	dc000015 	stw	r16,0(sp)
   21c30:	3023883a 	mov	r17,r6
   21c34:	2800b626 	beq	r5,zero,21f10 <_realloc_r+0x30c>
   21c38:	2829883a 	mov	r20,r5
   21c3c:	2025883a 	mov	r18,r4
   21c40:	00239840 	call	23984 <__malloc_lock>
   21c44:	a0ffff17 	ldw	r3,-4(r20)
   21c48:	043fff04 	movi	r16,-4
   21c4c:	888002c4 	addi	r2,r17,11
   21c50:	01000584 	movi	r4,22
   21c54:	a57ffe04 	addi	r21,r20,-8
   21c58:	1c20703a 	and	r16,r3,r16
   21c5c:	2080332e 	bgeu	r4,r2,21d2c <_realloc_r+0x128>
   21c60:	05bffe04 	movi	r22,-8
   21c64:	15ac703a 	and	r22,r2,r22
   21c68:	b005883a 	mov	r2,r22
   21c6c:	b0005716 	blt	r22,zero,21dcc <_realloc_r+0x1c8>
   21c70:	b4405636 	bltu	r22,r17,21dcc <_realloc_r+0x1c8>
   21c74:	8080300e 	bge	r16,r2,21d38 <_realloc_r+0x134>
   21c78:	07000134 	movhi	fp,4
   21c7c:	e7010904 	addi	fp,fp,1060
   21c80:	e2000217 	ldw	r8,8(fp)
   21c84:	ac09883a 	add	r4,r21,r16
   21c88:	22006126 	beq	r4,r8,21e10 <_realloc_r+0x20c>
   21c8c:	22400117 	ldw	r9,4(r4)
   21c90:	01ffff84 	movi	r7,-2
   21c94:	49ce703a 	and	r7,r9,r7
   21c98:	21cf883a 	add	r7,r4,r7
   21c9c:	39800117 	ldw	r6,4(r7)
   21ca0:	3180004c 	andi	r6,r6,1
   21ca4:	30003e26 	beq	r6,zero,21da0 <_realloc_r+0x19c>
   21ca8:	18c0004c 	andi	r3,r3,1
   21cac:	18008126 	beq	r3,zero,21eb4 <_realloc_r+0x2b0>
   21cb0:	880b883a 	mov	r5,r17
   21cb4:	9009883a 	mov	r4,r18
   21cb8:	0020f480 	call	20f48 <_malloc_r>
   21cbc:	1023883a 	mov	r17,r2
   21cc0:	10011e26 	beq	r2,zero,2213c <_realloc_r+0x538>
   21cc4:	a0ffff17 	ldw	r3,-4(r20)
   21cc8:	113ffe04 	addi	r4,r2,-8
   21ccc:	00bfff84 	movi	r2,-2
   21cd0:	1884703a 	and	r2,r3,r2
   21cd4:	a885883a 	add	r2,r21,r2
   21cd8:	2080ee26 	beq	r4,r2,22094 <_realloc_r+0x490>
   21cdc:	81bfff04 	addi	r6,r16,-4
   21ce0:	00800904 	movi	r2,36
   21ce4:	1180b836 	bltu	r2,r6,21fc8 <_realloc_r+0x3c4>
   21ce8:	00c004c4 	movi	r3,19
   21cec:	19809536 	bltu	r3,r6,21f44 <_realloc_r+0x340>
   21cf0:	8805883a 	mov	r2,r17
   21cf4:	a007883a 	mov	r3,r20
   21cf8:	19000017 	ldw	r4,0(r3)
   21cfc:	11000015 	stw	r4,0(r2)
   21d00:	19000117 	ldw	r4,4(r3)
   21d04:	11000115 	stw	r4,4(r2)
   21d08:	18c00217 	ldw	r3,8(r3)
   21d0c:	10c00215 	stw	r3,8(r2)
   21d10:	a00b883a 	mov	r5,r20
   21d14:	9009883a 	mov	r4,r18
   21d18:	00229d00 	call	229d0 <_free_r>
   21d1c:	9009883a 	mov	r4,r18
   21d20:	00239a80 	call	239a8 <__malloc_unlock>
   21d24:	8805883a 	mov	r2,r17
   21d28:	00001106 	br	21d70 <_realloc_r+0x16c>
   21d2c:	00800404 	movi	r2,16
   21d30:	102d883a 	mov	r22,r2
   21d34:	003fce06 	br	21c70 <_realloc_r+0x6c>
   21d38:	a023883a 	mov	r17,r20
   21d3c:	858fc83a 	sub	r7,r16,r22
   21d40:	008003c4 	movi	r2,15
   21d44:	18c0004c 	andi	r3,r3,1
   21d48:	11c02436 	bltu	r2,r7,21ddc <_realloc_r+0x1d8>
   21d4c:	1c06b03a 	or	r3,r3,r16
   21d50:	a8c00115 	stw	r3,4(r21)
   21d54:	ac21883a 	add	r16,r21,r16
   21d58:	80800117 	ldw	r2,4(r16)
   21d5c:	10800054 	ori	r2,r2,1
   21d60:	80800115 	stw	r2,4(r16)
   21d64:	9009883a 	mov	r4,r18
   21d68:	00239a80 	call	239a8 <__malloc_unlock>
   21d6c:	8805883a 	mov	r2,r17
   21d70:	dfc00917 	ldw	ra,36(sp)
   21d74:	df000817 	ldw	fp,32(sp)
   21d78:	ddc00717 	ldw	r23,28(sp)
   21d7c:	dd800617 	ldw	r22,24(sp)
   21d80:	dd400517 	ldw	r21,20(sp)
   21d84:	dd000417 	ldw	r20,16(sp)
   21d88:	dcc00317 	ldw	r19,12(sp)
   21d8c:	dc800217 	ldw	r18,8(sp)
   21d90:	dc400117 	ldw	r17,4(sp)
   21d94:	dc000017 	ldw	r16,0(sp)
   21d98:	dec00a04 	addi	sp,sp,40
   21d9c:	f800283a 	ret
   21da0:	017fff04 	movi	r5,-4
   21da4:	494a703a 	and	r5,r9,r5
   21da8:	814d883a 	add	r6,r16,r5
   21dac:	30801e16 	blt	r6,r2,21e28 <_realloc_r+0x224>
   21db0:	20800317 	ldw	r2,12(r4)
   21db4:	21000217 	ldw	r4,8(r4)
   21db8:	a023883a 	mov	r17,r20
   21dbc:	3021883a 	mov	r16,r6
   21dc0:	20800315 	stw	r2,12(r4)
   21dc4:	11000215 	stw	r4,8(r2)
   21dc8:	003fdc06 	br	21d3c <_realloc_r+0x138>
   21dcc:	00800304 	movi	r2,12
   21dd0:	90800015 	stw	r2,0(r18)
   21dd4:	0005883a 	mov	r2,zero
   21dd8:	003fe506 	br	21d70 <_realloc_r+0x16c>
   21ddc:	1d86b03a 	or	r3,r3,r22
   21de0:	a8c00115 	stw	r3,4(r21)
   21de4:	ad8b883a 	add	r5,r21,r22
   21de8:	38c00054 	ori	r3,r7,1
   21dec:	28c00115 	stw	r3,4(r5)
   21df0:	29cf883a 	add	r7,r5,r7
   21df4:	38c00117 	ldw	r3,4(r7)
   21df8:	29400204 	addi	r5,r5,8
   21dfc:	9009883a 	mov	r4,r18
   21e00:	18800054 	ori	r2,r3,1
   21e04:	38800115 	stw	r2,4(r7)
   21e08:	00229d00 	call	229d0 <_free_r>
   21e0c:	003fd506 	br	21d64 <_realloc_r+0x160>
   21e10:	21c00117 	ldw	r7,4(r4)
   21e14:	017fff04 	movi	r5,-4
   21e18:	b1800404 	addi	r6,r22,16
   21e1c:	394a703a 	and	r5,r7,r5
   21e20:	814f883a 	add	r7,r16,r5
   21e24:	39805b0e 	bge	r7,r6,21f94 <_realloc_r+0x390>
   21e28:	18c0004c 	andi	r3,r3,1
   21e2c:	183fa01e 	bne	r3,zero,21cb0 <_realloc_r+0xac>
   21e30:	a4fffe17 	ldw	r19,-8(r20)
   21e34:	00ffff04 	movi	r3,-4
   21e38:	ace7c83a 	sub	r19,r21,r19
   21e3c:	99800117 	ldw	r6,4(r19)
   21e40:	30c6703a 	and	r3,r6,r3
   21e44:	20002026 	beq	r4,zero,21ec8 <_realloc_r+0x2c4>
   21e48:	80ef883a 	add	r23,r16,r3
   21e4c:	b96f883a 	add	r23,r23,r5
   21e50:	22006126 	beq	r4,r8,21fd8 <_realloc_r+0x3d4>
   21e54:	b8801c16 	blt	r23,r2,21ec8 <_realloc_r+0x2c4>
   21e58:	20800317 	ldw	r2,12(r4)
   21e5c:	20c00217 	ldw	r3,8(r4)
   21e60:	81bfff04 	addi	r6,r16,-4
   21e64:	01000904 	movi	r4,36
   21e68:	18800315 	stw	r2,12(r3)
   21e6c:	10c00215 	stw	r3,8(r2)
   21e70:	98c00217 	ldw	r3,8(r19)
   21e74:	98800317 	ldw	r2,12(r19)
   21e78:	9c400204 	addi	r17,r19,8
   21e7c:	18800315 	stw	r2,12(r3)
   21e80:	10c00215 	stw	r3,8(r2)
   21e84:	21801b36 	bltu	r4,r6,21ef4 <_realloc_r+0x2f0>
   21e88:	008004c4 	movi	r2,19
   21e8c:	1180362e 	bgeu	r2,r6,21f68 <_realloc_r+0x364>
   21e90:	a0800017 	ldw	r2,0(r20)
   21e94:	98800215 	stw	r2,8(r19)
   21e98:	a0800117 	ldw	r2,4(r20)
   21e9c:	98800315 	stw	r2,12(r19)
   21ea0:	008006c4 	movi	r2,27
   21ea4:	11808136 	bltu	r2,r6,220ac <_realloc_r+0x4a8>
   21ea8:	98800404 	addi	r2,r19,16
   21eac:	a5000204 	addi	r20,r20,8
   21eb0:	00002e06 	br	21f6c <_realloc_r+0x368>
   21eb4:	a4fffe17 	ldw	r19,-8(r20)
   21eb8:	00ffff04 	movi	r3,-4
   21ebc:	ace7c83a 	sub	r19,r21,r19
   21ec0:	99000117 	ldw	r4,4(r19)
   21ec4:	20c6703a 	and	r3,r4,r3
   21ec8:	983f7926 	beq	r19,zero,21cb0 <_realloc_r+0xac>
   21ecc:	80ef883a 	add	r23,r16,r3
   21ed0:	b8bf7716 	blt	r23,r2,21cb0 <_realloc_r+0xac>
   21ed4:	98800317 	ldw	r2,12(r19)
   21ed8:	98c00217 	ldw	r3,8(r19)
   21edc:	81bfff04 	addi	r6,r16,-4
   21ee0:	01000904 	movi	r4,36
   21ee4:	18800315 	stw	r2,12(r3)
   21ee8:	10c00215 	stw	r3,8(r2)
   21eec:	9c400204 	addi	r17,r19,8
   21ef0:	21bfe52e 	bgeu	r4,r6,21e88 <_realloc_r+0x284>
   21ef4:	a00b883a 	mov	r5,r20
   21ef8:	8809883a 	mov	r4,r17
   21efc:	00219800 	call	21980 <memmove>
   21f00:	98c00117 	ldw	r3,4(r19)
   21f04:	b821883a 	mov	r16,r23
   21f08:	982b883a 	mov	r21,r19
   21f0c:	003f8b06 	br	21d3c <_realloc_r+0x138>
   21f10:	300b883a 	mov	r5,r6
   21f14:	dfc00917 	ldw	ra,36(sp)
   21f18:	df000817 	ldw	fp,32(sp)
   21f1c:	ddc00717 	ldw	r23,28(sp)
   21f20:	dd800617 	ldw	r22,24(sp)
   21f24:	dd400517 	ldw	r21,20(sp)
   21f28:	dd000417 	ldw	r20,16(sp)
   21f2c:	dcc00317 	ldw	r19,12(sp)
   21f30:	dc800217 	ldw	r18,8(sp)
   21f34:	dc400117 	ldw	r17,4(sp)
   21f38:	dc000017 	ldw	r16,0(sp)
   21f3c:	dec00a04 	addi	sp,sp,40
   21f40:	0020f481 	jmpi	20f48 <_malloc_r>
   21f44:	a0c00017 	ldw	r3,0(r20)
   21f48:	88c00015 	stw	r3,0(r17)
   21f4c:	a0c00117 	ldw	r3,4(r20)
   21f50:	88c00115 	stw	r3,4(r17)
   21f54:	00c006c4 	movi	r3,27
   21f58:	19804636 	bltu	r3,r6,22074 <_realloc_r+0x470>
   21f5c:	88800204 	addi	r2,r17,8
   21f60:	a0c00204 	addi	r3,r20,8
   21f64:	003f6406 	br	21cf8 <_realloc_r+0xf4>
   21f68:	8805883a 	mov	r2,r17
   21f6c:	a0c00017 	ldw	r3,0(r20)
   21f70:	b821883a 	mov	r16,r23
   21f74:	982b883a 	mov	r21,r19
   21f78:	10c00015 	stw	r3,0(r2)
   21f7c:	a0c00117 	ldw	r3,4(r20)
   21f80:	10c00115 	stw	r3,4(r2)
   21f84:	a0c00217 	ldw	r3,8(r20)
   21f88:	10c00215 	stw	r3,8(r2)
   21f8c:	98c00117 	ldw	r3,4(r19)
   21f90:	003f6a06 	br	21d3c <_realloc_r+0x138>
   21f94:	adab883a 	add	r21,r21,r22
   21f98:	3d85c83a 	sub	r2,r7,r22
   21f9c:	e5400215 	stw	r21,8(fp)
   21fa0:	10800054 	ori	r2,r2,1
   21fa4:	a8800115 	stw	r2,4(r21)
   21fa8:	a0bfff17 	ldw	r2,-4(r20)
   21fac:	9009883a 	mov	r4,r18
   21fb0:	1080004c 	andi	r2,r2,1
   21fb4:	1584b03a 	or	r2,r2,r22
   21fb8:	a0bfff15 	stw	r2,-4(r20)
   21fbc:	00239a80 	call	239a8 <__malloc_unlock>
   21fc0:	a005883a 	mov	r2,r20
   21fc4:	003f6a06 	br	21d70 <_realloc_r+0x16c>
   21fc8:	a00b883a 	mov	r5,r20
   21fcc:	8809883a 	mov	r4,r17
   21fd0:	00219800 	call	21980 <memmove>
   21fd4:	003f4e06 	br	21d10 <_realloc_r+0x10c>
   21fd8:	b1000404 	addi	r4,r22,16
   21fdc:	b93fba16 	blt	r23,r4,21ec8 <_realloc_r+0x2c4>
   21fe0:	98800317 	ldw	r2,12(r19)
   21fe4:	98c00217 	ldw	r3,8(r19)
   21fe8:	81bfff04 	addi	r6,r16,-4
   21fec:	01000904 	movi	r4,36
   21ff0:	18800315 	stw	r2,12(r3)
   21ff4:	10c00215 	stw	r3,8(r2)
   21ff8:	9c400204 	addi	r17,r19,8
   21ffc:	21804336 	bltu	r4,r6,2210c <_realloc_r+0x508>
   22000:	008004c4 	movi	r2,19
   22004:	11803f2e 	bgeu	r2,r6,22104 <_realloc_r+0x500>
   22008:	a0800017 	ldw	r2,0(r20)
   2200c:	98800215 	stw	r2,8(r19)
   22010:	a0800117 	ldw	r2,4(r20)
   22014:	98800315 	stw	r2,12(r19)
   22018:	008006c4 	movi	r2,27
   2201c:	11803f36 	bltu	r2,r6,2211c <_realloc_r+0x518>
   22020:	98800404 	addi	r2,r19,16
   22024:	a5000204 	addi	r20,r20,8
   22028:	a0c00017 	ldw	r3,0(r20)
   2202c:	10c00015 	stw	r3,0(r2)
   22030:	a0c00117 	ldw	r3,4(r20)
   22034:	10c00115 	stw	r3,4(r2)
   22038:	a0c00217 	ldw	r3,8(r20)
   2203c:	10c00215 	stw	r3,8(r2)
   22040:	9d87883a 	add	r3,r19,r22
   22044:	bd85c83a 	sub	r2,r23,r22
   22048:	e0c00215 	stw	r3,8(fp)
   2204c:	10800054 	ori	r2,r2,1
   22050:	18800115 	stw	r2,4(r3)
   22054:	98800117 	ldw	r2,4(r19)
   22058:	9009883a 	mov	r4,r18
   2205c:	1080004c 	andi	r2,r2,1
   22060:	1584b03a 	or	r2,r2,r22
   22064:	98800115 	stw	r2,4(r19)
   22068:	00239a80 	call	239a8 <__malloc_unlock>
   2206c:	8805883a 	mov	r2,r17
   22070:	003f3f06 	br	21d70 <_realloc_r+0x16c>
   22074:	a0c00217 	ldw	r3,8(r20)
   22078:	88c00215 	stw	r3,8(r17)
   2207c:	a0c00317 	ldw	r3,12(r20)
   22080:	88c00315 	stw	r3,12(r17)
   22084:	30801126 	beq	r6,r2,220cc <_realloc_r+0x4c8>
   22088:	88800404 	addi	r2,r17,16
   2208c:	a0c00404 	addi	r3,r20,16
   22090:	003f1906 	br	21cf8 <_realloc_r+0xf4>
   22094:	893fff17 	ldw	r4,-4(r17)
   22098:	00bfff04 	movi	r2,-4
   2209c:	a023883a 	mov	r17,r20
   220a0:	2084703a 	and	r2,r4,r2
   220a4:	80a1883a 	add	r16,r16,r2
   220a8:	003f2406 	br	21d3c <_realloc_r+0x138>
   220ac:	a0800217 	ldw	r2,8(r20)
   220b0:	98800415 	stw	r2,16(r19)
   220b4:	a0800317 	ldw	r2,12(r20)
   220b8:	98800515 	stw	r2,20(r19)
   220bc:	31000a26 	beq	r6,r4,220e8 <_realloc_r+0x4e4>
   220c0:	98800604 	addi	r2,r19,24
   220c4:	a5000404 	addi	r20,r20,16
   220c8:	003fa806 	br	21f6c <_realloc_r+0x368>
   220cc:	a1000417 	ldw	r4,16(r20)
   220d0:	88800604 	addi	r2,r17,24
   220d4:	a0c00604 	addi	r3,r20,24
   220d8:	89000415 	stw	r4,16(r17)
   220dc:	a1000517 	ldw	r4,20(r20)
   220e0:	89000515 	stw	r4,20(r17)
   220e4:	003f0406 	br	21cf8 <_realloc_r+0xf4>
   220e8:	a0c00417 	ldw	r3,16(r20)
   220ec:	a5000604 	addi	r20,r20,24
   220f0:	98800804 	addi	r2,r19,32
   220f4:	98c00615 	stw	r3,24(r19)
   220f8:	a0ffff17 	ldw	r3,-4(r20)
   220fc:	98c00715 	stw	r3,28(r19)
   22100:	003f9a06 	br	21f6c <_realloc_r+0x368>
   22104:	8805883a 	mov	r2,r17
   22108:	003fc706 	br	22028 <_realloc_r+0x424>
   2210c:	a00b883a 	mov	r5,r20
   22110:	8809883a 	mov	r4,r17
   22114:	00219800 	call	21980 <memmove>
   22118:	003fc906 	br	22040 <_realloc_r+0x43c>
   2211c:	a0800217 	ldw	r2,8(r20)
   22120:	98800415 	stw	r2,16(r19)
   22124:	a0800317 	ldw	r2,12(r20)
   22128:	98800515 	stw	r2,20(r19)
   2212c:	31000726 	beq	r6,r4,2214c <_realloc_r+0x548>
   22130:	98800604 	addi	r2,r19,24
   22134:	a5000404 	addi	r20,r20,16
   22138:	003fbb06 	br	22028 <_realloc_r+0x424>
   2213c:	9009883a 	mov	r4,r18
   22140:	00239a80 	call	239a8 <__malloc_unlock>
   22144:	0005883a 	mov	r2,zero
   22148:	003f0906 	br	21d70 <_realloc_r+0x16c>
   2214c:	a0c00417 	ldw	r3,16(r20)
   22150:	a5000604 	addi	r20,r20,24
   22154:	98800804 	addi	r2,r19,32
   22158:	98c00615 	stw	r3,24(r19)
   2215c:	a0ffff17 	ldw	r3,-4(r20)
   22160:	98c00715 	stw	r3,28(r19)
   22164:	003fb006 	br	22028 <_realloc_r+0x424>

00022168 <_sbrk_r>:
   22168:	defffd04 	addi	sp,sp,-12
   2216c:	dc000015 	stw	r16,0(sp)
   22170:	04000134 	movhi	r16,4
   22174:	dc400115 	stw	r17,4(sp)
   22178:	84029104 	addi	r16,r16,2628
   2217c:	2023883a 	mov	r17,r4
   22180:	2809883a 	mov	r4,r5
   22184:	dfc00215 	stw	ra,8(sp)
   22188:	80000015 	stw	zero,0(r16)
   2218c:	0023ba40 	call	23ba4 <sbrk>
   22190:	00ffffc4 	movi	r3,-1
   22194:	10c00526 	beq	r2,r3,221ac <_sbrk_r+0x44>
   22198:	dfc00217 	ldw	ra,8(sp)
   2219c:	dc400117 	ldw	r17,4(sp)
   221a0:	dc000017 	ldw	r16,0(sp)
   221a4:	dec00304 	addi	sp,sp,12
   221a8:	f800283a 	ret
   221ac:	80c00017 	ldw	r3,0(r16)
   221b0:	183ff926 	beq	r3,zero,22198 <_sbrk_r+0x30>
   221b4:	88c00015 	stw	r3,0(r17)
   221b8:	003ff706 	br	22198 <_sbrk_r+0x30>

000221bc <__sread>:
   221bc:	defffe04 	addi	sp,sp,-8
   221c0:	dc000015 	stw	r16,0(sp)
   221c4:	2821883a 	mov	r16,r5
   221c8:	2940038f 	ldh	r5,14(r5)
   221cc:	dfc00115 	stw	ra,4(sp)
   221d0:	0022efc0 	call	22efc <_read_r>
   221d4:	10000716 	blt	r2,zero,221f4 <__sread+0x38>
   221d8:	80c01417 	ldw	r3,80(r16)
   221dc:	1887883a 	add	r3,r3,r2
   221e0:	80c01415 	stw	r3,80(r16)
   221e4:	dfc00117 	ldw	ra,4(sp)
   221e8:	dc000017 	ldw	r16,0(sp)
   221ec:	dec00204 	addi	sp,sp,8
   221f0:	f800283a 	ret
   221f4:	80c0030b 	ldhu	r3,12(r16)
   221f8:	18fbffcc 	andi	r3,r3,61439
   221fc:	80c0030d 	sth	r3,12(r16)
   22200:	dfc00117 	ldw	ra,4(sp)
   22204:	dc000017 	ldw	r16,0(sp)
   22208:	dec00204 	addi	sp,sp,8
   2220c:	f800283a 	ret

00022210 <__seofread>:
   22210:	0005883a 	mov	r2,zero
   22214:	f800283a 	ret

00022218 <__swrite>:
   22218:	2880030b 	ldhu	r2,12(r5)
   2221c:	defffb04 	addi	sp,sp,-20
   22220:	dcc00315 	stw	r19,12(sp)
   22224:	dc800215 	stw	r18,8(sp)
   22228:	dc400115 	stw	r17,4(sp)
   2222c:	dc000015 	stw	r16,0(sp)
   22230:	dfc00415 	stw	ra,16(sp)
   22234:	10c0400c 	andi	r3,r2,256
   22238:	2821883a 	mov	r16,r5
   2223c:	2023883a 	mov	r17,r4
   22240:	3025883a 	mov	r18,r6
   22244:	3827883a 	mov	r19,r7
   22248:	18000526 	beq	r3,zero,22260 <__swrite+0x48>
   2224c:	2940038f 	ldh	r5,14(r5)
   22250:	01c00084 	movi	r7,2
   22254:	000d883a 	mov	r6,zero
   22258:	0022ce00 	call	22ce0 <_lseek_r>
   2225c:	8080030b 	ldhu	r2,12(r16)
   22260:	8140038f 	ldh	r5,14(r16)
   22264:	10bbffcc 	andi	r2,r2,61439
   22268:	980f883a 	mov	r7,r19
   2226c:	900d883a 	mov	r6,r18
   22270:	8809883a 	mov	r4,r17
   22274:	8080030d 	sth	r2,12(r16)
   22278:	dfc00417 	ldw	ra,16(sp)
   2227c:	dcc00317 	ldw	r19,12(sp)
   22280:	dc800217 	ldw	r18,8(sp)
   22284:	dc400117 	ldw	r17,4(sp)
   22288:	dc000017 	ldw	r16,0(sp)
   2228c:	dec00504 	addi	sp,sp,20
   22290:	00222f81 	jmpi	222f8 <_write_r>

00022294 <__sseek>:
   22294:	defffe04 	addi	sp,sp,-8
   22298:	dc000015 	stw	r16,0(sp)
   2229c:	2821883a 	mov	r16,r5
   222a0:	2940038f 	ldh	r5,14(r5)
   222a4:	dfc00115 	stw	ra,4(sp)
   222a8:	0022ce00 	call	22ce0 <_lseek_r>
   222ac:	00ffffc4 	movi	r3,-1
   222b0:	10c00826 	beq	r2,r3,222d4 <__sseek+0x40>
   222b4:	80c0030b 	ldhu	r3,12(r16)
   222b8:	80801415 	stw	r2,80(r16)
   222bc:	18c40014 	ori	r3,r3,4096
   222c0:	80c0030d 	sth	r3,12(r16)
   222c4:	dfc00117 	ldw	ra,4(sp)
   222c8:	dc000017 	ldw	r16,0(sp)
   222cc:	dec00204 	addi	sp,sp,8
   222d0:	f800283a 	ret
   222d4:	80c0030b 	ldhu	r3,12(r16)
   222d8:	18fbffcc 	andi	r3,r3,61439
   222dc:	80c0030d 	sth	r3,12(r16)
   222e0:	dfc00117 	ldw	ra,4(sp)
   222e4:	dc000017 	ldw	r16,0(sp)
   222e8:	dec00204 	addi	sp,sp,8
   222ec:	f800283a 	ret

000222f0 <__sclose>:
   222f0:	2940038f 	ldh	r5,14(r5)
   222f4:	00224ac1 	jmpi	224ac <_close_r>

000222f8 <_write_r>:
   222f8:	defffd04 	addi	sp,sp,-12
   222fc:	2805883a 	mov	r2,r5
   22300:	dc000015 	stw	r16,0(sp)
   22304:	04000134 	movhi	r16,4
   22308:	dc400115 	stw	r17,4(sp)
   2230c:	300b883a 	mov	r5,r6
   22310:	84029104 	addi	r16,r16,2628
   22314:	2023883a 	mov	r17,r4
   22318:	380d883a 	mov	r6,r7
   2231c:	1009883a 	mov	r4,r2
   22320:	dfc00215 	stw	ra,8(sp)
   22324:	80000015 	stw	zero,0(r16)
   22328:	0023ca40 	call	23ca4 <write>
   2232c:	00ffffc4 	movi	r3,-1
   22330:	10c00526 	beq	r2,r3,22348 <_write_r+0x50>
   22334:	dfc00217 	ldw	ra,8(sp)
   22338:	dc400117 	ldw	r17,4(sp)
   2233c:	dc000017 	ldw	r16,0(sp)
   22340:	dec00304 	addi	sp,sp,12
   22344:	f800283a 	ret
   22348:	80c00017 	ldw	r3,0(r16)
   2234c:	183ff926 	beq	r3,zero,22334 <_write_r+0x3c>
   22350:	88c00015 	stw	r3,0(r17)
   22354:	003ff706 	br	22334 <_write_r+0x3c>

00022358 <__swsetup_r>:
   22358:	00800134 	movhi	r2,4
   2235c:	defffd04 	addi	sp,sp,-12
   22360:	10828104 	addi	r2,r2,2564
   22364:	dc400115 	stw	r17,4(sp)
   22368:	2023883a 	mov	r17,r4
   2236c:	11000017 	ldw	r4,0(r2)
   22370:	dc000015 	stw	r16,0(sp)
   22374:	dfc00215 	stw	ra,8(sp)
   22378:	2821883a 	mov	r16,r5
   2237c:	20000226 	beq	r4,zero,22388 <__swsetup_r+0x30>
   22380:	20800e17 	ldw	r2,56(r4)
   22384:	10003126 	beq	r2,zero,2244c <__swsetup_r+0xf4>
   22388:	8080030b 	ldhu	r2,12(r16)
   2238c:	10c0020c 	andi	r3,r2,8
   22390:	1009883a 	mov	r4,r2
   22394:	18000f26 	beq	r3,zero,223d4 <__swsetup_r+0x7c>
   22398:	80c00417 	ldw	r3,16(r16)
   2239c:	18001526 	beq	r3,zero,223f4 <__swsetup_r+0x9c>
   223a0:	1100004c 	andi	r4,r2,1
   223a4:	20001c1e 	bne	r4,zero,22418 <__swsetup_r+0xc0>
   223a8:	1080008c 	andi	r2,r2,2
   223ac:	1000291e 	bne	r2,zero,22454 <__swsetup_r+0xfc>
   223b0:	80800517 	ldw	r2,20(r16)
   223b4:	80800215 	stw	r2,8(r16)
   223b8:	18001c26 	beq	r3,zero,2242c <__swsetup_r+0xd4>
   223bc:	0005883a 	mov	r2,zero
   223c0:	dfc00217 	ldw	ra,8(sp)
   223c4:	dc400117 	ldw	r17,4(sp)
   223c8:	dc000017 	ldw	r16,0(sp)
   223cc:	dec00304 	addi	sp,sp,12
   223d0:	f800283a 	ret
   223d4:	2080040c 	andi	r2,r4,16
   223d8:	10002e26 	beq	r2,zero,22494 <__swsetup_r+0x13c>
   223dc:	2080010c 	andi	r2,r4,4
   223e0:	10001e1e 	bne	r2,zero,2245c <__swsetup_r+0x104>
   223e4:	80c00417 	ldw	r3,16(r16)
   223e8:	20800214 	ori	r2,r4,8
   223ec:	8080030d 	sth	r2,12(r16)
   223f0:	183feb1e 	bne	r3,zero,223a0 <__swsetup_r+0x48>
   223f4:	1100a00c 	andi	r4,r2,640
   223f8:	01408004 	movi	r5,512
   223fc:	217fe826 	beq	r4,r5,223a0 <__swsetup_r+0x48>
   22400:	800b883a 	mov	r5,r16
   22404:	8809883a 	mov	r4,r17
   22408:	0022d400 	call	22d40 <__smakebuf_r>
   2240c:	8080030b 	ldhu	r2,12(r16)
   22410:	80c00417 	ldw	r3,16(r16)
   22414:	003fe206 	br	223a0 <__swsetup_r+0x48>
   22418:	80800517 	ldw	r2,20(r16)
   2241c:	80000215 	stw	zero,8(r16)
   22420:	0085c83a 	sub	r2,zero,r2
   22424:	80800615 	stw	r2,24(r16)
   22428:	183fe41e 	bne	r3,zero,223bc <__swsetup_r+0x64>
   2242c:	80c0030b 	ldhu	r3,12(r16)
   22430:	0005883a 	mov	r2,zero
   22434:	1900200c 	andi	r4,r3,128
   22438:	203fe126 	beq	r4,zero,223c0 <__swsetup_r+0x68>
   2243c:	18c01014 	ori	r3,r3,64
   22440:	80c0030d 	sth	r3,12(r16)
   22444:	00bfffc4 	movi	r2,-1
   22448:	003fdd06 	br	223c0 <__swsetup_r+0x68>
   2244c:	00208a80 	call	208a8 <__sinit>
   22450:	003fcd06 	br	22388 <__swsetup_r+0x30>
   22454:	0005883a 	mov	r2,zero
   22458:	003fd606 	br	223b4 <__swsetup_r+0x5c>
   2245c:	81400c17 	ldw	r5,48(r16)
   22460:	28000626 	beq	r5,zero,2247c <__swsetup_r+0x124>
   22464:	80801004 	addi	r2,r16,64
   22468:	28800326 	beq	r5,r2,22478 <__swsetup_r+0x120>
   2246c:	8809883a 	mov	r4,r17
   22470:	00229d00 	call	229d0 <_free_r>
   22474:	8100030b 	ldhu	r4,12(r16)
   22478:	80000c15 	stw	zero,48(r16)
   2247c:	80c00417 	ldw	r3,16(r16)
   22480:	00bff6c4 	movi	r2,-37
   22484:	1108703a 	and	r4,r2,r4
   22488:	80000115 	stw	zero,4(r16)
   2248c:	80c00015 	stw	r3,0(r16)
   22490:	003fd506 	br	223e8 <__swsetup_r+0x90>
   22494:	00800244 	movi	r2,9
   22498:	88800015 	stw	r2,0(r17)
   2249c:	20801014 	ori	r2,r4,64
   224a0:	8080030d 	sth	r2,12(r16)
   224a4:	00bfffc4 	movi	r2,-1
   224a8:	003fc506 	br	223c0 <__swsetup_r+0x68>

000224ac <_close_r>:
   224ac:	defffd04 	addi	sp,sp,-12
   224b0:	dc000015 	stw	r16,0(sp)
   224b4:	04000134 	movhi	r16,4
   224b8:	dc400115 	stw	r17,4(sp)
   224bc:	84029104 	addi	r16,r16,2628
   224c0:	2023883a 	mov	r17,r4
   224c4:	2809883a 	mov	r4,r5
   224c8:	dfc00215 	stw	ra,8(sp)
   224cc:	80000015 	stw	zero,0(r16)
   224d0:	00232380 	call	23238 <close>
   224d4:	00ffffc4 	movi	r3,-1
   224d8:	10c00526 	beq	r2,r3,224f0 <_close_r+0x44>
   224dc:	dfc00217 	ldw	ra,8(sp)
   224e0:	dc400117 	ldw	r17,4(sp)
   224e4:	dc000017 	ldw	r16,0(sp)
   224e8:	dec00304 	addi	sp,sp,12
   224ec:	f800283a 	ret
   224f0:	80c00017 	ldw	r3,0(r16)
   224f4:	183ff926 	beq	r3,zero,224dc <_close_r+0x30>
   224f8:	88c00015 	stw	r3,0(r17)
   224fc:	003ff706 	br	224dc <_close_r+0x30>

00022500 <_fclose_r>:
   22500:	28003926 	beq	r5,zero,225e8 <_fclose_r+0xe8>
   22504:	defffc04 	addi	sp,sp,-16
   22508:	dc400115 	stw	r17,4(sp)
   2250c:	dc000015 	stw	r16,0(sp)
   22510:	dfc00315 	stw	ra,12(sp)
   22514:	dc800215 	stw	r18,8(sp)
   22518:	2023883a 	mov	r17,r4
   2251c:	2821883a 	mov	r16,r5
   22520:	20000226 	beq	r4,zero,2252c <_fclose_r+0x2c>
   22524:	20800e17 	ldw	r2,56(r4)
   22528:	10002726 	beq	r2,zero,225c8 <_fclose_r+0xc8>
   2252c:	8080030f 	ldh	r2,12(r16)
   22530:	1000071e 	bne	r2,zero,22550 <_fclose_r+0x50>
   22534:	0005883a 	mov	r2,zero
   22538:	dfc00317 	ldw	ra,12(sp)
   2253c:	dc800217 	ldw	r18,8(sp)
   22540:	dc400117 	ldw	r17,4(sp)
   22544:	dc000017 	ldw	r16,0(sp)
   22548:	dec00404 	addi	sp,sp,16
   2254c:	f800283a 	ret
   22550:	800b883a 	mov	r5,r16
   22554:	8809883a 	mov	r4,r17
   22558:	00226040 	call	22604 <__sflush_r>
   2255c:	1025883a 	mov	r18,r2
   22560:	80800b17 	ldw	r2,44(r16)
   22564:	10000426 	beq	r2,zero,22578 <_fclose_r+0x78>
   22568:	81400717 	ldw	r5,28(r16)
   2256c:	8809883a 	mov	r4,r17
   22570:	103ee83a 	callr	r2
   22574:	10001616 	blt	r2,zero,225d0 <_fclose_r+0xd0>
   22578:	8080030b 	ldhu	r2,12(r16)
   2257c:	1080200c 	andi	r2,r2,128
   22580:	1000151e 	bne	r2,zero,225d8 <_fclose_r+0xd8>
   22584:	81400c17 	ldw	r5,48(r16)
   22588:	28000526 	beq	r5,zero,225a0 <_fclose_r+0xa0>
   2258c:	80801004 	addi	r2,r16,64
   22590:	28800226 	beq	r5,r2,2259c <_fclose_r+0x9c>
   22594:	8809883a 	mov	r4,r17
   22598:	00229d00 	call	229d0 <_free_r>
   2259c:	80000c15 	stw	zero,48(r16)
   225a0:	81401117 	ldw	r5,68(r16)
   225a4:	28000326 	beq	r5,zero,225b4 <_fclose_r+0xb4>
   225a8:	8809883a 	mov	r4,r17
   225ac:	00229d00 	call	229d0 <_free_r>
   225b0:	80001115 	stw	zero,68(r16)
   225b4:	00208b80 	call	208b8 <__sfp_lock_acquire>
   225b8:	8000030d 	sth	zero,12(r16)
   225bc:	00208bc0 	call	208bc <__sfp_lock_release>
   225c0:	9005883a 	mov	r2,r18
   225c4:	003fdc06 	br	22538 <_fclose_r+0x38>
   225c8:	00208a80 	call	208a8 <__sinit>
   225cc:	003fd706 	br	2252c <_fclose_r+0x2c>
   225d0:	04bfffc4 	movi	r18,-1
   225d4:	003fe806 	br	22578 <_fclose_r+0x78>
   225d8:	81400417 	ldw	r5,16(r16)
   225dc:	8809883a 	mov	r4,r17
   225e0:	00229d00 	call	229d0 <_free_r>
   225e4:	003fe706 	br	22584 <_fclose_r+0x84>
   225e8:	0005883a 	mov	r2,zero
   225ec:	f800283a 	ret

000225f0 <fclose>:
   225f0:	00800134 	movhi	r2,4
   225f4:	10828104 	addi	r2,r2,2564
   225f8:	200b883a 	mov	r5,r4
   225fc:	11000017 	ldw	r4,0(r2)
   22600:	00225001 	jmpi	22500 <_fclose_r>

00022604 <__sflush_r>:
   22604:	2880030b 	ldhu	r2,12(r5)
   22608:	defffb04 	addi	sp,sp,-20
   2260c:	dcc00315 	stw	r19,12(sp)
   22610:	dc400115 	stw	r17,4(sp)
   22614:	dfc00415 	stw	ra,16(sp)
   22618:	dc800215 	stw	r18,8(sp)
   2261c:	dc000015 	stw	r16,0(sp)
   22620:	10c0020c 	andi	r3,r2,8
   22624:	2823883a 	mov	r17,r5
   22628:	2027883a 	mov	r19,r4
   2262c:	1800311e 	bne	r3,zero,226f4 <__sflush_r+0xf0>
   22630:	28c00117 	ldw	r3,4(r5)
   22634:	10820014 	ori	r2,r2,2048
   22638:	2880030d 	sth	r2,12(r5)
   2263c:	00c04b0e 	bge	zero,r3,2276c <__sflush_r+0x168>
   22640:	8a000a17 	ldw	r8,40(r17)
   22644:	40002326 	beq	r8,zero,226d4 <__sflush_r+0xd0>
   22648:	9c000017 	ldw	r16,0(r19)
   2264c:	10c4000c 	andi	r3,r2,4096
   22650:	98000015 	stw	zero,0(r19)
   22654:	18004826 	beq	r3,zero,22778 <__sflush_r+0x174>
   22658:	89801417 	ldw	r6,80(r17)
   2265c:	10c0010c 	andi	r3,r2,4
   22660:	18000626 	beq	r3,zero,2267c <__sflush_r+0x78>
   22664:	88c00117 	ldw	r3,4(r17)
   22668:	88800c17 	ldw	r2,48(r17)
   2266c:	30cdc83a 	sub	r6,r6,r3
   22670:	10000226 	beq	r2,zero,2267c <__sflush_r+0x78>
   22674:	88800f17 	ldw	r2,60(r17)
   22678:	308dc83a 	sub	r6,r6,r2
   2267c:	89400717 	ldw	r5,28(r17)
   22680:	000f883a 	mov	r7,zero
   22684:	9809883a 	mov	r4,r19
   22688:	403ee83a 	callr	r8
   2268c:	00ffffc4 	movi	r3,-1
   22690:	10c04426 	beq	r2,r3,227a4 <__sflush_r+0x1a0>
   22694:	88c0030b 	ldhu	r3,12(r17)
   22698:	89000417 	ldw	r4,16(r17)
   2269c:	88000115 	stw	zero,4(r17)
   226a0:	197dffcc 	andi	r5,r3,63487
   226a4:	8940030d 	sth	r5,12(r17)
   226a8:	89000015 	stw	r4,0(r17)
   226ac:	18c4000c 	andi	r3,r3,4096
   226b0:	18002c1e 	bne	r3,zero,22764 <__sflush_r+0x160>
   226b4:	89400c17 	ldw	r5,48(r17)
   226b8:	9c000015 	stw	r16,0(r19)
   226bc:	28000526 	beq	r5,zero,226d4 <__sflush_r+0xd0>
   226c0:	88801004 	addi	r2,r17,64
   226c4:	28800226 	beq	r5,r2,226d0 <__sflush_r+0xcc>
   226c8:	9809883a 	mov	r4,r19
   226cc:	00229d00 	call	229d0 <_free_r>
   226d0:	88000c15 	stw	zero,48(r17)
   226d4:	0005883a 	mov	r2,zero
   226d8:	dfc00417 	ldw	ra,16(sp)
   226dc:	dcc00317 	ldw	r19,12(sp)
   226e0:	dc800217 	ldw	r18,8(sp)
   226e4:	dc400117 	ldw	r17,4(sp)
   226e8:	dc000017 	ldw	r16,0(sp)
   226ec:	dec00504 	addi	sp,sp,20
   226f0:	f800283a 	ret
   226f4:	2c800417 	ldw	r18,16(r5)
   226f8:	903ff626 	beq	r18,zero,226d4 <__sflush_r+0xd0>
   226fc:	2c000017 	ldw	r16,0(r5)
   22700:	108000cc 	andi	r2,r2,3
   22704:	2c800015 	stw	r18,0(r5)
   22708:	84a1c83a 	sub	r16,r16,r18
   2270c:	1000131e 	bne	r2,zero,2275c <__sflush_r+0x158>
   22710:	28800517 	ldw	r2,20(r5)
   22714:	88800215 	stw	r2,8(r17)
   22718:	04000316 	blt	zero,r16,22728 <__sflush_r+0x124>
   2271c:	003fed06 	br	226d4 <__sflush_r+0xd0>
   22720:	90a5883a 	add	r18,r18,r2
   22724:	043feb0e 	bge	zero,r16,226d4 <__sflush_r+0xd0>
   22728:	88800917 	ldw	r2,36(r17)
   2272c:	89400717 	ldw	r5,28(r17)
   22730:	800f883a 	mov	r7,r16
   22734:	900d883a 	mov	r6,r18
   22738:	9809883a 	mov	r4,r19
   2273c:	103ee83a 	callr	r2
   22740:	80a1c83a 	sub	r16,r16,r2
   22744:	00bff616 	blt	zero,r2,22720 <__sflush_r+0x11c>
   22748:	88c0030b 	ldhu	r3,12(r17)
   2274c:	00bfffc4 	movi	r2,-1
   22750:	18c01014 	ori	r3,r3,64
   22754:	88c0030d 	sth	r3,12(r17)
   22758:	003fdf06 	br	226d8 <__sflush_r+0xd4>
   2275c:	0005883a 	mov	r2,zero
   22760:	003fec06 	br	22714 <__sflush_r+0x110>
   22764:	88801415 	stw	r2,80(r17)
   22768:	003fd206 	br	226b4 <__sflush_r+0xb0>
   2276c:	28c00f17 	ldw	r3,60(r5)
   22770:	00ffb316 	blt	zero,r3,22640 <__sflush_r+0x3c>
   22774:	003fd706 	br	226d4 <__sflush_r+0xd0>
   22778:	89400717 	ldw	r5,28(r17)
   2277c:	000d883a 	mov	r6,zero
   22780:	01c00044 	movi	r7,1
   22784:	9809883a 	mov	r4,r19
   22788:	403ee83a 	callr	r8
   2278c:	100d883a 	mov	r6,r2
   22790:	00bfffc4 	movi	r2,-1
   22794:	30801426 	beq	r6,r2,227e8 <__sflush_r+0x1e4>
   22798:	8880030b 	ldhu	r2,12(r17)
   2279c:	8a000a17 	ldw	r8,40(r17)
   227a0:	003fae06 	br	2265c <__sflush_r+0x58>
   227a4:	98c00017 	ldw	r3,0(r19)
   227a8:	183fba26 	beq	r3,zero,22694 <__sflush_r+0x90>
   227ac:	01000744 	movi	r4,29
   227b0:	19000626 	beq	r3,r4,227cc <__sflush_r+0x1c8>
   227b4:	01000584 	movi	r4,22
   227b8:	19000426 	beq	r3,r4,227cc <__sflush_r+0x1c8>
   227bc:	88c0030b 	ldhu	r3,12(r17)
   227c0:	18c01014 	ori	r3,r3,64
   227c4:	88c0030d 	sth	r3,12(r17)
   227c8:	003fc306 	br	226d8 <__sflush_r+0xd4>
   227cc:	8880030b 	ldhu	r2,12(r17)
   227d0:	88c00417 	ldw	r3,16(r17)
   227d4:	88000115 	stw	zero,4(r17)
   227d8:	10bdffcc 	andi	r2,r2,63487
   227dc:	8880030d 	sth	r2,12(r17)
   227e0:	88c00015 	stw	r3,0(r17)
   227e4:	003fb306 	br	226b4 <__sflush_r+0xb0>
   227e8:	98800017 	ldw	r2,0(r19)
   227ec:	103fea26 	beq	r2,zero,22798 <__sflush_r+0x194>
   227f0:	00c00744 	movi	r3,29
   227f4:	10c00226 	beq	r2,r3,22800 <__sflush_r+0x1fc>
   227f8:	00c00584 	movi	r3,22
   227fc:	10c0031e 	bne	r2,r3,2280c <__sflush_r+0x208>
   22800:	9c000015 	stw	r16,0(r19)
   22804:	0005883a 	mov	r2,zero
   22808:	003fb306 	br	226d8 <__sflush_r+0xd4>
   2280c:	88c0030b 	ldhu	r3,12(r17)
   22810:	3005883a 	mov	r2,r6
   22814:	18c01014 	ori	r3,r3,64
   22818:	88c0030d 	sth	r3,12(r17)
   2281c:	003fae06 	br	226d8 <__sflush_r+0xd4>

00022820 <_fflush_r>:
   22820:	defffd04 	addi	sp,sp,-12
   22824:	dc000115 	stw	r16,4(sp)
   22828:	dfc00215 	stw	ra,8(sp)
   2282c:	2021883a 	mov	r16,r4
   22830:	20000226 	beq	r4,zero,2283c <_fflush_r+0x1c>
   22834:	20800e17 	ldw	r2,56(r4)
   22838:	10000c26 	beq	r2,zero,2286c <_fflush_r+0x4c>
   2283c:	2880030f 	ldh	r2,12(r5)
   22840:	1000051e 	bne	r2,zero,22858 <_fflush_r+0x38>
   22844:	0005883a 	mov	r2,zero
   22848:	dfc00217 	ldw	ra,8(sp)
   2284c:	dc000117 	ldw	r16,4(sp)
   22850:	dec00304 	addi	sp,sp,12
   22854:	f800283a 	ret
   22858:	8009883a 	mov	r4,r16
   2285c:	dfc00217 	ldw	ra,8(sp)
   22860:	dc000117 	ldw	r16,4(sp)
   22864:	dec00304 	addi	sp,sp,12
   22868:	00226041 	jmpi	22604 <__sflush_r>
   2286c:	d9400015 	stw	r5,0(sp)
   22870:	00208a80 	call	208a8 <__sinit>
   22874:	d9400017 	ldw	r5,0(sp)
   22878:	003ff006 	br	2283c <_fflush_r+0x1c>

0002287c <fflush>:
   2287c:	20000526 	beq	r4,zero,22894 <fflush+0x18>
   22880:	00800134 	movhi	r2,4
   22884:	10828104 	addi	r2,r2,2564
   22888:	200b883a 	mov	r5,r4
   2288c:	11000017 	ldw	r4,0(r2)
   22890:	00228201 	jmpi	22820 <_fflush_r>
   22894:	00800134 	movhi	r2,4
   22898:	10828004 	addi	r2,r2,2560
   2289c:	11000017 	ldw	r4,0(r2)
   228a0:	014000b4 	movhi	r5,2
   228a4:	294a0804 	addi	r5,r5,10272
   228a8:	0020e841 	jmpi	20e84 <_fwalk_reent>

000228ac <_malloc_trim_r>:
   228ac:	defffb04 	addi	sp,sp,-20
   228b0:	dcc00315 	stw	r19,12(sp)
   228b4:	04c00134 	movhi	r19,4
   228b8:	dc800215 	stw	r18,8(sp)
   228bc:	dc400115 	stw	r17,4(sp)
   228c0:	dc000015 	stw	r16,0(sp)
   228c4:	dfc00415 	stw	ra,16(sp)
   228c8:	2821883a 	mov	r16,r5
   228cc:	9cc10904 	addi	r19,r19,1060
   228d0:	2025883a 	mov	r18,r4
   228d4:	00239840 	call	23984 <__malloc_lock>
   228d8:	98800217 	ldw	r2,8(r19)
   228dc:	14400117 	ldw	r17,4(r2)
   228e0:	00bfff04 	movi	r2,-4
   228e4:	88a2703a 	and	r17,r17,r2
   228e8:	8c21c83a 	sub	r16,r17,r16
   228ec:	8403fbc4 	addi	r16,r16,4079
   228f0:	8020d33a 	srli	r16,r16,12
   228f4:	0083ffc4 	movi	r2,4095
   228f8:	843fffc4 	addi	r16,r16,-1
   228fc:	8020933a 	slli	r16,r16,12
   22900:	1400060e 	bge	r2,r16,2291c <_malloc_trim_r+0x70>
   22904:	000b883a 	mov	r5,zero
   22908:	9009883a 	mov	r4,r18
   2290c:	00221680 	call	22168 <_sbrk_r>
   22910:	98c00217 	ldw	r3,8(r19)
   22914:	1c47883a 	add	r3,r3,r17
   22918:	10c00a26 	beq	r2,r3,22944 <_malloc_trim_r+0x98>
   2291c:	9009883a 	mov	r4,r18
   22920:	00239a80 	call	239a8 <__malloc_unlock>
   22924:	0005883a 	mov	r2,zero
   22928:	dfc00417 	ldw	ra,16(sp)
   2292c:	dcc00317 	ldw	r19,12(sp)
   22930:	dc800217 	ldw	r18,8(sp)
   22934:	dc400117 	ldw	r17,4(sp)
   22938:	dc000017 	ldw	r16,0(sp)
   2293c:	dec00504 	addi	sp,sp,20
   22940:	f800283a 	ret
   22944:	040bc83a 	sub	r5,zero,r16
   22948:	9009883a 	mov	r4,r18
   2294c:	00221680 	call	22168 <_sbrk_r>
   22950:	00ffffc4 	movi	r3,-1
   22954:	10c00d26 	beq	r2,r3,2298c <_malloc_trim_r+0xe0>
   22958:	00c00134 	movhi	r3,4
   2295c:	18c29704 	addi	r3,r3,2652
   22960:	18800017 	ldw	r2,0(r3)
   22964:	99000217 	ldw	r4,8(r19)
   22968:	8c23c83a 	sub	r17,r17,r16
   2296c:	8c400054 	ori	r17,r17,1
   22970:	1421c83a 	sub	r16,r2,r16
   22974:	24400115 	stw	r17,4(r4)
   22978:	9009883a 	mov	r4,r18
   2297c:	1c000015 	stw	r16,0(r3)
   22980:	00239a80 	call	239a8 <__malloc_unlock>
   22984:	00800044 	movi	r2,1
   22988:	003fe706 	br	22928 <_malloc_trim_r+0x7c>
   2298c:	000b883a 	mov	r5,zero
   22990:	9009883a 	mov	r4,r18
   22994:	00221680 	call	22168 <_sbrk_r>
   22998:	99000217 	ldw	r4,8(r19)
   2299c:	014003c4 	movi	r5,15
   229a0:	1107c83a 	sub	r3,r2,r4
   229a4:	28ffdd0e 	bge	r5,r3,2291c <_malloc_trim_r+0x70>
   229a8:	01400134 	movhi	r5,4
   229ac:	29428204 	addi	r5,r5,2568
   229b0:	29400017 	ldw	r5,0(r5)
   229b4:	18c00054 	ori	r3,r3,1
   229b8:	20c00115 	stw	r3,4(r4)
   229bc:	00c00134 	movhi	r3,4
   229c0:	1145c83a 	sub	r2,r2,r5
   229c4:	18c29704 	addi	r3,r3,2652
   229c8:	18800015 	stw	r2,0(r3)
   229cc:	003fd306 	br	2291c <_malloc_trim_r+0x70>

000229d0 <_free_r>:
   229d0:	28004126 	beq	r5,zero,22ad8 <_free_r+0x108>
   229d4:	defffd04 	addi	sp,sp,-12
   229d8:	dc400115 	stw	r17,4(sp)
   229dc:	dc000015 	stw	r16,0(sp)
   229e0:	2023883a 	mov	r17,r4
   229e4:	2821883a 	mov	r16,r5
   229e8:	dfc00215 	stw	ra,8(sp)
   229ec:	00239840 	call	23984 <__malloc_lock>
   229f0:	81ffff17 	ldw	r7,-4(r16)
   229f4:	00bfff84 	movi	r2,-2
   229f8:	01000134 	movhi	r4,4
   229fc:	81bffe04 	addi	r6,r16,-8
   22a00:	3884703a 	and	r2,r7,r2
   22a04:	21010904 	addi	r4,r4,1060
   22a08:	308b883a 	add	r5,r6,r2
   22a0c:	2a400117 	ldw	r9,4(r5)
   22a10:	22000217 	ldw	r8,8(r4)
   22a14:	00ffff04 	movi	r3,-4
   22a18:	48c6703a 	and	r3,r9,r3
   22a1c:	2a005726 	beq	r5,r8,22b7c <_free_r+0x1ac>
   22a20:	28c00115 	stw	r3,4(r5)
   22a24:	39c0004c 	andi	r7,r7,1
   22a28:	3800091e 	bne	r7,zero,22a50 <_free_r+0x80>
   22a2c:	823ffe17 	ldw	r8,-8(r16)
   22a30:	22400204 	addi	r9,r4,8
   22a34:	320dc83a 	sub	r6,r6,r8
   22a38:	31c00217 	ldw	r7,8(r6)
   22a3c:	1205883a 	add	r2,r2,r8
   22a40:	3a406526 	beq	r7,r9,22bd8 <_free_r+0x208>
   22a44:	32000317 	ldw	r8,12(r6)
   22a48:	3a000315 	stw	r8,12(r7)
   22a4c:	41c00215 	stw	r7,8(r8)
   22a50:	28cf883a 	add	r7,r5,r3
   22a54:	39c00117 	ldw	r7,4(r7)
   22a58:	39c0004c 	andi	r7,r7,1
   22a5c:	38003a26 	beq	r7,zero,22b48 <_free_r+0x178>
   22a60:	10c00054 	ori	r3,r2,1
   22a64:	30c00115 	stw	r3,4(r6)
   22a68:	3087883a 	add	r3,r6,r2
   22a6c:	18800015 	stw	r2,0(r3)
   22a70:	00c07fc4 	movi	r3,511
   22a74:	18801936 	bltu	r3,r2,22adc <_free_r+0x10c>
   22a78:	1004d0fa 	srli	r2,r2,3
   22a7c:	01c00044 	movi	r7,1
   22a80:	21400117 	ldw	r5,4(r4)
   22a84:	10c00044 	addi	r3,r2,1
   22a88:	18c7883a 	add	r3,r3,r3
   22a8c:	1005d0ba 	srai	r2,r2,2
   22a90:	18c7883a 	add	r3,r3,r3
   22a94:	18c7883a 	add	r3,r3,r3
   22a98:	1907883a 	add	r3,r3,r4
   22a9c:	3884983a 	sll	r2,r7,r2
   22aa0:	19c00017 	ldw	r7,0(r3)
   22aa4:	1a3ffe04 	addi	r8,r3,-8
   22aa8:	1144b03a 	or	r2,r2,r5
   22aac:	32000315 	stw	r8,12(r6)
   22ab0:	31c00215 	stw	r7,8(r6)
   22ab4:	20800115 	stw	r2,4(r4)
   22ab8:	19800015 	stw	r6,0(r3)
   22abc:	39800315 	stw	r6,12(r7)
   22ac0:	8809883a 	mov	r4,r17
   22ac4:	dfc00217 	ldw	ra,8(sp)
   22ac8:	dc400117 	ldw	r17,4(sp)
   22acc:	dc000017 	ldw	r16,0(sp)
   22ad0:	dec00304 	addi	sp,sp,12
   22ad4:	00239a81 	jmpi	239a8 <__malloc_unlock>
   22ad8:	f800283a 	ret
   22adc:	100ad27a 	srli	r5,r2,9
   22ae0:	00c00104 	movi	r3,4
   22ae4:	19404a36 	bltu	r3,r5,22c10 <_free_r+0x240>
   22ae8:	100ad1ba 	srli	r5,r2,6
   22aec:	28c00e44 	addi	r3,r5,57
   22af0:	18c7883a 	add	r3,r3,r3
   22af4:	29400e04 	addi	r5,r5,56
   22af8:	18c7883a 	add	r3,r3,r3
   22afc:	18c7883a 	add	r3,r3,r3
   22b00:	1909883a 	add	r4,r3,r4
   22b04:	20c00017 	ldw	r3,0(r4)
   22b08:	01c00134 	movhi	r7,4
   22b0c:	213ffe04 	addi	r4,r4,-8
   22b10:	39c10904 	addi	r7,r7,1060
   22b14:	20c04426 	beq	r4,r3,22c28 <_free_r+0x258>
   22b18:	01ffff04 	movi	r7,-4
   22b1c:	19400117 	ldw	r5,4(r3)
   22b20:	29ca703a 	and	r5,r5,r7
   22b24:	1140022e 	bgeu	r2,r5,22b30 <_free_r+0x160>
   22b28:	18c00217 	ldw	r3,8(r3)
   22b2c:	20fffb1e 	bne	r4,r3,22b1c <_free_r+0x14c>
   22b30:	19000317 	ldw	r4,12(r3)
   22b34:	31000315 	stw	r4,12(r6)
   22b38:	30c00215 	stw	r3,8(r6)
   22b3c:	21800215 	stw	r6,8(r4)
   22b40:	19800315 	stw	r6,12(r3)
   22b44:	003fde06 	br	22ac0 <_free_r+0xf0>
   22b48:	29c00217 	ldw	r7,8(r5)
   22b4c:	10c5883a 	add	r2,r2,r3
   22b50:	00c00134 	movhi	r3,4
   22b54:	18c10b04 	addi	r3,r3,1068
   22b58:	38c03b26 	beq	r7,r3,22c48 <_free_r+0x278>
   22b5c:	2a000317 	ldw	r8,12(r5)
   22b60:	11400054 	ori	r5,r2,1
   22b64:	3087883a 	add	r3,r6,r2
   22b68:	3a000315 	stw	r8,12(r7)
   22b6c:	41c00215 	stw	r7,8(r8)
   22b70:	31400115 	stw	r5,4(r6)
   22b74:	18800015 	stw	r2,0(r3)
   22b78:	003fbd06 	br	22a70 <_free_r+0xa0>
   22b7c:	39c0004c 	andi	r7,r7,1
   22b80:	10c5883a 	add	r2,r2,r3
   22b84:	3800071e 	bne	r7,zero,22ba4 <_free_r+0x1d4>
   22b88:	81fffe17 	ldw	r7,-8(r16)
   22b8c:	31cdc83a 	sub	r6,r6,r7
   22b90:	30c00317 	ldw	r3,12(r6)
   22b94:	31400217 	ldw	r5,8(r6)
   22b98:	11c5883a 	add	r2,r2,r7
   22b9c:	28c00315 	stw	r3,12(r5)
   22ba0:	19400215 	stw	r5,8(r3)
   22ba4:	10c00054 	ori	r3,r2,1
   22ba8:	30c00115 	stw	r3,4(r6)
   22bac:	00c00134 	movhi	r3,4
   22bb0:	18c28304 	addi	r3,r3,2572
   22bb4:	18c00017 	ldw	r3,0(r3)
   22bb8:	21800215 	stw	r6,8(r4)
   22bbc:	10ffc036 	bltu	r2,r3,22ac0 <_free_r+0xf0>
   22bc0:	00800134 	movhi	r2,4
   22bc4:	10829004 	addi	r2,r2,2624
   22bc8:	11400017 	ldw	r5,0(r2)
   22bcc:	8809883a 	mov	r4,r17
   22bd0:	00228ac0 	call	228ac <_malloc_trim_r>
   22bd4:	003fba06 	br	22ac0 <_free_r+0xf0>
   22bd8:	28c9883a 	add	r4,r5,r3
   22bdc:	21000117 	ldw	r4,4(r4)
   22be0:	2100004c 	andi	r4,r4,1
   22be4:	2000391e 	bne	r4,zero,22ccc <_free_r+0x2fc>
   22be8:	29c00217 	ldw	r7,8(r5)
   22bec:	29000317 	ldw	r4,12(r5)
   22bf0:	1885883a 	add	r2,r3,r2
   22bf4:	10c00054 	ori	r3,r2,1
   22bf8:	39000315 	stw	r4,12(r7)
   22bfc:	21c00215 	stw	r7,8(r4)
   22c00:	30c00115 	stw	r3,4(r6)
   22c04:	308d883a 	add	r6,r6,r2
   22c08:	30800015 	stw	r2,0(r6)
   22c0c:	003fac06 	br	22ac0 <_free_r+0xf0>
   22c10:	00c00504 	movi	r3,20
   22c14:	19401536 	bltu	r3,r5,22c6c <_free_r+0x29c>
   22c18:	28c01704 	addi	r3,r5,92
   22c1c:	18c7883a 	add	r3,r3,r3
   22c20:	294016c4 	addi	r5,r5,91
   22c24:	003fb406 	br	22af8 <_free_r+0x128>
   22c28:	280bd0ba 	srai	r5,r5,2
   22c2c:	00c00044 	movi	r3,1
   22c30:	38800117 	ldw	r2,4(r7)
   22c34:	194a983a 	sll	r5,r3,r5
   22c38:	2007883a 	mov	r3,r4
   22c3c:	2884b03a 	or	r2,r5,r2
   22c40:	38800115 	stw	r2,4(r7)
   22c44:	003fbb06 	br	22b34 <_free_r+0x164>
   22c48:	21800515 	stw	r6,20(r4)
   22c4c:	21800415 	stw	r6,16(r4)
   22c50:	10c00054 	ori	r3,r2,1
   22c54:	31c00315 	stw	r7,12(r6)
   22c58:	31c00215 	stw	r7,8(r6)
   22c5c:	30c00115 	stw	r3,4(r6)
   22c60:	308d883a 	add	r6,r6,r2
   22c64:	30800015 	stw	r2,0(r6)
   22c68:	003f9506 	br	22ac0 <_free_r+0xf0>
   22c6c:	00c01504 	movi	r3,84
   22c70:	19400536 	bltu	r3,r5,22c88 <_free_r+0x2b8>
   22c74:	100ad33a 	srli	r5,r2,12
   22c78:	28c01bc4 	addi	r3,r5,111
   22c7c:	18c7883a 	add	r3,r3,r3
   22c80:	29401b84 	addi	r5,r5,110
   22c84:	003f9c06 	br	22af8 <_free_r+0x128>
   22c88:	00c05504 	movi	r3,340
   22c8c:	19400536 	bltu	r3,r5,22ca4 <_free_r+0x2d4>
   22c90:	100ad3fa 	srli	r5,r2,15
   22c94:	28c01e04 	addi	r3,r5,120
   22c98:	18c7883a 	add	r3,r3,r3
   22c9c:	29401dc4 	addi	r5,r5,119
   22ca0:	003f9506 	br	22af8 <_free_r+0x128>
   22ca4:	00c15504 	movi	r3,1364
   22ca8:	19400536 	bltu	r3,r5,22cc0 <_free_r+0x2f0>
   22cac:	100ad4ba 	srli	r5,r2,18
   22cb0:	28c01f44 	addi	r3,r5,125
   22cb4:	18c7883a 	add	r3,r3,r3
   22cb8:	29401f04 	addi	r5,r5,124
   22cbc:	003f8e06 	br	22af8 <_free_r+0x128>
   22cc0:	00c03f84 	movi	r3,254
   22cc4:	01401f84 	movi	r5,126
   22cc8:	003f8b06 	br	22af8 <_free_r+0x128>
   22ccc:	10c00054 	ori	r3,r2,1
   22cd0:	30c00115 	stw	r3,4(r6)
   22cd4:	308d883a 	add	r6,r6,r2
   22cd8:	30800015 	stw	r2,0(r6)
   22cdc:	003f7806 	br	22ac0 <_free_r+0xf0>

00022ce0 <_lseek_r>:
   22ce0:	defffd04 	addi	sp,sp,-12
   22ce4:	2805883a 	mov	r2,r5
   22ce8:	dc000015 	stw	r16,0(sp)
   22cec:	04000134 	movhi	r16,4
   22cf0:	dc400115 	stw	r17,4(sp)
   22cf4:	300b883a 	mov	r5,r6
   22cf8:	84029104 	addi	r16,r16,2628
   22cfc:	2023883a 	mov	r17,r4
   22d00:	380d883a 	mov	r6,r7
   22d04:	1009883a 	mov	r4,r2
   22d08:	dfc00215 	stw	ra,8(sp)
   22d0c:	80000015 	stw	zero,0(r16)
   22d10:	002382c0 	call	2382c <lseek>
   22d14:	00ffffc4 	movi	r3,-1
   22d18:	10c00526 	beq	r2,r3,22d30 <_lseek_r+0x50>
   22d1c:	dfc00217 	ldw	ra,8(sp)
   22d20:	dc400117 	ldw	r17,4(sp)
   22d24:	dc000017 	ldw	r16,0(sp)
   22d28:	dec00304 	addi	sp,sp,12
   22d2c:	f800283a 	ret
   22d30:	80c00017 	ldw	r3,0(r16)
   22d34:	183ff926 	beq	r3,zero,22d1c <_lseek_r+0x3c>
   22d38:	88c00015 	stw	r3,0(r17)
   22d3c:	003ff706 	br	22d1c <_lseek_r+0x3c>

00022d40 <__smakebuf_r>:
   22d40:	2880030b 	ldhu	r2,12(r5)
   22d44:	10c0008c 	andi	r3,r2,2
   22d48:	1800411e 	bne	r3,zero,22e50 <__smakebuf_r+0x110>
   22d4c:	deffec04 	addi	sp,sp,-80
   22d50:	dc000f15 	stw	r16,60(sp)
   22d54:	2821883a 	mov	r16,r5
   22d58:	2940038f 	ldh	r5,14(r5)
   22d5c:	dc401015 	stw	r17,64(sp)
   22d60:	dfc01315 	stw	ra,76(sp)
   22d64:	dcc01215 	stw	r19,72(sp)
   22d68:	dc801115 	stw	r18,68(sp)
   22d6c:	2023883a 	mov	r17,r4
   22d70:	28001c16 	blt	r5,zero,22de4 <__smakebuf_r+0xa4>
   22d74:	d80d883a 	mov	r6,sp
   22d78:	0022f5c0 	call	22f5c <_fstat_r>
   22d7c:	10001816 	blt	r2,zero,22de0 <__smakebuf_r+0xa0>
   22d80:	d8800117 	ldw	r2,4(sp)
   22d84:	00e00014 	movui	r3,32768
   22d88:	10bc000c 	andi	r2,r2,61440
   22d8c:	14c80020 	cmpeqi	r19,r2,8192
   22d90:	10c03726 	beq	r2,r3,22e70 <__smakebuf_r+0x130>
   22d94:	80c0030b 	ldhu	r3,12(r16)
   22d98:	18c20014 	ori	r3,r3,2048
   22d9c:	80c0030d 	sth	r3,12(r16)
   22da0:	00c80004 	movi	r3,8192
   22da4:	10c0521e 	bne	r2,r3,22ef0 <__smakebuf_r+0x1b0>
   22da8:	8140038f 	ldh	r5,14(r16)
   22dac:	8809883a 	mov	r4,r17
   22db0:	0022fb80 	call	22fb8 <_isatty_r>
   22db4:	10004c26 	beq	r2,zero,22ee8 <__smakebuf_r+0x1a8>
   22db8:	8080030b 	ldhu	r2,12(r16)
   22dbc:	80c010c4 	addi	r3,r16,67
   22dc0:	80c00015 	stw	r3,0(r16)
   22dc4:	10800054 	ori	r2,r2,1
   22dc8:	8080030d 	sth	r2,12(r16)
   22dcc:	00800044 	movi	r2,1
   22dd0:	80c00415 	stw	r3,16(r16)
   22dd4:	80800515 	stw	r2,20(r16)
   22dd8:	04810004 	movi	r18,1024
   22ddc:	00000706 	br	22dfc <__smakebuf_r+0xbc>
   22de0:	8080030b 	ldhu	r2,12(r16)
   22de4:	10c0200c 	andi	r3,r2,128
   22de8:	18001f1e 	bne	r3,zero,22e68 <__smakebuf_r+0x128>
   22dec:	04810004 	movi	r18,1024
   22df0:	10820014 	ori	r2,r2,2048
   22df4:	8080030d 	sth	r2,12(r16)
   22df8:	0027883a 	mov	r19,zero
   22dfc:	900b883a 	mov	r5,r18
   22e00:	8809883a 	mov	r4,r17
   22e04:	0020f480 	call	20f48 <_malloc_r>
   22e08:	10002c26 	beq	r2,zero,22ebc <__smakebuf_r+0x17c>
   22e0c:	80c0030b 	ldhu	r3,12(r16)
   22e10:	010000b4 	movhi	r4,2
   22e14:	21015404 	addi	r4,r4,1360
   22e18:	89000f15 	stw	r4,60(r17)
   22e1c:	18c02014 	ori	r3,r3,128
   22e20:	80c0030d 	sth	r3,12(r16)
   22e24:	80800015 	stw	r2,0(r16)
   22e28:	80800415 	stw	r2,16(r16)
   22e2c:	84800515 	stw	r18,20(r16)
   22e30:	98001a1e 	bne	r19,zero,22e9c <__smakebuf_r+0x15c>
   22e34:	dfc01317 	ldw	ra,76(sp)
   22e38:	dcc01217 	ldw	r19,72(sp)
   22e3c:	dc801117 	ldw	r18,68(sp)
   22e40:	dc401017 	ldw	r17,64(sp)
   22e44:	dc000f17 	ldw	r16,60(sp)
   22e48:	dec01404 	addi	sp,sp,80
   22e4c:	f800283a 	ret
   22e50:	288010c4 	addi	r2,r5,67
   22e54:	28800015 	stw	r2,0(r5)
   22e58:	28800415 	stw	r2,16(r5)
   22e5c:	00800044 	movi	r2,1
   22e60:	28800515 	stw	r2,20(r5)
   22e64:	f800283a 	ret
   22e68:	04801004 	movi	r18,64
   22e6c:	003fe006 	br	22df0 <__smakebuf_r+0xb0>
   22e70:	81000a17 	ldw	r4,40(r16)
   22e74:	00c000b4 	movhi	r3,2
   22e78:	18c8a504 	addi	r3,r3,8852
   22e7c:	20ffc51e 	bne	r4,r3,22d94 <__smakebuf_r+0x54>
   22e80:	8080030b 	ldhu	r2,12(r16)
   22e84:	04810004 	movi	r18,1024
   22e88:	84801315 	stw	r18,76(r16)
   22e8c:	1484b03a 	or	r2,r2,r18
   22e90:	8080030d 	sth	r2,12(r16)
   22e94:	0027883a 	mov	r19,zero
   22e98:	003fd806 	br	22dfc <__smakebuf_r+0xbc>
   22e9c:	8140038f 	ldh	r5,14(r16)
   22ea0:	8809883a 	mov	r4,r17
   22ea4:	0022fb80 	call	22fb8 <_isatty_r>
   22ea8:	103fe226 	beq	r2,zero,22e34 <__smakebuf_r+0xf4>
   22eac:	8080030b 	ldhu	r2,12(r16)
   22eb0:	10800054 	ori	r2,r2,1
   22eb4:	8080030d 	sth	r2,12(r16)
   22eb8:	003fde06 	br	22e34 <__smakebuf_r+0xf4>
   22ebc:	8080030b 	ldhu	r2,12(r16)
   22ec0:	10c0800c 	andi	r3,r2,512
   22ec4:	183fdb1e 	bne	r3,zero,22e34 <__smakebuf_r+0xf4>
   22ec8:	10800094 	ori	r2,r2,2
   22ecc:	80c010c4 	addi	r3,r16,67
   22ed0:	8080030d 	sth	r2,12(r16)
   22ed4:	00800044 	movi	r2,1
   22ed8:	80c00015 	stw	r3,0(r16)
   22edc:	80c00415 	stw	r3,16(r16)
   22ee0:	80800515 	stw	r2,20(r16)
   22ee4:	003fd306 	br	22e34 <__smakebuf_r+0xf4>
   22ee8:	04810004 	movi	r18,1024
   22eec:	003fc306 	br	22dfc <__smakebuf_r+0xbc>
   22ef0:	0027883a 	mov	r19,zero
   22ef4:	04810004 	movi	r18,1024
   22ef8:	003fc006 	br	22dfc <__smakebuf_r+0xbc>

00022efc <_read_r>:
   22efc:	defffd04 	addi	sp,sp,-12
   22f00:	2805883a 	mov	r2,r5
   22f04:	dc000015 	stw	r16,0(sp)
   22f08:	04000134 	movhi	r16,4
   22f0c:	dc400115 	stw	r17,4(sp)
   22f10:	300b883a 	mov	r5,r6
   22f14:	84029104 	addi	r16,r16,2628
   22f18:	2023883a 	mov	r17,r4
   22f1c:	380d883a 	mov	r6,r7
   22f20:	1009883a 	mov	r4,r2
   22f24:	dfc00215 	stw	ra,8(sp)
   22f28:	80000015 	stw	zero,0(r16)
   22f2c:	0023a1c0 	call	23a1c <read>
   22f30:	00ffffc4 	movi	r3,-1
   22f34:	10c00526 	beq	r2,r3,22f4c <_read_r+0x50>
   22f38:	dfc00217 	ldw	ra,8(sp)
   22f3c:	dc400117 	ldw	r17,4(sp)
   22f40:	dc000017 	ldw	r16,0(sp)
   22f44:	dec00304 	addi	sp,sp,12
   22f48:	f800283a 	ret
   22f4c:	80c00017 	ldw	r3,0(r16)
   22f50:	183ff926 	beq	r3,zero,22f38 <_read_r+0x3c>
   22f54:	88c00015 	stw	r3,0(r17)
   22f58:	003ff706 	br	22f38 <_read_r+0x3c>

00022f5c <_fstat_r>:
   22f5c:	defffd04 	addi	sp,sp,-12
   22f60:	2805883a 	mov	r2,r5
   22f64:	dc000015 	stw	r16,0(sp)
   22f68:	04000134 	movhi	r16,4
   22f6c:	dc400115 	stw	r17,4(sp)
   22f70:	84029104 	addi	r16,r16,2628
   22f74:	2023883a 	mov	r17,r4
   22f78:	300b883a 	mov	r5,r6
   22f7c:	1009883a 	mov	r4,r2
   22f80:	dfc00215 	stw	ra,8(sp)
   22f84:	80000015 	stw	zero,0(r16)
   22f88:	002338c0 	call	2338c <fstat>
   22f8c:	00ffffc4 	movi	r3,-1
   22f90:	10c00526 	beq	r2,r3,22fa8 <_fstat_r+0x4c>
   22f94:	dfc00217 	ldw	ra,8(sp)
   22f98:	dc400117 	ldw	r17,4(sp)
   22f9c:	dc000017 	ldw	r16,0(sp)
   22fa0:	dec00304 	addi	sp,sp,12
   22fa4:	f800283a 	ret
   22fa8:	80c00017 	ldw	r3,0(r16)
   22fac:	183ff926 	beq	r3,zero,22f94 <_fstat_r+0x38>
   22fb0:	88c00015 	stw	r3,0(r17)
   22fb4:	003ff706 	br	22f94 <_fstat_r+0x38>

00022fb8 <_isatty_r>:
   22fb8:	defffd04 	addi	sp,sp,-12
   22fbc:	dc000015 	stw	r16,0(sp)
   22fc0:	04000134 	movhi	r16,4
   22fc4:	dc400115 	stw	r17,4(sp)
   22fc8:	84029104 	addi	r16,r16,2628
   22fcc:	2023883a 	mov	r17,r4
   22fd0:	2809883a 	mov	r4,r5
   22fd4:	dfc00215 	stw	ra,8(sp)
   22fd8:	80000015 	stw	zero,0(r16)
   22fdc:	00236440 	call	23644 <isatty>
   22fe0:	00ffffc4 	movi	r3,-1
   22fe4:	10c00526 	beq	r2,r3,22ffc <_isatty_r+0x44>
   22fe8:	dfc00217 	ldw	ra,8(sp)
   22fec:	dc400117 	ldw	r17,4(sp)
   22ff0:	dc000017 	ldw	r16,0(sp)
   22ff4:	dec00304 	addi	sp,sp,12
   22ff8:	f800283a 	ret
   22ffc:	80c00017 	ldw	r3,0(r16)
   23000:	183ff926 	beq	r3,zero,22fe8 <_isatty_r+0x30>
   23004:	88c00015 	stw	r3,0(r17)
   23008:	003ff706 	br	22fe8 <_isatty_r+0x30>

0002300c <__divsi3>:
   2300c:	20001b16 	blt	r4,zero,2307c <__divsi3+0x70>
   23010:	000f883a 	mov	r7,zero
   23014:	28001616 	blt	r5,zero,23070 <__divsi3+0x64>
   23018:	200d883a 	mov	r6,r4
   2301c:	29001a2e 	bgeu	r5,r4,23088 <__divsi3+0x7c>
   23020:	00800804 	movi	r2,32
   23024:	00c00044 	movi	r3,1
   23028:	00000106 	br	23030 <__divsi3+0x24>
   2302c:	10000d26 	beq	r2,zero,23064 <__divsi3+0x58>
   23030:	294b883a 	add	r5,r5,r5
   23034:	10bfffc4 	addi	r2,r2,-1
   23038:	18c7883a 	add	r3,r3,r3
   2303c:	293ffb36 	bltu	r5,r4,2302c <__divsi3+0x20>
   23040:	0005883a 	mov	r2,zero
   23044:	18000726 	beq	r3,zero,23064 <__divsi3+0x58>
   23048:	0005883a 	mov	r2,zero
   2304c:	31400236 	bltu	r6,r5,23058 <__divsi3+0x4c>
   23050:	314dc83a 	sub	r6,r6,r5
   23054:	10c4b03a 	or	r2,r2,r3
   23058:	1806d07a 	srli	r3,r3,1
   2305c:	280ad07a 	srli	r5,r5,1
   23060:	183ffa1e 	bne	r3,zero,2304c <__divsi3+0x40>
   23064:	38000126 	beq	r7,zero,2306c <__divsi3+0x60>
   23068:	0085c83a 	sub	r2,zero,r2
   2306c:	f800283a 	ret
   23070:	014bc83a 	sub	r5,zero,r5
   23074:	39c0005c 	xori	r7,r7,1
   23078:	003fe706 	br	23018 <__divsi3+0xc>
   2307c:	0109c83a 	sub	r4,zero,r4
   23080:	01c00044 	movi	r7,1
   23084:	003fe306 	br	23014 <__divsi3+0x8>
   23088:	00c00044 	movi	r3,1
   2308c:	003fee06 	br	23048 <__divsi3+0x3c>

00023090 <__modsi3>:
   23090:	20001716 	blt	r4,zero,230f0 <__modsi3+0x60>
   23094:	000f883a 	mov	r7,zero
   23098:	2005883a 	mov	r2,r4
   2309c:	28001216 	blt	r5,zero,230e8 <__modsi3+0x58>
   230a0:	2900162e 	bgeu	r5,r4,230fc <__modsi3+0x6c>
   230a4:	01800804 	movi	r6,32
   230a8:	00c00044 	movi	r3,1
   230ac:	00000106 	br	230b4 <__modsi3+0x24>
   230b0:	30000a26 	beq	r6,zero,230dc <__modsi3+0x4c>
   230b4:	294b883a 	add	r5,r5,r5
   230b8:	31bfffc4 	addi	r6,r6,-1
   230bc:	18c7883a 	add	r3,r3,r3
   230c0:	293ffb36 	bltu	r5,r4,230b0 <__modsi3+0x20>
   230c4:	18000526 	beq	r3,zero,230dc <__modsi3+0x4c>
   230c8:	1806d07a 	srli	r3,r3,1
   230cc:	11400136 	bltu	r2,r5,230d4 <__modsi3+0x44>
   230d0:	1145c83a 	sub	r2,r2,r5
   230d4:	280ad07a 	srli	r5,r5,1
   230d8:	183ffb1e 	bne	r3,zero,230c8 <__modsi3+0x38>
   230dc:	38000126 	beq	r7,zero,230e4 <__modsi3+0x54>
   230e0:	0085c83a 	sub	r2,zero,r2
   230e4:	f800283a 	ret
   230e8:	014bc83a 	sub	r5,zero,r5
   230ec:	003fec06 	br	230a0 <__modsi3+0x10>
   230f0:	0109c83a 	sub	r4,zero,r4
   230f4:	01c00044 	movi	r7,1
   230f8:	003fe706 	br	23098 <__modsi3+0x8>
   230fc:	00c00044 	movi	r3,1
   23100:	003ff106 	br	230c8 <__modsi3+0x38>

00023104 <__udivsi3>:
   23104:	200d883a 	mov	r6,r4
   23108:	2900152e 	bgeu	r5,r4,23160 <__udivsi3+0x5c>
   2310c:	28001416 	blt	r5,zero,23160 <__udivsi3+0x5c>
   23110:	00800804 	movi	r2,32
   23114:	00c00044 	movi	r3,1
   23118:	00000206 	br	23124 <__udivsi3+0x20>
   2311c:	10000e26 	beq	r2,zero,23158 <__udivsi3+0x54>
   23120:	28000516 	blt	r5,zero,23138 <__udivsi3+0x34>
   23124:	294b883a 	add	r5,r5,r5
   23128:	10bfffc4 	addi	r2,r2,-1
   2312c:	18c7883a 	add	r3,r3,r3
   23130:	293ffa36 	bltu	r5,r4,2311c <__udivsi3+0x18>
   23134:	18000826 	beq	r3,zero,23158 <__udivsi3+0x54>
   23138:	0005883a 	mov	r2,zero
   2313c:	31400236 	bltu	r6,r5,23148 <__udivsi3+0x44>
   23140:	314dc83a 	sub	r6,r6,r5
   23144:	10c4b03a 	or	r2,r2,r3
   23148:	1806d07a 	srli	r3,r3,1
   2314c:	280ad07a 	srli	r5,r5,1
   23150:	183ffa1e 	bne	r3,zero,2313c <__udivsi3+0x38>
   23154:	f800283a 	ret
   23158:	0005883a 	mov	r2,zero
   2315c:	f800283a 	ret
   23160:	00c00044 	movi	r3,1
   23164:	003ff406 	br	23138 <__udivsi3+0x34>

00023168 <__umodsi3>:
   23168:	2005883a 	mov	r2,r4
   2316c:	2900122e 	bgeu	r5,r4,231b8 <__umodsi3+0x50>
   23170:	28001116 	blt	r5,zero,231b8 <__umodsi3+0x50>
   23174:	01800804 	movi	r6,32
   23178:	00c00044 	movi	r3,1
   2317c:	00000206 	br	23188 <__umodsi3+0x20>
   23180:	30000c26 	beq	r6,zero,231b4 <__umodsi3+0x4c>
   23184:	28000516 	blt	r5,zero,2319c <__umodsi3+0x34>
   23188:	294b883a 	add	r5,r5,r5
   2318c:	31bfffc4 	addi	r6,r6,-1
   23190:	18c7883a 	add	r3,r3,r3
   23194:	293ffa36 	bltu	r5,r4,23180 <__umodsi3+0x18>
   23198:	18000626 	beq	r3,zero,231b4 <__umodsi3+0x4c>
   2319c:	1806d07a 	srli	r3,r3,1
   231a0:	11400136 	bltu	r2,r5,231a8 <__umodsi3+0x40>
   231a4:	1145c83a 	sub	r2,r2,r5
   231a8:	280ad07a 	srli	r5,r5,1
   231ac:	183ffb1e 	bne	r3,zero,2319c <__umodsi3+0x34>
   231b0:	f800283a 	ret
   231b4:	f800283a 	ret
   231b8:	00c00044 	movi	r3,1
   231bc:	003ff706 	br	2319c <__umodsi3+0x34>

000231c0 <__mulsi3>:
   231c0:	0005883a 	mov	r2,zero
   231c4:	20000726 	beq	r4,zero,231e4 <__mulsi3+0x24>
   231c8:	20c0004c 	andi	r3,r4,1
   231cc:	2008d07a 	srli	r4,r4,1
   231d0:	18000126 	beq	r3,zero,231d8 <__mulsi3+0x18>
   231d4:	1145883a 	add	r2,r2,r5
   231d8:	294b883a 	add	r5,r5,r5
   231dc:	203ffa1e 	bne	r4,zero,231c8 <__mulsi3+0x8>
   231e0:	f800283a 	ret
   231e4:	f800283a 	ret

000231e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231e8:	defffe04 	addi	sp,sp,-8
   231ec:	dfc00115 	stw	ra,4(sp)
   231f0:	df000015 	stw	fp,0(sp)
   231f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231f8:	00800134 	movhi	r2,4
   231fc:	10828904 	addi	r2,r2,2596
   23200:	10800017 	ldw	r2,0(r2)
   23204:	10000526 	beq	r2,zero,2321c <alt_get_errno+0x34>
   23208:	00800134 	movhi	r2,4
   2320c:	10828904 	addi	r2,r2,2596
   23210:	10800017 	ldw	r2,0(r2)
   23214:	103ee83a 	callr	r2
   23218:	00000206 	br	23224 <alt_get_errno+0x3c>
   2321c:	00800134 	movhi	r2,4
   23220:	10829104 	addi	r2,r2,2628
}
   23224:	e037883a 	mov	sp,fp
   23228:	dfc00117 	ldw	ra,4(sp)
   2322c:	df000017 	ldw	fp,0(sp)
   23230:	dec00204 	addi	sp,sp,8
   23234:	f800283a 	ret

00023238 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23238:	defffb04 	addi	sp,sp,-20
   2323c:	dfc00415 	stw	ra,16(sp)
   23240:	df000315 	stw	fp,12(sp)
   23244:	df000304 	addi	fp,sp,12
   23248:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2324c:	e0bfff17 	ldw	r2,-4(fp)
   23250:	10000816 	blt	r2,zero,23274 <close+0x3c>
   23254:	01400304 	movi	r5,12
   23258:	e13fff17 	ldw	r4,-4(fp)
   2325c:	00231c00 	call	231c0 <__mulsi3>
   23260:	1007883a 	mov	r3,r2
   23264:	00800134 	movhi	r2,4
   23268:	10821504 	addi	r2,r2,2132
   2326c:	1885883a 	add	r2,r3,r2
   23270:	00000106 	br	23278 <close+0x40>
   23274:	0005883a 	mov	r2,zero
   23278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2327c:	e0bffd17 	ldw	r2,-12(fp)
   23280:	10001926 	beq	r2,zero,232e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23284:	e0bffd17 	ldw	r2,-12(fp)
   23288:	10800017 	ldw	r2,0(r2)
   2328c:	10800417 	ldw	r2,16(r2)
   23290:	10000626 	beq	r2,zero,232ac <close+0x74>
   23294:	e0bffd17 	ldw	r2,-12(fp)
   23298:	10800017 	ldw	r2,0(r2)
   2329c:	10800417 	ldw	r2,16(r2)
   232a0:	e13ffd17 	ldw	r4,-12(fp)
   232a4:	103ee83a 	callr	r2
   232a8:	00000106 	br	232b0 <close+0x78>
   232ac:	0005883a 	mov	r2,zero
   232b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   232b4:	e13fff17 	ldw	r4,-4(fp)
   232b8:	0023b200 	call	23b20 <alt_release_fd>
    if (rval < 0)
   232bc:	e0bffe17 	ldw	r2,-8(fp)
   232c0:	1000070e 	bge	r2,zero,232e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   232c4:	00231e80 	call	231e8 <alt_get_errno>
   232c8:	1007883a 	mov	r3,r2
   232cc:	e0bffe17 	ldw	r2,-8(fp)
   232d0:	0085c83a 	sub	r2,zero,r2
   232d4:	18800015 	stw	r2,0(r3)
      return -1;
   232d8:	00bfffc4 	movi	r2,-1
   232dc:	00000706 	br	232fc <close+0xc4>
    }
    return 0;
   232e0:	0005883a 	mov	r2,zero
   232e4:	00000506 	br	232fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   232e8:	00231e80 	call	231e8 <alt_get_errno>
   232ec:	1007883a 	mov	r3,r2
   232f0:	00801444 	movi	r2,81
   232f4:	18800015 	stw	r2,0(r3)
    return -1;
   232f8:	00bfffc4 	movi	r2,-1
  }
}
   232fc:	e037883a 	mov	sp,fp
   23300:	dfc00117 	ldw	ra,4(sp)
   23304:	df000017 	ldw	fp,0(sp)
   23308:	dec00204 	addi	sp,sp,8
   2330c:	f800283a 	ret

00023310 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23310:	defffc04 	addi	sp,sp,-16
   23314:	df000315 	stw	fp,12(sp)
   23318:	df000304 	addi	fp,sp,12
   2331c:	e13ffd15 	stw	r4,-12(fp)
   23320:	e17ffe15 	stw	r5,-8(fp)
   23324:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23328:	e0bfff17 	ldw	r2,-4(fp)
}
   2332c:	e037883a 	mov	sp,fp
   23330:	df000017 	ldw	fp,0(sp)
   23334:	dec00104 	addi	sp,sp,4
   23338:	f800283a 	ret

0002333c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2333c:	defffe04 	addi	sp,sp,-8
   23340:	dfc00115 	stw	ra,4(sp)
   23344:	df000015 	stw	fp,0(sp)
   23348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2334c:	00800134 	movhi	r2,4
   23350:	10828904 	addi	r2,r2,2596
   23354:	10800017 	ldw	r2,0(r2)
   23358:	10000526 	beq	r2,zero,23370 <alt_get_errno+0x34>
   2335c:	00800134 	movhi	r2,4
   23360:	10828904 	addi	r2,r2,2596
   23364:	10800017 	ldw	r2,0(r2)
   23368:	103ee83a 	callr	r2
   2336c:	00000206 	br	23378 <alt_get_errno+0x3c>
   23370:	00800134 	movhi	r2,4
   23374:	10829104 	addi	r2,r2,2628
}
   23378:	e037883a 	mov	sp,fp
   2337c:	dfc00117 	ldw	ra,4(sp)
   23380:	df000017 	ldw	fp,0(sp)
   23384:	dec00204 	addi	sp,sp,8
   23388:	f800283a 	ret

0002338c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2338c:	defffb04 	addi	sp,sp,-20
   23390:	dfc00415 	stw	ra,16(sp)
   23394:	df000315 	stw	fp,12(sp)
   23398:	df000304 	addi	fp,sp,12
   2339c:	e13ffe15 	stw	r4,-8(fp)
   233a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   233a4:	e0bffe17 	ldw	r2,-8(fp)
   233a8:	10000816 	blt	r2,zero,233cc <fstat+0x40>
   233ac:	01400304 	movi	r5,12
   233b0:	e13ffe17 	ldw	r4,-8(fp)
   233b4:	00231c00 	call	231c0 <__mulsi3>
   233b8:	1007883a 	mov	r3,r2
   233bc:	00800134 	movhi	r2,4
   233c0:	10821504 	addi	r2,r2,2132
   233c4:	1885883a 	add	r2,r3,r2
   233c8:	00000106 	br	233d0 <fstat+0x44>
   233cc:	0005883a 	mov	r2,zero
   233d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   233d4:	e0bffd17 	ldw	r2,-12(fp)
   233d8:	10001026 	beq	r2,zero,2341c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   233dc:	e0bffd17 	ldw	r2,-12(fp)
   233e0:	10800017 	ldw	r2,0(r2)
   233e4:	10800817 	ldw	r2,32(r2)
   233e8:	10000726 	beq	r2,zero,23408 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   233ec:	e0bffd17 	ldw	r2,-12(fp)
   233f0:	10800017 	ldw	r2,0(r2)
   233f4:	10800817 	ldw	r2,32(r2)
   233f8:	e17fff17 	ldw	r5,-4(fp)
   233fc:	e13ffd17 	ldw	r4,-12(fp)
   23400:	103ee83a 	callr	r2
   23404:	00000a06 	br	23430 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23408:	e0bfff17 	ldw	r2,-4(fp)
   2340c:	00c80004 	movi	r3,8192
   23410:	10c00115 	stw	r3,4(r2)
      return 0;
   23414:	0005883a 	mov	r2,zero
   23418:	00000506 	br	23430 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2341c:	002333c0 	call	2333c <alt_get_errno>
   23420:	1007883a 	mov	r3,r2
   23424:	00801444 	movi	r2,81
   23428:	18800015 	stw	r2,0(r3)
    return -1;
   2342c:	00bfffc4 	movi	r2,-1
  }
}
   23430:	e037883a 	mov	sp,fp
   23434:	dfc00117 	ldw	ra,4(sp)
   23438:	df000017 	ldw	fp,0(sp)
   2343c:	dec00204 	addi	sp,sp,8
   23440:	f800283a 	ret

00023444 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   23444:	defff004 	addi	sp,sp,-64
   23448:	df000f15 	stw	fp,60(sp)
   2344c:	df000f04 	addi	fp,sp,60
   23450:	e13ffd15 	stw	r4,-12(fp)
   23454:	e17ffe15 	stw	r5,-8(fp)
   23458:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   2345c:	00bffa84 	movi	r2,-22
   23460:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23464:	e0bffd17 	ldw	r2,-12(fp)
   23468:	10800828 	cmpgeui	r2,r2,32
   2346c:	10005c1e 	bne	r2,zero,235e0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23470:	0005303a 	rdctl	r2,status
   23474:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23478:	e0fff617 	ldw	r3,-40(fp)
   2347c:	00bfff84 	movi	r2,-2
   23480:	1884703a 	and	r2,r3,r2
   23484:	1001703a 	wrctl	status,r2
  
  return context;
   23488:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   2348c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   23490:	00800134 	movhi	r2,4
   23494:	1082a104 	addi	r2,r2,2692
   23498:	e0fffd17 	ldw	r3,-12(fp)
   2349c:	180690fa 	slli	r3,r3,3
   234a0:	10c5883a 	add	r2,r2,r3
   234a4:	e0ffff17 	ldw	r3,-4(fp)
   234a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   234ac:	00800134 	movhi	r2,4
   234b0:	1082a104 	addi	r2,r2,2692
   234b4:	e0fffd17 	ldw	r3,-12(fp)
   234b8:	180690fa 	slli	r3,r3,3
   234bc:	10c5883a 	add	r2,r2,r3
   234c0:	10800104 	addi	r2,r2,4
   234c4:	e0fffe17 	ldw	r3,-8(fp)
   234c8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   234cc:	e0bfff17 	ldw	r2,-4(fp)
   234d0:	10001f26 	beq	r2,zero,23550 <alt_irq_register+0x10c>
   234d4:	e0bffd17 	ldw	r2,-12(fp)
   234d8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234dc:	0005303a 	rdctl	r2,status
   234e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234e4:	e0fff717 	ldw	r3,-36(fp)
   234e8:	00bfff84 	movi	r2,-2
   234ec:	1884703a 	and	r2,r3,r2
   234f0:	1001703a 	wrctl	status,r2
  
  return context;
   234f4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   234f8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   234fc:	00c00044 	movi	r3,1
   23500:	e0bff217 	ldw	r2,-56(fp)
   23504:	1884983a 	sll	r2,r3,r2
   23508:	1007883a 	mov	r3,r2
   2350c:	00800134 	movhi	r2,4
   23510:	10829204 	addi	r2,r2,2632
   23514:	10800017 	ldw	r2,0(r2)
   23518:	1886b03a 	or	r3,r3,r2
   2351c:	00800134 	movhi	r2,4
   23520:	10829204 	addi	r2,r2,2632
   23524:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23528:	00800134 	movhi	r2,4
   2352c:	10829204 	addi	r2,r2,2632
   23530:	10800017 	ldw	r2,0(r2)
   23534:	100170fa 	wrctl	ienable,r2
   23538:	e0bff817 	ldw	r2,-32(fp)
   2353c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23540:	e0bff917 	ldw	r2,-28(fp)
   23544:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23548:	0005883a 	mov	r2,zero
   2354c:	00001f06 	br	235cc <alt_irq_register+0x188>
   23550:	e0bffd17 	ldw	r2,-12(fp)
   23554:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23558:	0005303a 	rdctl	r2,status
   2355c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23560:	e0fffa17 	ldw	r3,-24(fp)
   23564:	00bfff84 	movi	r2,-2
   23568:	1884703a 	and	r2,r3,r2
   2356c:	1001703a 	wrctl	status,r2
  
  return context;
   23570:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23574:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   23578:	00c00044 	movi	r3,1
   2357c:	e0bff417 	ldw	r2,-48(fp)
   23580:	1884983a 	sll	r2,r3,r2
   23584:	0084303a 	nor	r2,zero,r2
   23588:	1007883a 	mov	r3,r2
   2358c:	00800134 	movhi	r2,4
   23590:	10829204 	addi	r2,r2,2632
   23594:	10800017 	ldw	r2,0(r2)
   23598:	1886703a 	and	r3,r3,r2
   2359c:	00800134 	movhi	r2,4
   235a0:	10829204 	addi	r2,r2,2632
   235a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   235a8:	00800134 	movhi	r2,4
   235ac:	10829204 	addi	r2,r2,2632
   235b0:	10800017 	ldw	r2,0(r2)
   235b4:	100170fa 	wrctl	ienable,r2
   235b8:	e0bffb17 	ldw	r2,-20(fp)
   235bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   235c0:	e0bffc17 	ldw	r2,-16(fp)
   235c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   235c8:	0005883a 	mov	r2,zero
   235cc:	e0bff115 	stw	r2,-60(fp)
   235d0:	e0bff317 	ldw	r2,-52(fp)
   235d4:	e0bff515 	stw	r2,-44(fp)
   235d8:	e0bff517 	ldw	r2,-44(fp)
   235dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   235e0:	e0bff117 	ldw	r2,-60(fp)
}
   235e4:	e037883a 	mov	sp,fp
   235e8:	df000017 	ldw	fp,0(sp)
   235ec:	dec00104 	addi	sp,sp,4
   235f0:	f800283a 	ret

000235f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235f4:	defffe04 	addi	sp,sp,-8
   235f8:	dfc00115 	stw	ra,4(sp)
   235fc:	df000015 	stw	fp,0(sp)
   23600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23604:	00800134 	movhi	r2,4
   23608:	10828904 	addi	r2,r2,2596
   2360c:	10800017 	ldw	r2,0(r2)
   23610:	10000526 	beq	r2,zero,23628 <alt_get_errno+0x34>
   23614:	00800134 	movhi	r2,4
   23618:	10828904 	addi	r2,r2,2596
   2361c:	10800017 	ldw	r2,0(r2)
   23620:	103ee83a 	callr	r2
   23624:	00000206 	br	23630 <alt_get_errno+0x3c>
   23628:	00800134 	movhi	r2,4
   2362c:	10829104 	addi	r2,r2,2628
}
   23630:	e037883a 	mov	sp,fp
   23634:	dfc00117 	ldw	ra,4(sp)
   23638:	df000017 	ldw	fp,0(sp)
   2363c:	dec00204 	addi	sp,sp,8
   23640:	f800283a 	ret

00023644 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23644:	deffed04 	addi	sp,sp,-76
   23648:	dfc01215 	stw	ra,72(sp)
   2364c:	df001115 	stw	fp,68(sp)
   23650:	df001104 	addi	fp,sp,68
   23654:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23658:	e0bfff17 	ldw	r2,-4(fp)
   2365c:	10000816 	blt	r2,zero,23680 <isatty+0x3c>
   23660:	01400304 	movi	r5,12
   23664:	e13fff17 	ldw	r4,-4(fp)
   23668:	00231c00 	call	231c0 <__mulsi3>
   2366c:	1007883a 	mov	r3,r2
   23670:	00800134 	movhi	r2,4
   23674:	10821504 	addi	r2,r2,2132
   23678:	1885883a 	add	r2,r3,r2
   2367c:	00000106 	br	23684 <isatty+0x40>
   23680:	0005883a 	mov	r2,zero
   23684:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23688:	e0bfef17 	ldw	r2,-68(fp)
   2368c:	10000e26 	beq	r2,zero,236c8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23690:	e0bfef17 	ldw	r2,-68(fp)
   23694:	10800017 	ldw	r2,0(r2)
   23698:	10800817 	ldw	r2,32(r2)
   2369c:	1000021e 	bne	r2,zero,236a8 <isatty+0x64>
    {
      return 1;
   236a0:	00800044 	movi	r2,1
   236a4:	00000d06 	br	236dc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   236a8:	e0bff004 	addi	r2,fp,-64
   236ac:	100b883a 	mov	r5,r2
   236b0:	e13fff17 	ldw	r4,-4(fp)
   236b4:	002338c0 	call	2338c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   236b8:	e0bff117 	ldw	r2,-60(fp)
   236bc:	10880020 	cmpeqi	r2,r2,8192
   236c0:	10803fcc 	andi	r2,r2,255
   236c4:	00000506 	br	236dc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   236c8:	00235f40 	call	235f4 <alt_get_errno>
   236cc:	1007883a 	mov	r3,r2
   236d0:	00801444 	movi	r2,81
   236d4:	18800015 	stw	r2,0(r3)
    return 0;
   236d8:	0005883a 	mov	r2,zero
  }
}
   236dc:	e037883a 	mov	sp,fp
   236e0:	dfc00117 	ldw	ra,4(sp)
   236e4:	df000017 	ldw	fp,0(sp)
   236e8:	dec00204 	addi	sp,sp,8
   236ec:	f800283a 	ret

000236f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   236f0:	defffc04 	addi	sp,sp,-16
   236f4:	df000315 	stw	fp,12(sp)
   236f8:	df000304 	addi	fp,sp,12
   236fc:	e13ffd15 	stw	r4,-12(fp)
   23700:	e17ffe15 	stw	r5,-8(fp)
   23704:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23708:	e0fffe17 	ldw	r3,-8(fp)
   2370c:	e0bffd17 	ldw	r2,-12(fp)
   23710:	18800c26 	beq	r3,r2,23744 <alt_load_section+0x54>
  {
    while( to != end )
   23714:	00000806 	br	23738 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23718:	e0bffe17 	ldw	r2,-8(fp)
   2371c:	10c00104 	addi	r3,r2,4
   23720:	e0fffe15 	stw	r3,-8(fp)
   23724:	e0fffd17 	ldw	r3,-12(fp)
   23728:	19000104 	addi	r4,r3,4
   2372c:	e13ffd15 	stw	r4,-12(fp)
   23730:	18c00017 	ldw	r3,0(r3)
   23734:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23738:	e0fffe17 	ldw	r3,-8(fp)
   2373c:	e0bfff17 	ldw	r2,-4(fp)
   23740:	18bff51e 	bne	r3,r2,23718 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23744:	0001883a 	nop
   23748:	e037883a 	mov	sp,fp
   2374c:	df000017 	ldw	fp,0(sp)
   23750:	dec00104 	addi	sp,sp,4
   23754:	f800283a 	ret

00023758 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23758:	defffe04 	addi	sp,sp,-8
   2375c:	dfc00115 	stw	ra,4(sp)
   23760:	df000015 	stw	fp,0(sp)
   23764:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23768:	01800134 	movhi	r6,4
   2376c:	31828c04 	addi	r6,r6,2608
   23770:	01400134 	movhi	r5,4
   23774:	29400004 	addi	r5,r5,0
   23778:	010000b4 	movhi	r4,2
   2377c:	21136604 	addi	r4,r4,19864
   23780:	00236f00 	call	236f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23784:	018000b4 	movhi	r6,2
   23788:	31808c04 	addi	r6,r6,560
   2378c:	014000b4 	movhi	r5,2
   23790:	29400804 	addi	r5,r5,32
   23794:	010000b4 	movhi	r4,2
   23798:	21000804 	addi	r4,r4,32
   2379c:	00236f00 	call	236f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   237a0:	018000b4 	movhi	r6,2
   237a4:	31936604 	addi	r6,r6,19864
   237a8:	014000b4 	movhi	r5,2
   237ac:	29535304 	addi	r5,r5,19788
   237b0:	010000b4 	movhi	r4,2
   237b4:	21135304 	addi	r4,r4,19788
   237b8:	00236f00 	call	236f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   237bc:	00240880 	call	24088 <alt_dcache_flush_all>
  alt_icache_flush_all();
   237c0:	002425c0 	call	2425c <alt_icache_flush_all>
}
   237c4:	0001883a 	nop
   237c8:	e037883a 	mov	sp,fp
   237cc:	dfc00117 	ldw	ra,4(sp)
   237d0:	df000017 	ldw	fp,0(sp)
   237d4:	dec00204 	addi	sp,sp,8
   237d8:	f800283a 	ret

000237dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   237dc:	defffe04 	addi	sp,sp,-8
   237e0:	dfc00115 	stw	ra,4(sp)
   237e4:	df000015 	stw	fp,0(sp)
   237e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   237ec:	00800134 	movhi	r2,4
   237f0:	10828904 	addi	r2,r2,2596
   237f4:	10800017 	ldw	r2,0(r2)
   237f8:	10000526 	beq	r2,zero,23810 <alt_get_errno+0x34>
   237fc:	00800134 	movhi	r2,4
   23800:	10828904 	addi	r2,r2,2596
   23804:	10800017 	ldw	r2,0(r2)
   23808:	103ee83a 	callr	r2
   2380c:	00000206 	br	23818 <alt_get_errno+0x3c>
   23810:	00800134 	movhi	r2,4
   23814:	10829104 	addi	r2,r2,2628
}
   23818:	e037883a 	mov	sp,fp
   2381c:	dfc00117 	ldw	ra,4(sp)
   23820:	df000017 	ldw	fp,0(sp)
   23824:	dec00204 	addi	sp,sp,8
   23828:	f800283a 	ret

0002382c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2382c:	defff904 	addi	sp,sp,-28
   23830:	dfc00615 	stw	ra,24(sp)
   23834:	df000515 	stw	fp,20(sp)
   23838:	df000504 	addi	fp,sp,20
   2383c:	e13ffd15 	stw	r4,-12(fp)
   23840:	e17ffe15 	stw	r5,-8(fp)
   23844:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23848:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2384c:	e0bffd17 	ldw	r2,-12(fp)
   23850:	10000816 	blt	r2,zero,23874 <lseek+0x48>
   23854:	01400304 	movi	r5,12
   23858:	e13ffd17 	ldw	r4,-12(fp)
   2385c:	00231c00 	call	231c0 <__mulsi3>
   23860:	1007883a 	mov	r3,r2
   23864:	00800134 	movhi	r2,4
   23868:	10821504 	addi	r2,r2,2132
   2386c:	1885883a 	add	r2,r3,r2
   23870:	00000106 	br	23878 <lseek+0x4c>
   23874:	0005883a 	mov	r2,zero
   23878:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2387c:	e0bffc17 	ldw	r2,-16(fp)
   23880:	10001026 	beq	r2,zero,238c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23884:	e0bffc17 	ldw	r2,-16(fp)
   23888:	10800017 	ldw	r2,0(r2)
   2388c:	10800717 	ldw	r2,28(r2)
   23890:	10000926 	beq	r2,zero,238b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23894:	e0bffc17 	ldw	r2,-16(fp)
   23898:	10800017 	ldw	r2,0(r2)
   2389c:	10800717 	ldw	r2,28(r2)
   238a0:	e1bfff17 	ldw	r6,-4(fp)
   238a4:	e17ffe17 	ldw	r5,-8(fp)
   238a8:	e13ffc17 	ldw	r4,-16(fp)
   238ac:	103ee83a 	callr	r2
   238b0:	e0bffb15 	stw	r2,-20(fp)
   238b4:	00000506 	br	238cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   238b8:	00bfde84 	movi	r2,-134
   238bc:	e0bffb15 	stw	r2,-20(fp)
   238c0:	00000206 	br	238cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   238c4:	00bfebc4 	movi	r2,-81
   238c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   238cc:	e0bffb17 	ldw	r2,-20(fp)
   238d0:	1000070e 	bge	r2,zero,238f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   238d4:	00237dc0 	call	237dc <alt_get_errno>
   238d8:	1007883a 	mov	r3,r2
   238dc:	e0bffb17 	ldw	r2,-20(fp)
   238e0:	0085c83a 	sub	r2,zero,r2
   238e4:	18800015 	stw	r2,0(r3)
    rc = -1;
   238e8:	00bfffc4 	movi	r2,-1
   238ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   238f0:	e0bffb17 	ldw	r2,-20(fp)
}
   238f4:	e037883a 	mov	sp,fp
   238f8:	dfc00117 	ldw	ra,4(sp)
   238fc:	df000017 	ldw	fp,0(sp)
   23900:	dec00204 	addi	sp,sp,8
   23904:	f800283a 	ret

00023908 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23908:	defffd04 	addi	sp,sp,-12
   2390c:	dfc00215 	stw	ra,8(sp)
   23910:	df000115 	stw	fp,4(sp)
   23914:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23918:	0009883a 	mov	r4,zero
   2391c:	0023ddc0 	call	23ddc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23920:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23924:	0023e140 	call	23e14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23928:	018000b4 	movhi	r6,2
   2392c:	31935c04 	addi	r6,r6,19824
   23930:	014000b4 	movhi	r5,2
   23934:	29535c04 	addi	r5,r5,19824
   23938:	010000b4 	movhi	r4,2
   2393c:	21135c04 	addi	r4,r4,19824
   23940:	00243600 	call	24360 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23944:	002419c0 	call	2419c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23948:	010000b4 	movhi	r4,2
   2394c:	21107f04 	addi	r4,r4,16892
   23950:	00249b80 	call	249b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23954:	d0a01317 	ldw	r2,-32692(gp)
   23958:	d0e01417 	ldw	r3,-32688(gp)
   2395c:	d1201517 	ldw	r4,-32684(gp)
   23960:	200d883a 	mov	r6,r4
   23964:	180b883a 	mov	r5,r3
   23968:	1009883a 	mov	r4,r2
   2396c:	002026c0 	call	2026c <main>
   23970:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23974:	01000044 	movi	r4,1
   23978:	00232380 	call	23238 <close>
  exit (result);
   2397c:	e13fff17 	ldw	r4,-4(fp)
   23980:	00249cc0 	call	249cc <exit>

00023984 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23984:	defffe04 	addi	sp,sp,-8
   23988:	df000115 	stw	fp,4(sp)
   2398c:	df000104 	addi	fp,sp,4
   23990:	e13fff15 	stw	r4,-4(fp)
}
   23994:	0001883a 	nop
   23998:	e037883a 	mov	sp,fp
   2399c:	df000017 	ldw	fp,0(sp)
   239a0:	dec00104 	addi	sp,sp,4
   239a4:	f800283a 	ret

000239a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   239a8:	defffe04 	addi	sp,sp,-8
   239ac:	df000115 	stw	fp,4(sp)
   239b0:	df000104 	addi	fp,sp,4
   239b4:	e13fff15 	stw	r4,-4(fp)
}
   239b8:	0001883a 	nop
   239bc:	e037883a 	mov	sp,fp
   239c0:	df000017 	ldw	fp,0(sp)
   239c4:	dec00104 	addi	sp,sp,4
   239c8:	f800283a 	ret

000239cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   239cc:	defffe04 	addi	sp,sp,-8
   239d0:	dfc00115 	stw	ra,4(sp)
   239d4:	df000015 	stw	fp,0(sp)
   239d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239dc:	00800134 	movhi	r2,4
   239e0:	10828904 	addi	r2,r2,2596
   239e4:	10800017 	ldw	r2,0(r2)
   239e8:	10000526 	beq	r2,zero,23a00 <alt_get_errno+0x34>
   239ec:	00800134 	movhi	r2,4
   239f0:	10828904 	addi	r2,r2,2596
   239f4:	10800017 	ldw	r2,0(r2)
   239f8:	103ee83a 	callr	r2
   239fc:	00000206 	br	23a08 <alt_get_errno+0x3c>
   23a00:	00800134 	movhi	r2,4
   23a04:	10829104 	addi	r2,r2,2628
}
   23a08:	e037883a 	mov	sp,fp
   23a0c:	dfc00117 	ldw	ra,4(sp)
   23a10:	df000017 	ldw	fp,0(sp)
   23a14:	dec00204 	addi	sp,sp,8
   23a18:	f800283a 	ret

00023a1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23a1c:	defff904 	addi	sp,sp,-28
   23a20:	dfc00615 	stw	ra,24(sp)
   23a24:	df000515 	stw	fp,20(sp)
   23a28:	df000504 	addi	fp,sp,20
   23a2c:	e13ffd15 	stw	r4,-12(fp)
   23a30:	e17ffe15 	stw	r5,-8(fp)
   23a34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a38:	e0bffd17 	ldw	r2,-12(fp)
   23a3c:	10000816 	blt	r2,zero,23a60 <read+0x44>
   23a40:	01400304 	movi	r5,12
   23a44:	e13ffd17 	ldw	r4,-12(fp)
   23a48:	00231c00 	call	231c0 <__mulsi3>
   23a4c:	1007883a 	mov	r3,r2
   23a50:	00800134 	movhi	r2,4
   23a54:	10821504 	addi	r2,r2,2132
   23a58:	1885883a 	add	r2,r3,r2
   23a5c:	00000106 	br	23a64 <read+0x48>
   23a60:	0005883a 	mov	r2,zero
   23a64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23a68:	e0bffb17 	ldw	r2,-20(fp)
   23a6c:	10002226 	beq	r2,zero,23af8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a70:	e0bffb17 	ldw	r2,-20(fp)
   23a74:	10800217 	ldw	r2,8(r2)
   23a78:	108000cc 	andi	r2,r2,3
   23a7c:	10800060 	cmpeqi	r2,r2,1
   23a80:	1000181e 	bne	r2,zero,23ae4 <read+0xc8>
        (fd->dev->read))
   23a84:	e0bffb17 	ldw	r2,-20(fp)
   23a88:	10800017 	ldw	r2,0(r2)
   23a8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a90:	10001426 	beq	r2,zero,23ae4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23a94:	e0bffb17 	ldw	r2,-20(fp)
   23a98:	10800017 	ldw	r2,0(r2)
   23a9c:	10800517 	ldw	r2,20(r2)
   23aa0:	e0ffff17 	ldw	r3,-4(fp)
   23aa4:	180d883a 	mov	r6,r3
   23aa8:	e17ffe17 	ldw	r5,-8(fp)
   23aac:	e13ffb17 	ldw	r4,-20(fp)
   23ab0:	103ee83a 	callr	r2
   23ab4:	e0bffc15 	stw	r2,-16(fp)
   23ab8:	e0bffc17 	ldw	r2,-16(fp)
   23abc:	1000070e 	bge	r2,zero,23adc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23ac0:	00239cc0 	call	239cc <alt_get_errno>
   23ac4:	1007883a 	mov	r3,r2
   23ac8:	e0bffc17 	ldw	r2,-16(fp)
   23acc:	0085c83a 	sub	r2,zero,r2
   23ad0:	18800015 	stw	r2,0(r3)
          return -1;
   23ad4:	00bfffc4 	movi	r2,-1
   23ad8:	00000c06 	br	23b0c <read+0xf0>
        }
        return rval;
   23adc:	e0bffc17 	ldw	r2,-16(fp)
   23ae0:	00000a06 	br	23b0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23ae4:	00239cc0 	call	239cc <alt_get_errno>
   23ae8:	1007883a 	mov	r3,r2
   23aec:	00800344 	movi	r2,13
   23af0:	18800015 	stw	r2,0(r3)
   23af4:	00000406 	br	23b08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23af8:	00239cc0 	call	239cc <alt_get_errno>
   23afc:	1007883a 	mov	r3,r2
   23b00:	00801444 	movi	r2,81
   23b04:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23b08:	00bfffc4 	movi	r2,-1
}
   23b0c:	e037883a 	mov	sp,fp
   23b10:	dfc00117 	ldw	ra,4(sp)
   23b14:	df000017 	ldw	fp,0(sp)
   23b18:	dec00204 	addi	sp,sp,8
   23b1c:	f800283a 	ret

00023b20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23b20:	defffc04 	addi	sp,sp,-16
   23b24:	dfc00315 	stw	ra,12(sp)
   23b28:	df000215 	stw	fp,8(sp)
   23b2c:	dc000115 	stw	r16,4(sp)
   23b30:	df000204 	addi	fp,sp,8
   23b34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23b38:	e0bffe17 	ldw	r2,-8(fp)
   23b3c:	108000d0 	cmplti	r2,r2,3
   23b40:	1000111e 	bne	r2,zero,23b88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23b44:	04000134 	movhi	r16,4
   23b48:	84021504 	addi	r16,r16,2132
   23b4c:	e0bffe17 	ldw	r2,-8(fp)
   23b50:	01400304 	movi	r5,12
   23b54:	1009883a 	mov	r4,r2
   23b58:	00231c00 	call	231c0 <__mulsi3>
   23b5c:	8085883a 	add	r2,r16,r2
   23b60:	10800204 	addi	r2,r2,8
   23b64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23b68:	04000134 	movhi	r16,4
   23b6c:	84021504 	addi	r16,r16,2132
   23b70:	e0bffe17 	ldw	r2,-8(fp)
   23b74:	01400304 	movi	r5,12
   23b78:	1009883a 	mov	r4,r2
   23b7c:	00231c00 	call	231c0 <__mulsi3>
   23b80:	8085883a 	add	r2,r16,r2
   23b84:	10000015 	stw	zero,0(r2)
  }
}
   23b88:	0001883a 	nop
   23b8c:	e6ffff04 	addi	sp,fp,-4
   23b90:	dfc00217 	ldw	ra,8(sp)
   23b94:	df000117 	ldw	fp,4(sp)
   23b98:	dc000017 	ldw	r16,0(sp)
   23b9c:	dec00304 	addi	sp,sp,12
   23ba0:	f800283a 	ret

00023ba4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23ba4:	defff904 	addi	sp,sp,-28
   23ba8:	df000615 	stw	fp,24(sp)
   23bac:	df000604 	addi	fp,sp,24
   23bb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23bb4:	0005303a 	rdctl	r2,status
   23bb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23bbc:	e0fffe17 	ldw	r3,-8(fp)
   23bc0:	00bfff84 	movi	r2,-2
   23bc4:	1884703a 	and	r2,r3,r2
   23bc8:	1001703a 	wrctl	status,r2
  
  return context;
   23bcc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23bd0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23bd4:	d0a00b17 	ldw	r2,-32724(gp)
   23bd8:	10c000c4 	addi	r3,r2,3
   23bdc:	00bfff04 	movi	r2,-4
   23be0:	1884703a 	and	r2,r3,r2
   23be4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23be8:	d0e00b17 	ldw	r3,-32724(gp)
   23bec:	e0bfff17 	ldw	r2,-4(fp)
   23bf0:	1887883a 	add	r3,r3,r2
   23bf4:	008001b4 	movhi	r2,6
   23bf8:	10bd0004 	addi	r2,r2,-3072
   23bfc:	10c0062e 	bgeu	r2,r3,23c18 <sbrk+0x74>
   23c00:	e0bffb17 	ldw	r2,-20(fp)
   23c04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23c08:	e0bffa17 	ldw	r2,-24(fp)
   23c0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23c10:	00bfffc4 	movi	r2,-1
   23c14:	00000b06 	br	23c44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23c18:	d0a00b17 	ldw	r2,-32724(gp)
   23c1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23c20:	d0e00b17 	ldw	r3,-32724(gp)
   23c24:	e0bfff17 	ldw	r2,-4(fp)
   23c28:	1885883a 	add	r2,r3,r2
   23c2c:	d0a00b15 	stw	r2,-32724(gp)
   23c30:	e0bffb17 	ldw	r2,-20(fp)
   23c34:	e0bffc15 	stw	r2,-16(fp)
   23c38:	e0bffc17 	ldw	r2,-16(fp)
   23c3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23c40:	e0bffd17 	ldw	r2,-12(fp)
} 
   23c44:	e037883a 	mov	sp,fp
   23c48:	df000017 	ldw	fp,0(sp)
   23c4c:	dec00104 	addi	sp,sp,4
   23c50:	f800283a 	ret

00023c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23c54:	defffe04 	addi	sp,sp,-8
   23c58:	dfc00115 	stw	ra,4(sp)
   23c5c:	df000015 	stw	fp,0(sp)
   23c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c64:	00800134 	movhi	r2,4
   23c68:	10828904 	addi	r2,r2,2596
   23c6c:	10800017 	ldw	r2,0(r2)
   23c70:	10000526 	beq	r2,zero,23c88 <alt_get_errno+0x34>
   23c74:	00800134 	movhi	r2,4
   23c78:	10828904 	addi	r2,r2,2596
   23c7c:	10800017 	ldw	r2,0(r2)
   23c80:	103ee83a 	callr	r2
   23c84:	00000206 	br	23c90 <alt_get_errno+0x3c>
   23c88:	00800134 	movhi	r2,4
   23c8c:	10829104 	addi	r2,r2,2628
}
   23c90:	e037883a 	mov	sp,fp
   23c94:	dfc00117 	ldw	ra,4(sp)
   23c98:	df000017 	ldw	fp,0(sp)
   23c9c:	dec00204 	addi	sp,sp,8
   23ca0:	f800283a 	ret

00023ca4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23ca4:	defff904 	addi	sp,sp,-28
   23ca8:	dfc00615 	stw	ra,24(sp)
   23cac:	df000515 	stw	fp,20(sp)
   23cb0:	df000504 	addi	fp,sp,20
   23cb4:	e13ffd15 	stw	r4,-12(fp)
   23cb8:	e17ffe15 	stw	r5,-8(fp)
   23cbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23cc0:	e0bffd17 	ldw	r2,-12(fp)
   23cc4:	10000816 	blt	r2,zero,23ce8 <write+0x44>
   23cc8:	01400304 	movi	r5,12
   23ccc:	e13ffd17 	ldw	r4,-12(fp)
   23cd0:	00231c00 	call	231c0 <__mulsi3>
   23cd4:	1007883a 	mov	r3,r2
   23cd8:	00800134 	movhi	r2,4
   23cdc:	10821504 	addi	r2,r2,2132
   23ce0:	1885883a 	add	r2,r3,r2
   23ce4:	00000106 	br	23cec <write+0x48>
   23ce8:	0005883a 	mov	r2,zero
   23cec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23cf0:	e0bffb17 	ldw	r2,-20(fp)
   23cf4:	10002126 	beq	r2,zero,23d7c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23cf8:	e0bffb17 	ldw	r2,-20(fp)
   23cfc:	10800217 	ldw	r2,8(r2)
   23d00:	108000cc 	andi	r2,r2,3
   23d04:	10001826 	beq	r2,zero,23d68 <write+0xc4>
   23d08:	e0bffb17 	ldw	r2,-20(fp)
   23d0c:	10800017 	ldw	r2,0(r2)
   23d10:	10800617 	ldw	r2,24(r2)
   23d14:	10001426 	beq	r2,zero,23d68 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23d18:	e0bffb17 	ldw	r2,-20(fp)
   23d1c:	10800017 	ldw	r2,0(r2)
   23d20:	10800617 	ldw	r2,24(r2)
   23d24:	e0ffff17 	ldw	r3,-4(fp)
   23d28:	180d883a 	mov	r6,r3
   23d2c:	e17ffe17 	ldw	r5,-8(fp)
   23d30:	e13ffb17 	ldw	r4,-20(fp)
   23d34:	103ee83a 	callr	r2
   23d38:	e0bffc15 	stw	r2,-16(fp)
   23d3c:	e0bffc17 	ldw	r2,-16(fp)
   23d40:	1000070e 	bge	r2,zero,23d60 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23d44:	0023c540 	call	23c54 <alt_get_errno>
   23d48:	1007883a 	mov	r3,r2
   23d4c:	e0bffc17 	ldw	r2,-16(fp)
   23d50:	0085c83a 	sub	r2,zero,r2
   23d54:	18800015 	stw	r2,0(r3)
        return -1;
   23d58:	00bfffc4 	movi	r2,-1
   23d5c:	00000c06 	br	23d90 <write+0xec>
      }
      return rval;
   23d60:	e0bffc17 	ldw	r2,-16(fp)
   23d64:	00000a06 	br	23d90 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23d68:	0023c540 	call	23c54 <alt_get_errno>
   23d6c:	1007883a 	mov	r3,r2
   23d70:	00800344 	movi	r2,13
   23d74:	18800015 	stw	r2,0(r3)
   23d78:	00000406 	br	23d8c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23d7c:	0023c540 	call	23c54 <alt_get_errno>
   23d80:	1007883a 	mov	r3,r2
   23d84:	00801444 	movi	r2,81
   23d88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d8c:	00bfffc4 	movi	r2,-1
}
   23d90:	e037883a 	mov	sp,fp
   23d94:	dfc00117 	ldw	ra,4(sp)
   23d98:	df000017 	ldw	fp,0(sp)
   23d9c:	dec00204 	addi	sp,sp,8
   23da0:	f800283a 	ret

00023da4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23da4:	defffd04 	addi	sp,sp,-12
   23da8:	dfc00215 	stw	ra,8(sp)
   23dac:	df000115 	stw	fp,4(sp)
   23db0:	df000104 	addi	fp,sp,4
   23db4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23db8:	01400134 	movhi	r5,4
   23dbc:	29428604 	addi	r5,r5,2584
   23dc0:	e13fff17 	ldw	r4,-4(fp)
   23dc4:	00240f80 	call	240f8 <alt_dev_llist_insert>
}
   23dc8:	e037883a 	mov	sp,fp
   23dcc:	dfc00117 	ldw	ra,4(sp)
   23dd0:	df000017 	ldw	fp,0(sp)
   23dd4:	dec00204 	addi	sp,sp,8
   23dd8:	f800283a 	ret

00023ddc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23ddc:	defffd04 	addi	sp,sp,-12
   23de0:	dfc00215 	stw	ra,8(sp)
   23de4:	df000115 	stw	fp,4(sp)
   23de8:	df000104 	addi	fp,sp,4
   23dec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23df0:	00246800 	call	24680 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23df4:	00800044 	movi	r2,1
   23df8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23dfc:	0001883a 	nop
   23e00:	e037883a 	mov	sp,fp
   23e04:	dfc00117 	ldw	ra,4(sp)
   23e08:	df000017 	ldw	fp,0(sp)
   23e0c:	dec00204 	addi	sp,sp,8
   23e10:	f800283a 	ret

00023e14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23e14:	defffe04 	addi	sp,sp,-8
   23e18:	dfc00115 	stw	ra,4(sp)
   23e1c:	df000015 	stw	fp,0(sp)
   23e20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23e24:	01000134 	movhi	r4,4
   23e28:	21027504 	addi	r4,r4,2516
   23e2c:	0023da40 	call	23da4 <alt_dev_reg>
}
   23e30:	0001883a 	nop
   23e34:	e037883a 	mov	sp,fp
   23e38:	dfc00117 	ldw	ra,4(sp)
   23e3c:	df000017 	ldw	fp,0(sp)
   23e40:	dec00204 	addi	sp,sp,8
   23e44:	f800283a 	ret

00023e48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23e48:	defffa04 	addi	sp,sp,-24
   23e4c:	dfc00515 	stw	ra,20(sp)
   23e50:	df000415 	stw	fp,16(sp)
   23e54:	df000404 	addi	fp,sp,16
   23e58:	e13ffd15 	stw	r4,-12(fp)
   23e5c:	e17ffe15 	stw	r5,-8(fp)
   23e60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e64:	e0bffd17 	ldw	r2,-12(fp)
   23e68:	10800017 	ldw	r2,0(r2)
   23e6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23e70:	e0bffc17 	ldw	r2,-16(fp)
   23e74:	10c00a04 	addi	r3,r2,40
   23e78:	e0bffd17 	ldw	r2,-12(fp)
   23e7c:	10800217 	ldw	r2,8(r2)
   23e80:	100f883a 	mov	r7,r2
   23e84:	e1bfff17 	ldw	r6,-4(fp)
   23e88:	e17ffe17 	ldw	r5,-8(fp)
   23e8c:	1809883a 	mov	r4,r3
   23e90:	0023f080 	call	23f08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23e94:	e037883a 	mov	sp,fp
   23e98:	dfc00117 	ldw	ra,4(sp)
   23e9c:	df000017 	ldw	fp,0(sp)
   23ea0:	dec00204 	addi	sp,sp,8
   23ea4:	f800283a 	ret

00023ea8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ea8:	defffa04 	addi	sp,sp,-24
   23eac:	dfc00515 	stw	ra,20(sp)
   23eb0:	df000415 	stw	fp,16(sp)
   23eb4:	df000404 	addi	fp,sp,16
   23eb8:	e13ffd15 	stw	r4,-12(fp)
   23ebc:	e17ffe15 	stw	r5,-8(fp)
   23ec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23ec4:	e0bffd17 	ldw	r2,-12(fp)
   23ec8:	10800017 	ldw	r2,0(r2)
   23ecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23ed0:	e0bffc17 	ldw	r2,-16(fp)
   23ed4:	10c00a04 	addi	r3,r2,40
   23ed8:	e0bffd17 	ldw	r2,-12(fp)
   23edc:	10800217 	ldw	r2,8(r2)
   23ee0:	100f883a 	mov	r7,r2
   23ee4:	e1bfff17 	ldw	r6,-4(fp)
   23ee8:	e17ffe17 	ldw	r5,-8(fp)
   23eec:	1809883a 	mov	r4,r3
   23ef0:	0023ff40 	call	23ff4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23ef4:	e037883a 	mov	sp,fp
   23ef8:	dfc00117 	ldw	ra,4(sp)
   23efc:	df000017 	ldw	fp,0(sp)
   23f00:	dec00204 	addi	sp,sp,8
   23f04:	f800283a 	ret

00023f08 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23f08:	defff704 	addi	sp,sp,-36
   23f0c:	df000815 	stw	fp,32(sp)
   23f10:	df000804 	addi	fp,sp,32
   23f14:	e13ffc15 	stw	r4,-16(fp)
   23f18:	e17ffd15 	stw	r5,-12(fp)
   23f1c:	e1bffe15 	stw	r6,-8(fp)
   23f20:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23f24:	e0bffc17 	ldw	r2,-16(fp)
   23f28:	10800017 	ldw	r2,0(r2)
   23f2c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23f30:	e0bffd17 	ldw	r2,-12(fp)
   23f34:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23f38:	e0bffe17 	ldw	r2,-8(fp)
   23f3c:	e0fffd17 	ldw	r3,-12(fp)
   23f40:	1885883a 	add	r2,r3,r2
   23f44:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23f48:	00001206 	br	23f94 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23f4c:	e0bff917 	ldw	r2,-28(fp)
   23f50:	10800037 	ldwio	r2,0(r2)
   23f54:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23f58:	e0bffb17 	ldw	r2,-20(fp)
   23f5c:	10a0000c 	andi	r2,r2,32768
   23f60:	10000626 	beq	r2,zero,23f7c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23f64:	e0bff817 	ldw	r2,-32(fp)
   23f68:	10c00044 	addi	r3,r2,1
   23f6c:	e0fff815 	stw	r3,-32(fp)
   23f70:	e0fffb17 	ldw	r3,-20(fp)
   23f74:	10c00005 	stb	r3,0(r2)
   23f78:	00000606 	br	23f94 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23f7c:	e0fff817 	ldw	r3,-32(fp)
   23f80:	e0bffd17 	ldw	r2,-12(fp)
   23f84:	1880071e 	bne	r3,r2,23fa4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23f88:	e0bfff17 	ldw	r2,-4(fp)
   23f8c:	1090000c 	andi	r2,r2,16384
   23f90:	1000061e 	bne	r2,zero,23fac <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23f94:	e0fff817 	ldw	r3,-32(fp)
   23f98:	e0bffa17 	ldw	r2,-24(fp)
   23f9c:	18bfeb36 	bltu	r3,r2,23f4c <altera_avalon_jtag_uart_read+0x44>
   23fa0:	00000306 	br	23fb0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23fa4:	0001883a 	nop
   23fa8:	00000106 	br	23fb0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23fac:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23fb0:	e0fff817 	ldw	r3,-32(fp)
   23fb4:	e0bffd17 	ldw	r2,-12(fp)
   23fb8:	18800426 	beq	r3,r2,23fcc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23fbc:	e0fff817 	ldw	r3,-32(fp)
   23fc0:	e0bffd17 	ldw	r2,-12(fp)
   23fc4:	1885c83a 	sub	r2,r3,r2
   23fc8:	00000606 	br	23fe4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23fcc:	e0bfff17 	ldw	r2,-4(fp)
   23fd0:	1090000c 	andi	r2,r2,16384
   23fd4:	10000226 	beq	r2,zero,23fe0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23fd8:	00bffd44 	movi	r2,-11
   23fdc:	00000106 	br	23fe4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23fe0:	00bffec4 	movi	r2,-5
}
   23fe4:	e037883a 	mov	sp,fp
   23fe8:	df000017 	ldw	fp,0(sp)
   23fec:	dec00104 	addi	sp,sp,4
   23ff0:	f800283a 	ret

00023ff4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23ff4:	defff904 	addi	sp,sp,-28
   23ff8:	df000615 	stw	fp,24(sp)
   23ffc:	df000604 	addi	fp,sp,24
   24000:	e13ffc15 	stw	r4,-16(fp)
   24004:	e17ffd15 	stw	r5,-12(fp)
   24008:	e1bffe15 	stw	r6,-8(fp)
   2400c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24010:	e0bffc17 	ldw	r2,-16(fp)
   24014:	10800017 	ldw	r2,0(r2)
   24018:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   2401c:	e0bffe17 	ldw	r2,-8(fp)
   24020:	e0fffd17 	ldw	r3,-12(fp)
   24024:	1885883a 	add	r2,r3,r2
   24028:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   2402c:	00000e06 	br	24068 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   24030:	e0bffa17 	ldw	r2,-24(fp)
   24034:	10800104 	addi	r2,r2,4
   24038:	10800037 	ldwio	r2,0(r2)
   2403c:	10bfffec 	andhi	r2,r2,65535
   24040:	10000926 	beq	r2,zero,24068 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   24044:	e0fffa17 	ldw	r3,-24(fp)
   24048:	e0bffd17 	ldw	r2,-12(fp)
   2404c:	11000044 	addi	r4,r2,1
   24050:	e13ffd15 	stw	r4,-12(fp)
   24054:	10800003 	ldbu	r2,0(r2)
   24058:	10803fcc 	andi	r2,r2,255
   2405c:	1080201c 	xori	r2,r2,128
   24060:	10bfe004 	addi	r2,r2,-128
   24064:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   24068:	e0fffd17 	ldw	r3,-12(fp)
   2406c:	e0bffb17 	ldw	r2,-20(fp)
   24070:	18bfef36 	bltu	r3,r2,24030 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   24074:	e0bffe17 	ldw	r2,-8(fp)
}
   24078:	e037883a 	mov	sp,fp
   2407c:	df000017 	ldw	fp,0(sp)
   24080:	dec00104 	addi	sp,sp,4
   24084:	f800283a 	ret

00024088 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24088:	deffff04 	addi	sp,sp,-4
   2408c:	df000015 	stw	fp,0(sp)
   24090:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24094:	0001883a 	nop
   24098:	e037883a 	mov	sp,fp
   2409c:	df000017 	ldw	fp,0(sp)
   240a0:	dec00104 	addi	sp,sp,4
   240a4:	f800283a 	ret

000240a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   240a8:	defffe04 	addi	sp,sp,-8
   240ac:	dfc00115 	stw	ra,4(sp)
   240b0:	df000015 	stw	fp,0(sp)
   240b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   240b8:	00800134 	movhi	r2,4
   240bc:	10828904 	addi	r2,r2,2596
   240c0:	10800017 	ldw	r2,0(r2)
   240c4:	10000526 	beq	r2,zero,240dc <alt_get_errno+0x34>
   240c8:	00800134 	movhi	r2,4
   240cc:	10828904 	addi	r2,r2,2596
   240d0:	10800017 	ldw	r2,0(r2)
   240d4:	103ee83a 	callr	r2
   240d8:	00000206 	br	240e4 <alt_get_errno+0x3c>
   240dc:	00800134 	movhi	r2,4
   240e0:	10829104 	addi	r2,r2,2628
}
   240e4:	e037883a 	mov	sp,fp
   240e8:	dfc00117 	ldw	ra,4(sp)
   240ec:	df000017 	ldw	fp,0(sp)
   240f0:	dec00204 	addi	sp,sp,8
   240f4:	f800283a 	ret

000240f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   240f8:	defffa04 	addi	sp,sp,-24
   240fc:	dfc00515 	stw	ra,20(sp)
   24100:	df000415 	stw	fp,16(sp)
   24104:	df000404 	addi	fp,sp,16
   24108:	e13ffe15 	stw	r4,-8(fp)
   2410c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24110:	e0bffe17 	ldw	r2,-8(fp)
   24114:	10000326 	beq	r2,zero,24124 <alt_dev_llist_insert+0x2c>
   24118:	e0bffe17 	ldw	r2,-8(fp)
   2411c:	10800217 	ldw	r2,8(r2)
   24120:	1000061e 	bne	r2,zero,2413c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24124:	00240a80 	call	240a8 <alt_get_errno>
   24128:	1007883a 	mov	r3,r2
   2412c:	00800584 	movi	r2,22
   24130:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24134:	00bffa84 	movi	r2,-22
   24138:	00001306 	br	24188 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2413c:	e0bffe17 	ldw	r2,-8(fp)
   24140:	e0ffff17 	ldw	r3,-4(fp)
   24144:	e0fffc15 	stw	r3,-16(fp)
   24148:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2414c:	e0bffd17 	ldw	r2,-12(fp)
   24150:	e0fffc17 	ldw	r3,-16(fp)
   24154:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24158:	e0bffc17 	ldw	r2,-16(fp)
   2415c:	10c00017 	ldw	r3,0(r2)
   24160:	e0bffd17 	ldw	r2,-12(fp)
   24164:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24168:	e0bffc17 	ldw	r2,-16(fp)
   2416c:	10800017 	ldw	r2,0(r2)
   24170:	e0fffd17 	ldw	r3,-12(fp)
   24174:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24178:	e0bffc17 	ldw	r2,-16(fp)
   2417c:	e0fffd17 	ldw	r3,-12(fp)
   24180:	10c00015 	stw	r3,0(r2)

  return 0;  
   24184:	0005883a 	mov	r2,zero
}
   24188:	e037883a 	mov	sp,fp
   2418c:	dfc00117 	ldw	ra,4(sp)
   24190:	df000017 	ldw	fp,0(sp)
   24194:	dec00204 	addi	sp,sp,8
   24198:	f800283a 	ret

0002419c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2419c:	defffd04 	addi	sp,sp,-12
   241a0:	dfc00215 	stw	ra,8(sp)
   241a4:	df000115 	stw	fp,4(sp)
   241a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   241ac:	008000b4 	movhi	r2,2
   241b0:	10935204 	addi	r2,r2,19784
   241b4:	e0bfff15 	stw	r2,-4(fp)
   241b8:	00000606 	br	241d4 <_do_ctors+0x38>
        (*ctor) (); 
   241bc:	e0bfff17 	ldw	r2,-4(fp)
   241c0:	10800017 	ldw	r2,0(r2)
   241c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   241c8:	e0bfff17 	ldw	r2,-4(fp)
   241cc:	10bfff04 	addi	r2,r2,-4
   241d0:	e0bfff15 	stw	r2,-4(fp)
   241d4:	e0ffff17 	ldw	r3,-4(fp)
   241d8:	008000b4 	movhi	r2,2
   241dc:	10935304 	addi	r2,r2,19788
   241e0:	18bff62e 	bgeu	r3,r2,241bc <_do_ctors+0x20>
        (*ctor) (); 
}
   241e4:	0001883a 	nop
   241e8:	e037883a 	mov	sp,fp
   241ec:	dfc00117 	ldw	ra,4(sp)
   241f0:	df000017 	ldw	fp,0(sp)
   241f4:	dec00204 	addi	sp,sp,8
   241f8:	f800283a 	ret

000241fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   241fc:	defffd04 	addi	sp,sp,-12
   24200:	dfc00215 	stw	ra,8(sp)
   24204:	df000115 	stw	fp,4(sp)
   24208:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2420c:	008000b4 	movhi	r2,2
   24210:	10935204 	addi	r2,r2,19784
   24214:	e0bfff15 	stw	r2,-4(fp)
   24218:	00000606 	br	24234 <_do_dtors+0x38>
        (*dtor) (); 
   2421c:	e0bfff17 	ldw	r2,-4(fp)
   24220:	10800017 	ldw	r2,0(r2)
   24224:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24228:	e0bfff17 	ldw	r2,-4(fp)
   2422c:	10bfff04 	addi	r2,r2,-4
   24230:	e0bfff15 	stw	r2,-4(fp)
   24234:	e0ffff17 	ldw	r3,-4(fp)
   24238:	008000b4 	movhi	r2,2
   2423c:	10935304 	addi	r2,r2,19788
   24240:	18bff62e 	bgeu	r3,r2,2421c <_do_dtors+0x20>
        (*dtor) (); 
}
   24244:	0001883a 	nop
   24248:	e037883a 	mov	sp,fp
   2424c:	dfc00117 	ldw	ra,4(sp)
   24250:	df000017 	ldw	fp,0(sp)
   24254:	dec00204 	addi	sp,sp,8
   24258:	f800283a 	ret

0002425c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2425c:	deffff04 	addi	sp,sp,-4
   24260:	df000015 	stw	fp,0(sp)
   24264:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24268:	0001883a 	nop
   2426c:	e037883a 	mov	sp,fp
   24270:	df000017 	ldw	fp,0(sp)
   24274:	dec00104 	addi	sp,sp,4
   24278:	f800283a 	ret

0002427c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2427c:	defff804 	addi	sp,sp,-32
   24280:	dfc00715 	stw	ra,28(sp)
   24284:	df000615 	stw	fp,24(sp)
   24288:	dc000515 	stw	r16,20(sp)
   2428c:	df000604 	addi	fp,sp,24
   24290:	e13ffb15 	stw	r4,-20(fp)
   24294:	e17ffc15 	stw	r5,-16(fp)
   24298:	e1bffd15 	stw	r6,-12(fp)
   2429c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   242a0:	e1bffe17 	ldw	r6,-8(fp)
   242a4:	e17ffd17 	ldw	r5,-12(fp)
   242a8:	e13ffc17 	ldw	r4,-16(fp)
   242ac:	00245200 	call	24520 <open>
   242b0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   242b4:	e0bffa17 	ldw	r2,-24(fp)
   242b8:	10002216 	blt	r2,zero,24344 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   242bc:	04000134 	movhi	r16,4
   242c0:	84021504 	addi	r16,r16,2132
   242c4:	e0bffa17 	ldw	r2,-24(fp)
   242c8:	01400304 	movi	r5,12
   242cc:	1009883a 	mov	r4,r2
   242d0:	00231c00 	call	231c0 <__mulsi3>
   242d4:	8085883a 	add	r2,r16,r2
   242d8:	10c00017 	ldw	r3,0(r2)
   242dc:	e0bffb17 	ldw	r2,-20(fp)
   242e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   242e4:	04000134 	movhi	r16,4
   242e8:	84021504 	addi	r16,r16,2132
   242ec:	e0bffa17 	ldw	r2,-24(fp)
   242f0:	01400304 	movi	r5,12
   242f4:	1009883a 	mov	r4,r2
   242f8:	00231c00 	call	231c0 <__mulsi3>
   242fc:	8085883a 	add	r2,r16,r2
   24300:	10800104 	addi	r2,r2,4
   24304:	10c00017 	ldw	r3,0(r2)
   24308:	e0bffb17 	ldw	r2,-20(fp)
   2430c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24310:	04000134 	movhi	r16,4
   24314:	84021504 	addi	r16,r16,2132
   24318:	e0bffa17 	ldw	r2,-24(fp)
   2431c:	01400304 	movi	r5,12
   24320:	1009883a 	mov	r4,r2
   24324:	00231c00 	call	231c0 <__mulsi3>
   24328:	8085883a 	add	r2,r16,r2
   2432c:	10800204 	addi	r2,r2,8
   24330:	10c00017 	ldw	r3,0(r2)
   24334:	e0bffb17 	ldw	r2,-20(fp)
   24338:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2433c:	e13ffa17 	ldw	r4,-24(fp)
   24340:	0023b200 	call	23b20 <alt_release_fd>
  }
} 
   24344:	0001883a 	nop
   24348:	e6ffff04 	addi	sp,fp,-4
   2434c:	dfc00217 	ldw	ra,8(sp)
   24350:	df000117 	ldw	fp,4(sp)
   24354:	dc000017 	ldw	r16,0(sp)
   24358:	dec00304 	addi	sp,sp,12
   2435c:	f800283a 	ret

00024360 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24360:	defffb04 	addi	sp,sp,-20
   24364:	dfc00415 	stw	ra,16(sp)
   24368:	df000315 	stw	fp,12(sp)
   2436c:	df000304 	addi	fp,sp,12
   24370:	e13ffd15 	stw	r4,-12(fp)
   24374:	e17ffe15 	stw	r5,-8(fp)
   24378:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2437c:	01c07fc4 	movi	r7,511
   24380:	01800044 	movi	r6,1
   24384:	e17ffd17 	ldw	r5,-12(fp)
   24388:	01000134 	movhi	r4,4
   2438c:	21021804 	addi	r4,r4,2144
   24390:	002427c0 	call	2427c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24394:	01c07fc4 	movi	r7,511
   24398:	000d883a 	mov	r6,zero
   2439c:	e17ffe17 	ldw	r5,-8(fp)
   243a0:	01000134 	movhi	r4,4
   243a4:	21021504 	addi	r4,r4,2132
   243a8:	002427c0 	call	2427c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   243ac:	01c07fc4 	movi	r7,511
   243b0:	01800044 	movi	r6,1
   243b4:	e17fff17 	ldw	r5,-4(fp)
   243b8:	01000134 	movhi	r4,4
   243bc:	21021b04 	addi	r4,r4,2156
   243c0:	002427c0 	call	2427c <alt_open_fd>
}  
   243c4:	0001883a 	nop
   243c8:	e037883a 	mov	sp,fp
   243cc:	dfc00117 	ldw	ra,4(sp)
   243d0:	df000017 	ldw	fp,0(sp)
   243d4:	dec00204 	addi	sp,sp,8
   243d8:	f800283a 	ret

000243dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   243dc:	defffe04 	addi	sp,sp,-8
   243e0:	dfc00115 	stw	ra,4(sp)
   243e4:	df000015 	stw	fp,0(sp)
   243e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243ec:	00800134 	movhi	r2,4
   243f0:	10828904 	addi	r2,r2,2596
   243f4:	10800017 	ldw	r2,0(r2)
   243f8:	10000526 	beq	r2,zero,24410 <alt_get_errno+0x34>
   243fc:	00800134 	movhi	r2,4
   24400:	10828904 	addi	r2,r2,2596
   24404:	10800017 	ldw	r2,0(r2)
   24408:	103ee83a 	callr	r2
   2440c:	00000206 	br	24418 <alt_get_errno+0x3c>
   24410:	00800134 	movhi	r2,4
   24414:	10829104 	addi	r2,r2,2628
}
   24418:	e037883a 	mov	sp,fp
   2441c:	dfc00117 	ldw	ra,4(sp)
   24420:	df000017 	ldw	fp,0(sp)
   24424:	dec00204 	addi	sp,sp,8
   24428:	f800283a 	ret

0002442c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2442c:	defffb04 	addi	sp,sp,-20
   24430:	dfc00415 	stw	ra,16(sp)
   24434:	df000315 	stw	fp,12(sp)
   24438:	dc000215 	stw	r16,8(sp)
   2443c:	df000304 	addi	fp,sp,12
   24440:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24444:	e0bffe17 	ldw	r2,-8(fp)
   24448:	10800217 	ldw	r2,8(r2)
   2444c:	10d00034 	orhi	r3,r2,16384
   24450:	e0bffe17 	ldw	r2,-8(fp)
   24454:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24458:	e03ffd15 	stw	zero,-12(fp)
   2445c:	00002306 	br	244ec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24460:	04000134 	movhi	r16,4
   24464:	84021504 	addi	r16,r16,2132
   24468:	e0bffd17 	ldw	r2,-12(fp)
   2446c:	01400304 	movi	r5,12
   24470:	1009883a 	mov	r4,r2
   24474:	00231c00 	call	231c0 <__mulsi3>
   24478:	8085883a 	add	r2,r16,r2
   2447c:	10c00017 	ldw	r3,0(r2)
   24480:	e0bffe17 	ldw	r2,-8(fp)
   24484:	10800017 	ldw	r2,0(r2)
   24488:	1880151e 	bne	r3,r2,244e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2448c:	04000134 	movhi	r16,4
   24490:	84021504 	addi	r16,r16,2132
   24494:	e0bffd17 	ldw	r2,-12(fp)
   24498:	01400304 	movi	r5,12
   2449c:	1009883a 	mov	r4,r2
   244a0:	00231c00 	call	231c0 <__mulsi3>
   244a4:	8085883a 	add	r2,r16,r2
   244a8:	10800204 	addi	r2,r2,8
   244ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   244b0:	10000b0e 	bge	r2,zero,244e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   244b4:	01400304 	movi	r5,12
   244b8:	e13ffd17 	ldw	r4,-12(fp)
   244bc:	00231c00 	call	231c0 <__mulsi3>
   244c0:	1007883a 	mov	r3,r2
   244c4:	00800134 	movhi	r2,4
   244c8:	10821504 	addi	r2,r2,2132
   244cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   244d0:	e0bffe17 	ldw	r2,-8(fp)
   244d4:	18800226 	beq	r3,r2,244e0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   244d8:	00bffcc4 	movi	r2,-13
   244dc:	00000a06 	br	24508 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   244e0:	e0bffd17 	ldw	r2,-12(fp)
   244e4:	10800044 	addi	r2,r2,1
   244e8:	e0bffd15 	stw	r2,-12(fp)
   244ec:	00800134 	movhi	r2,4
   244f0:	10828804 	addi	r2,r2,2592
   244f4:	10800017 	ldw	r2,0(r2)
   244f8:	1007883a 	mov	r3,r2
   244fc:	e0bffd17 	ldw	r2,-12(fp)
   24500:	18bfd72e 	bgeu	r3,r2,24460 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24504:	0005883a 	mov	r2,zero
}
   24508:	e6ffff04 	addi	sp,fp,-4
   2450c:	dfc00217 	ldw	ra,8(sp)
   24510:	df000117 	ldw	fp,4(sp)
   24514:	dc000017 	ldw	r16,0(sp)
   24518:	dec00304 	addi	sp,sp,12
   2451c:	f800283a 	ret

00024520 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24520:	defff604 	addi	sp,sp,-40
   24524:	dfc00915 	stw	ra,36(sp)
   24528:	df000815 	stw	fp,32(sp)
   2452c:	df000804 	addi	fp,sp,32
   24530:	e13ffd15 	stw	r4,-12(fp)
   24534:	e17ffe15 	stw	r5,-8(fp)
   24538:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2453c:	00bfffc4 	movi	r2,-1
   24540:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24544:	00bffb44 	movi	r2,-19
   24548:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2454c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24550:	01400134 	movhi	r5,4
   24554:	29428604 	addi	r5,r5,2584
   24558:	e13ffd17 	ldw	r4,-12(fp)
   2455c:	00246a40 	call	246a4 <alt_find_dev>
   24560:	e0bff815 	stw	r2,-32(fp)
   24564:	e0bff817 	ldw	r2,-32(fp)
   24568:	1000051e 	bne	r2,zero,24580 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2456c:	e13ffd17 	ldw	r4,-12(fp)
   24570:	00247340 	call	24734 <alt_find_file>
   24574:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24578:	00800044 	movi	r2,1
   2457c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24580:	e0bff817 	ldw	r2,-32(fp)
   24584:	10002b26 	beq	r2,zero,24634 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24588:	e13ff817 	ldw	r4,-32(fp)
   2458c:	00248480 	call	24848 <alt_get_fd>
   24590:	e0bff915 	stw	r2,-28(fp)
   24594:	e0bff917 	ldw	r2,-28(fp)
   24598:	1000030e 	bge	r2,zero,245a8 <open+0x88>
    {
      status = index;
   2459c:	e0bff917 	ldw	r2,-28(fp)
   245a0:	e0bffa15 	stw	r2,-24(fp)
   245a4:	00002506 	br	2463c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   245a8:	01400304 	movi	r5,12
   245ac:	e13ff917 	ldw	r4,-28(fp)
   245b0:	00231c00 	call	231c0 <__mulsi3>
   245b4:	1007883a 	mov	r3,r2
   245b8:	00800134 	movhi	r2,4
   245bc:	10821504 	addi	r2,r2,2132
   245c0:	1885883a 	add	r2,r3,r2
   245c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   245c8:	e0fffe17 	ldw	r3,-8(fp)
   245cc:	00900034 	movhi	r2,16384
   245d0:	10bfffc4 	addi	r2,r2,-1
   245d4:	1886703a 	and	r3,r3,r2
   245d8:	e0bffc17 	ldw	r2,-16(fp)
   245dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   245e0:	e0bffb17 	ldw	r2,-20(fp)
   245e4:	1000051e 	bne	r2,zero,245fc <open+0xdc>
   245e8:	e13ffc17 	ldw	r4,-16(fp)
   245ec:	002442c0 	call	2442c <alt_file_locked>
   245f0:	e0bffa15 	stw	r2,-24(fp)
   245f4:	e0bffa17 	ldw	r2,-24(fp)
   245f8:	10001016 	blt	r2,zero,2463c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   245fc:	e0bff817 	ldw	r2,-32(fp)
   24600:	10800317 	ldw	r2,12(r2)
   24604:	10000826 	beq	r2,zero,24628 <open+0x108>
   24608:	e0bff817 	ldw	r2,-32(fp)
   2460c:	10800317 	ldw	r2,12(r2)
   24610:	e1ffff17 	ldw	r7,-4(fp)
   24614:	e1bffe17 	ldw	r6,-8(fp)
   24618:	e17ffd17 	ldw	r5,-12(fp)
   2461c:	e13ffc17 	ldw	r4,-16(fp)
   24620:	103ee83a 	callr	r2
   24624:	00000106 	br	2462c <open+0x10c>
   24628:	0005883a 	mov	r2,zero
   2462c:	e0bffa15 	stw	r2,-24(fp)
   24630:	00000206 	br	2463c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24634:	00bffb44 	movi	r2,-19
   24638:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2463c:	e0bffa17 	ldw	r2,-24(fp)
   24640:	1000090e 	bge	r2,zero,24668 <open+0x148>
  {
    alt_release_fd (index);  
   24644:	e13ff917 	ldw	r4,-28(fp)
   24648:	0023b200 	call	23b20 <alt_release_fd>
    ALT_ERRNO = -status;
   2464c:	00243dc0 	call	243dc <alt_get_errno>
   24650:	1007883a 	mov	r3,r2
   24654:	e0bffa17 	ldw	r2,-24(fp)
   24658:	0085c83a 	sub	r2,zero,r2
   2465c:	18800015 	stw	r2,0(r3)
    return -1;
   24660:	00bfffc4 	movi	r2,-1
   24664:	00000106 	br	2466c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   24668:	e0bff917 	ldw	r2,-28(fp)
}
   2466c:	e037883a 	mov	sp,fp
   24670:	dfc00117 	ldw	ra,4(sp)
   24674:	df000017 	ldw	fp,0(sp)
   24678:	dec00204 	addi	sp,sp,8
   2467c:	f800283a 	ret

00024680 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24680:	deffff04 	addi	sp,sp,-4
   24684:	df000015 	stw	fp,0(sp)
   24688:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2468c:	000170fa 	wrctl	ienable,zero
}
   24690:	0001883a 	nop
   24694:	e037883a 	mov	sp,fp
   24698:	df000017 	ldw	fp,0(sp)
   2469c:	dec00104 	addi	sp,sp,4
   246a0:	f800283a 	ret

000246a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   246a4:	defffa04 	addi	sp,sp,-24
   246a8:	dfc00515 	stw	ra,20(sp)
   246ac:	df000415 	stw	fp,16(sp)
   246b0:	df000404 	addi	fp,sp,16
   246b4:	e13ffe15 	stw	r4,-8(fp)
   246b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   246bc:	e0bfff17 	ldw	r2,-4(fp)
   246c0:	10800017 	ldw	r2,0(r2)
   246c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   246c8:	e13ffe17 	ldw	r4,-8(fp)
   246cc:	00204b00 	call	204b0 <strlen>
   246d0:	10800044 	addi	r2,r2,1
   246d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   246d8:	00000d06 	br	24710 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   246dc:	e0bffc17 	ldw	r2,-16(fp)
   246e0:	10800217 	ldw	r2,8(r2)
   246e4:	e0fffd17 	ldw	r3,-12(fp)
   246e8:	180d883a 	mov	r6,r3
   246ec:	e17ffe17 	ldw	r5,-8(fp)
   246f0:	1009883a 	mov	r4,r2
   246f4:	0024a040 	call	24a04 <memcmp>
   246f8:	1000021e 	bne	r2,zero,24704 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   246fc:	e0bffc17 	ldw	r2,-16(fp)
   24700:	00000706 	br	24720 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24704:	e0bffc17 	ldw	r2,-16(fp)
   24708:	10800017 	ldw	r2,0(r2)
   2470c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24710:	e0fffc17 	ldw	r3,-16(fp)
   24714:	e0bfff17 	ldw	r2,-4(fp)
   24718:	18bff01e 	bne	r3,r2,246dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2471c:	0005883a 	mov	r2,zero
}
   24720:	e037883a 	mov	sp,fp
   24724:	dfc00117 	ldw	ra,4(sp)
   24728:	df000017 	ldw	fp,0(sp)
   2472c:	dec00204 	addi	sp,sp,8
   24730:	f800283a 	ret

00024734 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24734:	defffb04 	addi	sp,sp,-20
   24738:	dfc00415 	stw	ra,16(sp)
   2473c:	df000315 	stw	fp,12(sp)
   24740:	df000304 	addi	fp,sp,12
   24744:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24748:	00800134 	movhi	r2,4
   2474c:	10828404 	addi	r2,r2,2576
   24750:	10800017 	ldw	r2,0(r2)
   24754:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24758:	00003106 	br	24820 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2475c:	e0bffd17 	ldw	r2,-12(fp)
   24760:	10800217 	ldw	r2,8(r2)
   24764:	1009883a 	mov	r4,r2
   24768:	00204b00 	call	204b0 <strlen>
   2476c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24770:	e0bffd17 	ldw	r2,-12(fp)
   24774:	10c00217 	ldw	r3,8(r2)
   24778:	e0bffe17 	ldw	r2,-8(fp)
   2477c:	10bfffc4 	addi	r2,r2,-1
   24780:	1885883a 	add	r2,r3,r2
   24784:	10800003 	ldbu	r2,0(r2)
   24788:	10803fcc 	andi	r2,r2,255
   2478c:	1080201c 	xori	r2,r2,128
   24790:	10bfe004 	addi	r2,r2,-128
   24794:	10800bd8 	cmpnei	r2,r2,47
   24798:	1000031e 	bne	r2,zero,247a8 <alt_find_file+0x74>
    {
      len -= 1;
   2479c:	e0bffe17 	ldw	r2,-8(fp)
   247a0:	10bfffc4 	addi	r2,r2,-1
   247a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   247a8:	e0bffe17 	ldw	r2,-8(fp)
   247ac:	e0ffff17 	ldw	r3,-4(fp)
   247b0:	1885883a 	add	r2,r3,r2
   247b4:	10800003 	ldbu	r2,0(r2)
   247b8:	10803fcc 	andi	r2,r2,255
   247bc:	1080201c 	xori	r2,r2,128
   247c0:	10bfe004 	addi	r2,r2,-128
   247c4:	10800be0 	cmpeqi	r2,r2,47
   247c8:	1000081e 	bne	r2,zero,247ec <alt_find_file+0xb8>
   247cc:	e0bffe17 	ldw	r2,-8(fp)
   247d0:	e0ffff17 	ldw	r3,-4(fp)
   247d4:	1885883a 	add	r2,r3,r2
   247d8:	10800003 	ldbu	r2,0(r2)
   247dc:	10803fcc 	andi	r2,r2,255
   247e0:	1080201c 	xori	r2,r2,128
   247e4:	10bfe004 	addi	r2,r2,-128
   247e8:	10000a1e 	bne	r2,zero,24814 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   247ec:	e0bffd17 	ldw	r2,-12(fp)
   247f0:	10800217 	ldw	r2,8(r2)
   247f4:	e0fffe17 	ldw	r3,-8(fp)
   247f8:	180d883a 	mov	r6,r3
   247fc:	e17fff17 	ldw	r5,-4(fp)
   24800:	1009883a 	mov	r4,r2
   24804:	0024a040 	call	24a04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24808:	1000021e 	bne	r2,zero,24814 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2480c:	e0bffd17 	ldw	r2,-12(fp)
   24810:	00000806 	br	24834 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   24814:	e0bffd17 	ldw	r2,-12(fp)
   24818:	10800017 	ldw	r2,0(r2)
   2481c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24820:	e0fffd17 	ldw	r3,-12(fp)
   24824:	00800134 	movhi	r2,4
   24828:	10828404 	addi	r2,r2,2576
   2482c:	18bfcb1e 	bne	r3,r2,2475c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24830:	0005883a 	mov	r2,zero
}
   24834:	e037883a 	mov	sp,fp
   24838:	dfc00117 	ldw	ra,4(sp)
   2483c:	df000017 	ldw	fp,0(sp)
   24840:	dec00204 	addi	sp,sp,8
   24844:	f800283a 	ret

00024848 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24848:	defffa04 	addi	sp,sp,-24
   2484c:	dfc00515 	stw	ra,20(sp)
   24850:	df000415 	stw	fp,16(sp)
   24854:	dc000315 	stw	r16,12(sp)
   24858:	df000404 	addi	fp,sp,16
   2485c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24860:	00bffa04 	movi	r2,-24
   24864:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24868:	e03ffc15 	stw	zero,-16(fp)
   2486c:	00002106 	br	248f4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   24870:	04000134 	movhi	r16,4
   24874:	84021504 	addi	r16,r16,2132
   24878:	e0bffc17 	ldw	r2,-16(fp)
   2487c:	01400304 	movi	r5,12
   24880:	1009883a 	mov	r4,r2
   24884:	00231c00 	call	231c0 <__mulsi3>
   24888:	8085883a 	add	r2,r16,r2
   2488c:	10800017 	ldw	r2,0(r2)
   24890:	1000151e 	bne	r2,zero,248e8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   24894:	04000134 	movhi	r16,4
   24898:	84021504 	addi	r16,r16,2132
   2489c:	e0bffc17 	ldw	r2,-16(fp)
   248a0:	01400304 	movi	r5,12
   248a4:	1009883a 	mov	r4,r2
   248a8:	00231c00 	call	231c0 <__mulsi3>
   248ac:	8085883a 	add	r2,r16,r2
   248b0:	e0fffe17 	ldw	r3,-8(fp)
   248b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   248b8:	00800134 	movhi	r2,4
   248bc:	10828804 	addi	r2,r2,2592
   248c0:	10c00017 	ldw	r3,0(r2)
   248c4:	e0bffc17 	ldw	r2,-16(fp)
   248c8:	1880040e 	bge	r3,r2,248dc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   248cc:	00800134 	movhi	r2,4
   248d0:	10828804 	addi	r2,r2,2592
   248d4:	e0fffc17 	ldw	r3,-16(fp)
   248d8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   248dc:	e0bffc17 	ldw	r2,-16(fp)
   248e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   248e4:	00000606 	br	24900 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   248e8:	e0bffc17 	ldw	r2,-16(fp)
   248ec:	10800044 	addi	r2,r2,1
   248f0:	e0bffc15 	stw	r2,-16(fp)
   248f4:	e0bffc17 	ldw	r2,-16(fp)
   248f8:	10800810 	cmplti	r2,r2,32
   248fc:	103fdc1e 	bne	r2,zero,24870 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24900:	e0bffd17 	ldw	r2,-12(fp)
}
   24904:	e6ffff04 	addi	sp,fp,-4
   24908:	dfc00217 	ldw	ra,8(sp)
   2490c:	df000117 	ldw	fp,4(sp)
   24910:	dc000017 	ldw	r16,0(sp)
   24914:	dec00304 	addi	sp,sp,12
   24918:	f800283a 	ret

0002491c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2491c:	defffe04 	addi	sp,sp,-8
   24920:	df000115 	stw	fp,4(sp)
   24924:	df000104 	addi	fp,sp,4
   24928:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2492c:	e0bfff17 	ldw	r2,-4(fp)
   24930:	10bffe84 	addi	r2,r2,-6
   24934:	10c00428 	cmpgeui	r3,r2,16
   24938:	18001a1e 	bne	r3,zero,249a4 <alt_exception_cause_generated_bad_addr+0x88>
   2493c:	100690ba 	slli	r3,r2,2
   24940:	008000b4 	movhi	r2,2
   24944:	10925504 	addi	r2,r2,18772
   24948:	1885883a 	add	r2,r3,r2
   2494c:	10800017 	ldw	r2,0(r2)
   24950:	1000683a 	jmp	r2
   24954:	00024994 	movui	zero,2342
   24958:	00024994 	movui	zero,2342
   2495c:	000249a4 	muli	zero,zero,2342
   24960:	000249a4 	muli	zero,zero,2342
   24964:	000249a4 	muli	zero,zero,2342
   24968:	00024994 	movui	zero,2342
   2496c:	0002499c 	xori	zero,zero,2342
   24970:	000249a4 	muli	zero,zero,2342
   24974:	00024994 	movui	zero,2342
   24978:	00024994 	movui	zero,2342
   2497c:	000249a4 	muli	zero,zero,2342
   24980:	00024994 	movui	zero,2342
   24984:	0002499c 	xori	zero,zero,2342
   24988:	000249a4 	muli	zero,zero,2342
   2498c:	000249a4 	muli	zero,zero,2342
   24990:	00024994 	movui	zero,2342
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24994:	00800044 	movi	r2,1
   24998:	00000306 	br	249a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2499c:	0005883a 	mov	r2,zero
   249a0:	00000106 	br	249a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   249a4:	0005883a 	mov	r2,zero
  }
}
   249a8:	e037883a 	mov	sp,fp
   249ac:	df000017 	ldw	fp,0(sp)
   249b0:	dec00104 	addi	sp,sp,4
   249b4:	f800283a 	ret

000249b8 <atexit>:
   249b8:	200b883a 	mov	r5,r4
   249bc:	000f883a 	mov	r7,zero
   249c0:	000d883a 	mov	r6,zero
   249c4:	0009883a 	mov	r4,zero
   249c8:	0024a801 	jmpi	24a80 <__register_exitproc>

000249cc <exit>:
   249cc:	defffe04 	addi	sp,sp,-8
   249d0:	000b883a 	mov	r5,zero
   249d4:	dc000015 	stw	r16,0(sp)
   249d8:	dfc00115 	stw	ra,4(sp)
   249dc:	2021883a 	mov	r16,r4
   249e0:	0024b980 	call	24b98 <__call_exitprocs>
   249e4:	00800134 	movhi	r2,4
   249e8:	10828004 	addi	r2,r2,2560
   249ec:	11000017 	ldw	r4,0(r2)
   249f0:	20800f17 	ldw	r2,60(r4)
   249f4:	10000126 	beq	r2,zero,249fc <exit+0x30>
   249f8:	103ee83a 	callr	r2
   249fc:	8009883a 	mov	r4,r16
   24a00:	0024d180 	call	24d18 <_exit>

00024a04 <memcmp>:
   24a04:	01c000c4 	movi	r7,3
   24a08:	3980192e 	bgeu	r7,r6,24a70 <memcmp+0x6c>
   24a0c:	2144b03a 	or	r2,r4,r5
   24a10:	11c4703a 	and	r2,r2,r7
   24a14:	10000f26 	beq	r2,zero,24a54 <memcmp+0x50>
   24a18:	20800003 	ldbu	r2,0(r4)
   24a1c:	28c00003 	ldbu	r3,0(r5)
   24a20:	10c0151e 	bne	r2,r3,24a78 <memcmp+0x74>
   24a24:	31bfff84 	addi	r6,r6,-2
   24a28:	01ffffc4 	movi	r7,-1
   24a2c:	00000406 	br	24a40 <memcmp+0x3c>
   24a30:	20800003 	ldbu	r2,0(r4)
   24a34:	28c00003 	ldbu	r3,0(r5)
   24a38:	31bfffc4 	addi	r6,r6,-1
   24a3c:	10c00e1e 	bne	r2,r3,24a78 <memcmp+0x74>
   24a40:	21000044 	addi	r4,r4,1
   24a44:	29400044 	addi	r5,r5,1
   24a48:	31fff91e 	bne	r6,r7,24a30 <memcmp+0x2c>
   24a4c:	0005883a 	mov	r2,zero
   24a50:	f800283a 	ret
   24a54:	20c00017 	ldw	r3,0(r4)
   24a58:	28800017 	ldw	r2,0(r5)
   24a5c:	18bfee1e 	bne	r3,r2,24a18 <memcmp+0x14>
   24a60:	31bfff04 	addi	r6,r6,-4
   24a64:	21000104 	addi	r4,r4,4
   24a68:	29400104 	addi	r5,r5,4
   24a6c:	39bff936 	bltu	r7,r6,24a54 <memcmp+0x50>
   24a70:	303fe91e 	bne	r6,zero,24a18 <memcmp+0x14>
   24a74:	003ff506 	br	24a4c <memcmp+0x48>
   24a78:	10c5c83a 	sub	r2,r2,r3
   24a7c:	f800283a 	ret

00024a80 <__register_exitproc>:
   24a80:	defffa04 	addi	sp,sp,-24
   24a84:	dc000315 	stw	r16,12(sp)
   24a88:	04000134 	movhi	r16,4
   24a8c:	84028004 	addi	r16,r16,2560
   24a90:	80c00017 	ldw	r3,0(r16)
   24a94:	dc400415 	stw	r17,16(sp)
   24a98:	dfc00515 	stw	ra,20(sp)
   24a9c:	18805217 	ldw	r2,328(r3)
   24aa0:	2023883a 	mov	r17,r4
   24aa4:	10003726 	beq	r2,zero,24b84 <__register_exitproc+0x104>
   24aa8:	10c00117 	ldw	r3,4(r2)
   24aac:	010007c4 	movi	r4,31
   24ab0:	20c00e16 	blt	r4,r3,24aec <__register_exitproc+0x6c>
   24ab4:	1a000044 	addi	r8,r3,1
   24ab8:	8800221e 	bne	r17,zero,24b44 <__register_exitproc+0xc4>
   24abc:	18c00084 	addi	r3,r3,2
   24ac0:	18c7883a 	add	r3,r3,r3
   24ac4:	18c7883a 	add	r3,r3,r3
   24ac8:	12000115 	stw	r8,4(r2)
   24acc:	10c7883a 	add	r3,r2,r3
   24ad0:	19400015 	stw	r5,0(r3)
   24ad4:	0005883a 	mov	r2,zero
   24ad8:	dfc00517 	ldw	ra,20(sp)
   24adc:	dc400417 	ldw	r17,16(sp)
   24ae0:	dc000317 	ldw	r16,12(sp)
   24ae4:	dec00604 	addi	sp,sp,24
   24ae8:	f800283a 	ret
   24aec:	00800034 	movhi	r2,0
   24af0:	10800004 	addi	r2,r2,0
   24af4:	10002626 	beq	r2,zero,24b90 <__register_exitproc+0x110>
   24af8:	01006404 	movi	r4,400
   24afc:	d9400015 	stw	r5,0(sp)
   24b00:	d9800115 	stw	r6,4(sp)
   24b04:	d9c00215 	stw	r7,8(sp)
   24b08:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24b0c:	d9400017 	ldw	r5,0(sp)
   24b10:	d9800117 	ldw	r6,4(sp)
   24b14:	d9c00217 	ldw	r7,8(sp)
   24b18:	10001d26 	beq	r2,zero,24b90 <__register_exitproc+0x110>
   24b1c:	81000017 	ldw	r4,0(r16)
   24b20:	10000115 	stw	zero,4(r2)
   24b24:	02000044 	movi	r8,1
   24b28:	22405217 	ldw	r9,328(r4)
   24b2c:	0007883a 	mov	r3,zero
   24b30:	12400015 	stw	r9,0(r2)
   24b34:	20805215 	stw	r2,328(r4)
   24b38:	10006215 	stw	zero,392(r2)
   24b3c:	10006315 	stw	zero,396(r2)
   24b40:	883fde26 	beq	r17,zero,24abc <__register_exitproc+0x3c>
   24b44:	18c9883a 	add	r4,r3,r3
   24b48:	2109883a 	add	r4,r4,r4
   24b4c:	1109883a 	add	r4,r2,r4
   24b50:	21802215 	stw	r6,136(r4)
   24b54:	01800044 	movi	r6,1
   24b58:	12406217 	ldw	r9,392(r2)
   24b5c:	30cc983a 	sll	r6,r6,r3
   24b60:	4992b03a 	or	r9,r9,r6
   24b64:	12406215 	stw	r9,392(r2)
   24b68:	21c04215 	stw	r7,264(r4)
   24b6c:	01000084 	movi	r4,2
   24b70:	893fd21e 	bne	r17,r4,24abc <__register_exitproc+0x3c>
   24b74:	11006317 	ldw	r4,396(r2)
   24b78:	218cb03a 	or	r6,r4,r6
   24b7c:	11806315 	stw	r6,396(r2)
   24b80:	003fce06 	br	24abc <__register_exitproc+0x3c>
   24b84:	18805304 	addi	r2,r3,332
   24b88:	18805215 	stw	r2,328(r3)
   24b8c:	003fc606 	br	24aa8 <__register_exitproc+0x28>
   24b90:	00bfffc4 	movi	r2,-1
   24b94:	003fd006 	br	24ad8 <__register_exitproc+0x58>

00024b98 <__call_exitprocs>:
   24b98:	defff504 	addi	sp,sp,-44
   24b9c:	df000915 	stw	fp,36(sp)
   24ba0:	dd400615 	stw	r21,24(sp)
   24ba4:	dc800315 	stw	r18,12(sp)
   24ba8:	dfc00a15 	stw	ra,40(sp)
   24bac:	ddc00815 	stw	r23,32(sp)
   24bb0:	dd800715 	stw	r22,28(sp)
   24bb4:	dd000515 	stw	r20,20(sp)
   24bb8:	dcc00415 	stw	r19,16(sp)
   24bbc:	dc400215 	stw	r17,8(sp)
   24bc0:	dc000115 	stw	r16,4(sp)
   24bc4:	d9000015 	stw	r4,0(sp)
   24bc8:	2839883a 	mov	fp,r5
   24bcc:	04800044 	movi	r18,1
   24bd0:	057fffc4 	movi	r21,-1
   24bd4:	00800134 	movhi	r2,4
   24bd8:	10828004 	addi	r2,r2,2560
   24bdc:	12000017 	ldw	r8,0(r2)
   24be0:	45005217 	ldw	r20,328(r8)
   24be4:	44c05204 	addi	r19,r8,328
   24be8:	a0001c26 	beq	r20,zero,24c5c <__call_exitprocs+0xc4>
   24bec:	a0800117 	ldw	r2,4(r20)
   24bf0:	15ffffc4 	addi	r23,r2,-1
   24bf4:	b8000d16 	blt	r23,zero,24c2c <__call_exitprocs+0x94>
   24bf8:	14000044 	addi	r16,r2,1
   24bfc:	8421883a 	add	r16,r16,r16
   24c00:	8421883a 	add	r16,r16,r16
   24c04:	84402004 	addi	r17,r16,128
   24c08:	a463883a 	add	r17,r20,r17
   24c0c:	a421883a 	add	r16,r20,r16
   24c10:	e0001e26 	beq	fp,zero,24c8c <__call_exitprocs+0xf4>
   24c14:	80804017 	ldw	r2,256(r16)
   24c18:	e0801c26 	beq	fp,r2,24c8c <__call_exitprocs+0xf4>
   24c1c:	bdffffc4 	addi	r23,r23,-1
   24c20:	843fff04 	addi	r16,r16,-4
   24c24:	8c7fff04 	addi	r17,r17,-4
   24c28:	bd7ff91e 	bne	r23,r21,24c10 <__call_exitprocs+0x78>
   24c2c:	00800034 	movhi	r2,0
   24c30:	10800004 	addi	r2,r2,0
   24c34:	10000926 	beq	r2,zero,24c5c <__call_exitprocs+0xc4>
   24c38:	a0800117 	ldw	r2,4(r20)
   24c3c:	1000301e 	bne	r2,zero,24d00 <__call_exitprocs+0x168>
   24c40:	a0800017 	ldw	r2,0(r20)
   24c44:	10003226 	beq	r2,zero,24d10 <__call_exitprocs+0x178>
   24c48:	a009883a 	mov	r4,r20
   24c4c:	98800015 	stw	r2,0(r19)
   24c50:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24c54:	9d000017 	ldw	r20,0(r19)
   24c58:	a03fe41e 	bne	r20,zero,24bec <__call_exitprocs+0x54>
   24c5c:	dfc00a17 	ldw	ra,40(sp)
   24c60:	df000917 	ldw	fp,36(sp)
   24c64:	ddc00817 	ldw	r23,32(sp)
   24c68:	dd800717 	ldw	r22,28(sp)
   24c6c:	dd400617 	ldw	r21,24(sp)
   24c70:	dd000517 	ldw	r20,20(sp)
   24c74:	dcc00417 	ldw	r19,16(sp)
   24c78:	dc800317 	ldw	r18,12(sp)
   24c7c:	dc400217 	ldw	r17,8(sp)
   24c80:	dc000117 	ldw	r16,4(sp)
   24c84:	dec00b04 	addi	sp,sp,44
   24c88:	f800283a 	ret
   24c8c:	a0800117 	ldw	r2,4(r20)
   24c90:	80c00017 	ldw	r3,0(r16)
   24c94:	10bfffc4 	addi	r2,r2,-1
   24c98:	15c01426 	beq	r2,r23,24cec <__call_exitprocs+0x154>
   24c9c:	80000015 	stw	zero,0(r16)
   24ca0:	183fde26 	beq	r3,zero,24c1c <__call_exitprocs+0x84>
   24ca4:	95c8983a 	sll	r4,r18,r23
   24ca8:	a0806217 	ldw	r2,392(r20)
   24cac:	a5800117 	ldw	r22,4(r20)
   24cb0:	2084703a 	and	r2,r4,r2
   24cb4:	10000b26 	beq	r2,zero,24ce4 <__call_exitprocs+0x14c>
   24cb8:	a0806317 	ldw	r2,396(r20)
   24cbc:	2088703a 	and	r4,r4,r2
   24cc0:	20000c1e 	bne	r4,zero,24cf4 <__call_exitprocs+0x15c>
   24cc4:	89400017 	ldw	r5,0(r17)
   24cc8:	d9000017 	ldw	r4,0(sp)
   24ccc:	183ee83a 	callr	r3
   24cd0:	a0800117 	ldw	r2,4(r20)
   24cd4:	15bfbf1e 	bne	r2,r22,24bd4 <__call_exitprocs+0x3c>
   24cd8:	98800017 	ldw	r2,0(r19)
   24cdc:	153fcf26 	beq	r2,r20,24c1c <__call_exitprocs+0x84>
   24ce0:	003fbc06 	br	24bd4 <__call_exitprocs+0x3c>
   24ce4:	183ee83a 	callr	r3
   24ce8:	003ff906 	br	24cd0 <__call_exitprocs+0x138>
   24cec:	a5c00115 	stw	r23,4(r20)
   24cf0:	003feb06 	br	24ca0 <__call_exitprocs+0x108>
   24cf4:	89000017 	ldw	r4,0(r17)
   24cf8:	183ee83a 	callr	r3
   24cfc:	003ff406 	br	24cd0 <__call_exitprocs+0x138>
   24d00:	a0800017 	ldw	r2,0(r20)
   24d04:	a027883a 	mov	r19,r20
   24d08:	1029883a 	mov	r20,r2
   24d0c:	003fb606 	br	24be8 <__call_exitprocs+0x50>
   24d10:	0005883a 	mov	r2,zero
   24d14:	003ffb06 	br	24d04 <__call_exitprocs+0x16c>

00024d18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24d18:	defffd04 	addi	sp,sp,-12
   24d1c:	df000215 	stw	fp,8(sp)
   24d20:	df000204 	addi	fp,sp,8
   24d24:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24d28:	0001883a 	nop
   24d2c:	e0bfff17 	ldw	r2,-4(fp)
   24d30:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24d34:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24d38:	10000226 	beq	r2,zero,24d44 <_exit+0x2c>
    ALT_SIM_FAIL();
   24d3c:	002af070 	cmpltui	zero,zero,43969
   24d40:	00000106 	br	24d48 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24d44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24d48:	003fff06 	br	24d48 <_exit+0x30>
