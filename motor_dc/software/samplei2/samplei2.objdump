
samplei2.elf:     file format elf32-littlenios2
samplei2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000047e4 memsz 0x000047e4 flags r-x
    LOAD off    0x00005804 vaddr 0x0000c804 paddr 0x0000d230 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006c5c vaddr 0x0000dc5c paddr 0x0000dc5c align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00006230  2**0
                  CONTENTS
  2 .text         00004794  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0000c7b4  0000c7b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0000c804  0000d230  00005804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0000dc5c  0000dc5c  00006c5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000dca0  0000dca0  00006230  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000888  00000000  00000000  00006258  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000147bb  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005293  00000000  00000000  0001b29b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005fb3  00000000  00000000  0002052e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001210  00000000  00000000  000264e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f72  00000000  00000000  000276f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a51  00000000  00000000  00029666  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000305b6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000305b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000305c5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000305c6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000305c7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000305d2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000305dd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  000305f1  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f7e  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031dd3  00000000  00000000  00035596  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c7b4 l    d  .rodata	00000000 .rodata
0000c804 l    d  .rwdata	00000000 .rwdata
0000dc5c l    d  .bss	00000000 .bss
0000dca0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../samplei2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000081fc l     F .text	00000008 __fp_unlock
00008210 l     F .text	0000019c __sinit.part.1
000083ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c804 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ae9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000afc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aff0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b0f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b1f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b2e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b4d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d22c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b758 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b8a8 l     F .text	00000038 alt_dev_reg
0000d1d8 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bbac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bd80 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bee0 l     F .text	00000050 alt_get_errno
0000bf30 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ac6c g     F .text	00000054 _isatty_r
0000b40c g     F .text	0000007c alt_main
00008090 g     F .text	000000c0 _puts_r
0000a994 g     F .text	00000060 _lseek_r
0000d230 g       *ABS*	00000000 __flash_rwdata_start
0000dca0 g       *ABS*	00000000 __alt_heap_start
00009f48 g     F .text	0000005c __sseek
0000855c g     F .text	00000010 __sinit
000083b4 g     F .text	00000078 __sfmoreglue
0000b4ac g     F .text	00000024 __malloc_unlock
00009634 g     F .text	0000015c memmove
00008544 g     F .text	00000018 _cleanup
0000c184 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ac10 g     F .text	0000005c _fstat_r
0000dc68 g     O .bss	00000004 errno
00009ec4 g     F .text	00000008 __seofread
0000dc70 g     O .bss	00000004 alt_argv
00015204 g       *ABS*	00000000 _gp
0000d058 g     O .rwdata	00000180 alt_fd_list
0000c1a8 g     F .text	00000090 alt_find_dev
000094ec g     F .text	00000148 memcpy
00008204 g     F .text	0000000c _cleanup_r
0000be64 g     F .text	0000007c alt_io_redirect
0000c7b4 g       *ABS*	00000000 __DTOR_END__
00008150 g     F .text	00000014 puts
0000ba0c g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000adb8 g     F .text	00000064 .hidden __udivsi3
0000b148 g     F .text	000000ac isatty
0000dc64 g     O .bss	00000004 __malloc_top_pad
000085ac g     F .text	000004c8 __sfvwrite_r
00009e1c g     F .text	00000054 _sbrk_r
0000abb0 g     F .text	00000060 _read_r
0000d224 g     O .rwdata	00000004 alt_max_fd
0000a1b4 g     F .text	000000f0 _fclose_r
0000a530 g     F .text	00000030 fflush
0000dc60 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b330 g     F .text	000000dc lseek
0000d204 g     O .rwdata	00000004 _global_impure_ptr
000098b8 g     F .text	00000564 _realloc_r
0000dca0 g       *ABS*	00000000 __bss_end
0000857c g     F .text	00000018 __fp_lock_all
0000d030 g     O .rwdata	00000028 alt_dev_null
0000bb8c g     F .text	00000020 alt_dcache_flush_all
0000d230 g       *ABS*	00000000 __ram_rwdata_end
0000d21c g     O .rwdata	00000008 alt_dev_list
0000b7a8 g     F .text	00000100 write
0000c804 g       *ABS*	00000000 __ram_rodata_end
0000b040 g     F .text	000000b8 fstat
0000ae1c g     F .text	00000058 .hidden __umodsi3
0000dca0 g       *ABS*	00000000 end
0000c7b4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000baf8 g     F .text	00000094 altera_avalon_jtag_uart_write
0000856c g     F .text	00000004 __sfp_lock_acquire
00009408 g     F .text	000000e4 memchr
0000a684 g     F .text	00000310 _free_r
0000c600 g     F .text	00000180 __call_exitprocs
0000d20c g     O .rwdata	00000004 __malloc_sbrk_base
00008020 g     F .text	0000003c _start
0000b520 g     F .text	00000104 read
0000b918 g     F .text	00000034 alt_sys_init
0000c4e8 g     F .text	00000118 __register_exitproc
0000ae74 g     F .text	00000028 .hidden __mulsi3
0000c804 g       *ABS*	00000000 __ram_rwdata_start
0000c7b4 g       *ABS*	00000000 __ram_rodata_start
0000dc78 g     O .bss	00000028 __malloc_current_mallinfo
0000b94c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c34c g     F .text	000000d4 alt_get_fd
0000a160 g     F .text	00000054 _close_r
0000c46c g     F .text	0000007c memcmp
0000dca0 g       *ABS*	00000000 __alt_stack_base
0000a00c g     F .text	00000154 __swsetup_r
0000842c g     F .text	00000118 __sfp
0000cc28 g     O .rwdata	00000408 __malloc_av_
00008578 g     F .text	00000004 __sinit_lock_release
00009e70 g     F .text	00000054 __sread
0000c238 g     F .text	00000114 alt_find_file
0000bbfc g     F .text	000000a4 alt_dev_llist_insert
0000b488 g     F .text	00000024 __malloc_lock
0000b6a8 g     F .text	000000b0 sbrk
0000a4d4 g     F .text	0000005c _fflush_r
0000dc5c g       *ABS*	00000000 __bss_start
00009790 g     F .text	00000128 memset
0000805c g     F .text	00000034 main
0000dc74 g     O .bss	00000004 alt_envp
0000dc5c g     O .bss	00000004 __malloc_max_total_mem
0000b9ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009fa4 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000a2a4 g     F .text	00000014 fclose
00008bfc g     F .text	0000080c _malloc_r
0000d228 g     O .rwdata	00000004 alt_errno
00008a74 g     F .text	000000c4 _fwalk
0000acc0 g     F .text	00000084 .hidden __divsi3
0000a560 g     F .text	00000124 _malloc_trim_r
0000c7b4 g       *ABS*	00000000 __CTOR_END__
0000c7b4 g       *ABS*	00000000 __flash_rodata_start
0000c7b4 g       *ABS*	00000000 __DTOR_LIST__
0000b8e0 g     F .text	00000038 alt_irq_init
0000b624 g     F .text	00000084 alt_release_fd
0000c420 g     F .text	00000014 atexit
00009fac g     F .text	00000060 _write_r
0000d208 g     O .rwdata	00000004 _impure_ptr
0000dc6c g     O .bss	00000004 alt_argc
0000a2b8 g     F .text	0000021c __sflush_r
0000bd00 g     F .text	00000060 _do_dtors
00008594 g     F .text	00000018 __fp_unlock_all
0000d214 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000d230 g       *ABS*	00000000 _edata
0000dca0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009ecc g     F .text	0000007c __swrite
0000d210 g     O .rwdata	00000004 __malloc_trim_threshold
0000c434 g     F .text	00000038 exit
00008b38 g     F .text	000000c4 _fwalk_reent
0000ad44 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008570 g     F .text	00000004 __sfp_lock_release
0000c780 g     F .text	00000034 _exit
0000a9f4 g     F .text	000001bc __smakebuf_r
00008164 g     F .text	00000098 strlen
0000c024 g     F .text	00000160 open
0000bd60 g     F .text	00000020 alt_icache_flush_all
0000bca0 g     F .text	00000060 _do_ctors
0000aeec g     F .text	000000d8 close
0000b25c g     F .text	00000084 alt_load
00008574 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6948114 	ori	gp,gp,20996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b71714 	ori	r2,r2,56412

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f72814 	ori	r3,r3,56480

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b25c0 	call	b25c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b40c0 	call	b40c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
 */

#include <stdio.h>

int main()
{
    805c:	defffe04 	addi	sp,sp,-8
    8060:	dfc00115 	stw	ra,4(sp)
    8064:	df000015 	stw	fp,0(sp)
    8068:	d839883a 	mov	fp,sp
  printf("Hello from bahia!\n");
    806c:	01000074 	movhi	r4,1
    8070:	2131ed04 	addi	r4,r4,-14412
    8074:	00081500 	call	8150 <puts>

  return 0;
    8078:	0005883a 	mov	r2,zero
}
    807c:	e037883a 	mov	sp,fp
    8080:	dfc00117 	ldw	ra,4(sp)
    8084:	df000017 	ldw	fp,0(sp)
    8088:	dec00204 	addi	sp,sp,8
    808c:	f800283a 	ret

00008090 <_puts_r>:
    8090:	defff604 	addi	sp,sp,-40
    8094:	dc000715 	stw	r16,28(sp)
    8098:	2021883a 	mov	r16,r4
    809c:	2809883a 	mov	r4,r5
    80a0:	dc400815 	stw	r17,32(sp)
    80a4:	dfc00915 	stw	ra,36(sp)
    80a8:	2823883a 	mov	r17,r5
    80ac:	00081640 	call	8164 <strlen>
    80b0:	10c00044 	addi	r3,r2,1
    80b4:	d8800115 	stw	r2,4(sp)
    80b8:	00800074 	movhi	r2,1
    80bc:	10b1f204 	addi	r2,r2,-14392
    80c0:	d8800215 	stw	r2,8(sp)
    80c4:	00800044 	movi	r2,1
    80c8:	d8800315 	stw	r2,12(sp)
    80cc:	00800084 	movi	r2,2
    80d0:	dc400015 	stw	r17,0(sp)
    80d4:	d8c00615 	stw	r3,24(sp)
    80d8:	dec00415 	stw	sp,16(sp)
    80dc:	d8800515 	stw	r2,20(sp)
    80e0:	80000226 	beq	r16,zero,80ec <_puts_r+0x5c>
    80e4:	80800e17 	ldw	r2,56(r16)
    80e8:	10001426 	beq	r2,zero,813c <_puts_r+0xac>
    80ec:	81400217 	ldw	r5,8(r16)
    80f0:	2880030b 	ldhu	r2,12(r5)
    80f4:	10c8000c 	andi	r3,r2,8192
    80f8:	1800061e 	bne	r3,zero,8114 <_puts_r+0x84>
    80fc:	29001917 	ldw	r4,100(r5)
    8100:	00f7ffc4 	movi	r3,-8193
    8104:	10880014 	ori	r2,r2,8192
    8108:	20c6703a 	and	r3,r4,r3
    810c:	2880030d 	sth	r2,12(r5)
    8110:	28c01915 	stw	r3,100(r5)
    8114:	d9800404 	addi	r6,sp,16
    8118:	8009883a 	mov	r4,r16
    811c:	00085ac0 	call	85ac <__sfvwrite_r>
    8120:	1000091e 	bne	r2,zero,8148 <_puts_r+0xb8>
    8124:	00800284 	movi	r2,10
    8128:	dfc00917 	ldw	ra,36(sp)
    812c:	dc400817 	ldw	r17,32(sp)
    8130:	dc000717 	ldw	r16,28(sp)
    8134:	dec00a04 	addi	sp,sp,40
    8138:	f800283a 	ret
    813c:	8009883a 	mov	r4,r16
    8140:	000855c0 	call	855c <__sinit>
    8144:	003fe906 	br	80ec <_puts_r+0x5c>
    8148:	00bfffc4 	movi	r2,-1
    814c:	003ff606 	br	8128 <_puts_r+0x98>

00008150 <puts>:
    8150:	00800074 	movhi	r2,1
    8154:	10b48204 	addi	r2,r2,-11768
    8158:	200b883a 	mov	r5,r4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	00080901 	jmpi	8090 <_puts_r>

00008164 <strlen>:
    8164:	208000cc 	andi	r2,r4,3
    8168:	10002026 	beq	r2,zero,81ec <strlen+0x88>
    816c:	20800007 	ldb	r2,0(r4)
    8170:	10002026 	beq	r2,zero,81f4 <strlen+0x90>
    8174:	2005883a 	mov	r2,r4
    8178:	00000206 	br	8184 <strlen+0x20>
    817c:	10c00007 	ldb	r3,0(r2)
    8180:	18001826 	beq	r3,zero,81e4 <strlen+0x80>
    8184:	10800044 	addi	r2,r2,1
    8188:	10c000cc 	andi	r3,r2,3
    818c:	183ffb1e 	bne	r3,zero,817c <strlen+0x18>
    8190:	10c00017 	ldw	r3,0(r2)
    8194:	01ffbff4 	movhi	r7,65279
    8198:	39ffbfc4 	addi	r7,r7,-257
    819c:	00ca303a 	nor	r5,zero,r3
    81a0:	01a02074 	movhi	r6,32897
    81a4:	19c7883a 	add	r3,r3,r7
    81a8:	31a02004 	addi	r6,r6,-32640
    81ac:	1946703a 	and	r3,r3,r5
    81b0:	1986703a 	and	r3,r3,r6
    81b4:	1800091e 	bne	r3,zero,81dc <strlen+0x78>
    81b8:	10800104 	addi	r2,r2,4
    81bc:	10c00017 	ldw	r3,0(r2)
    81c0:	19cb883a 	add	r5,r3,r7
    81c4:	00c6303a 	nor	r3,zero,r3
    81c8:	28c6703a 	and	r3,r5,r3
    81cc:	1986703a 	and	r3,r3,r6
    81d0:	183ff926 	beq	r3,zero,81b8 <strlen+0x54>
    81d4:	00000106 	br	81dc <strlen+0x78>
    81d8:	10800044 	addi	r2,r2,1
    81dc:	10c00007 	ldb	r3,0(r2)
    81e0:	183ffd1e 	bne	r3,zero,81d8 <strlen+0x74>
    81e4:	1105c83a 	sub	r2,r2,r4
    81e8:	f800283a 	ret
    81ec:	2005883a 	mov	r2,r4
    81f0:	003fe706 	br	8190 <strlen+0x2c>
    81f4:	0005883a 	mov	r2,zero
    81f8:	f800283a 	ret

000081fc <__fp_unlock>:
    81fc:	0005883a 	mov	r2,zero
    8200:	f800283a 	ret

00008204 <_cleanup_r>:
    8204:	01400074 	movhi	r5,1
    8208:	29686d04 	addi	r5,r5,-24140
    820c:	0008b381 	jmpi	8b38 <_fwalk_reent>

00008210 <__sinit.part.1>:
    8210:	defff704 	addi	sp,sp,-36
    8214:	00c00074 	movhi	r3,1
    8218:	dfc00815 	stw	ra,32(sp)
    821c:	ddc00715 	stw	r23,28(sp)
    8220:	dd800615 	stw	r22,24(sp)
    8224:	dd400515 	stw	r21,20(sp)
    8228:	dd000415 	stw	r20,16(sp)
    822c:	dcc00315 	stw	r19,12(sp)
    8230:	dc800215 	stw	r18,8(sp)
    8234:	dc400115 	stw	r17,4(sp)
    8238:	dc000015 	stw	r16,0(sp)
    823c:	18e08104 	addi	r3,r3,-32252
    8240:	24000117 	ldw	r16,4(r4)
    8244:	20c00f15 	stw	r3,60(r4)
    8248:	2080bb04 	addi	r2,r4,748
    824c:	00c000c4 	movi	r3,3
    8250:	20c0b915 	stw	r3,740(r4)
    8254:	2080ba15 	stw	r2,744(r4)
    8258:	2000b815 	stw	zero,736(r4)
    825c:	05c00204 	movi	r23,8
    8260:	00800104 	movi	r2,4
    8264:	2025883a 	mov	r18,r4
    8268:	b80d883a 	mov	r6,r23
    826c:	81001704 	addi	r4,r16,92
    8270:	000b883a 	mov	r5,zero
    8274:	80000015 	stw	zero,0(r16)
    8278:	80000115 	stw	zero,4(r16)
    827c:	80000215 	stw	zero,8(r16)
    8280:	8080030d 	sth	r2,12(r16)
    8284:	80001915 	stw	zero,100(r16)
    8288:	8000038d 	sth	zero,14(r16)
    828c:	80000415 	stw	zero,16(r16)
    8290:	80000515 	stw	zero,20(r16)
    8294:	80000615 	stw	zero,24(r16)
    8298:	00097900 	call	9790 <memset>
    829c:	05800074 	movhi	r22,1
    82a0:	94400217 	ldw	r17,8(r18)
    82a4:	05400074 	movhi	r21,1
    82a8:	05000074 	movhi	r20,1
    82ac:	04c00074 	movhi	r19,1
    82b0:	b5a79c04 	addi	r22,r22,-24976
    82b4:	ad67b304 	addi	r21,r21,-24884
    82b8:	a527d204 	addi	r20,r20,-24760
    82bc:	9ce7e904 	addi	r19,r19,-24668
    82c0:	85800815 	stw	r22,32(r16)
    82c4:	85400915 	stw	r21,36(r16)
    82c8:	85000a15 	stw	r20,40(r16)
    82cc:	84c00b15 	stw	r19,44(r16)
    82d0:	84000715 	stw	r16,28(r16)
    82d4:	00800284 	movi	r2,10
    82d8:	8880030d 	sth	r2,12(r17)
    82dc:	00800044 	movi	r2,1
    82e0:	b80d883a 	mov	r6,r23
    82e4:	89001704 	addi	r4,r17,92
    82e8:	000b883a 	mov	r5,zero
    82ec:	88000015 	stw	zero,0(r17)
    82f0:	88000115 	stw	zero,4(r17)
    82f4:	88000215 	stw	zero,8(r17)
    82f8:	88001915 	stw	zero,100(r17)
    82fc:	8880038d 	sth	r2,14(r17)
    8300:	88000415 	stw	zero,16(r17)
    8304:	88000515 	stw	zero,20(r17)
    8308:	88000615 	stw	zero,24(r17)
    830c:	00097900 	call	9790 <memset>
    8310:	94000317 	ldw	r16,12(r18)
    8314:	00800484 	movi	r2,18
    8318:	8c400715 	stw	r17,28(r17)
    831c:	8d800815 	stw	r22,32(r17)
    8320:	8d400915 	stw	r21,36(r17)
    8324:	8d000a15 	stw	r20,40(r17)
    8328:	8cc00b15 	stw	r19,44(r17)
    832c:	8080030d 	sth	r2,12(r16)
    8330:	00800084 	movi	r2,2
    8334:	80000015 	stw	zero,0(r16)
    8338:	80000115 	stw	zero,4(r16)
    833c:	80000215 	stw	zero,8(r16)
    8340:	80001915 	stw	zero,100(r16)
    8344:	8080038d 	sth	r2,14(r16)
    8348:	80000415 	stw	zero,16(r16)
    834c:	80000515 	stw	zero,20(r16)
    8350:	80000615 	stw	zero,24(r16)
    8354:	b80d883a 	mov	r6,r23
    8358:	000b883a 	mov	r5,zero
    835c:	81001704 	addi	r4,r16,92
    8360:	00097900 	call	9790 <memset>
    8364:	00800044 	movi	r2,1
    8368:	84000715 	stw	r16,28(r16)
    836c:	85800815 	stw	r22,32(r16)
    8370:	85400915 	stw	r21,36(r16)
    8374:	85000a15 	stw	r20,40(r16)
    8378:	84c00b15 	stw	r19,44(r16)
    837c:	90800e15 	stw	r2,56(r18)
    8380:	dfc00817 	ldw	ra,32(sp)
    8384:	ddc00717 	ldw	r23,28(sp)
    8388:	dd800617 	ldw	r22,24(sp)
    838c:	dd400517 	ldw	r21,20(sp)
    8390:	dd000417 	ldw	r20,16(sp)
    8394:	dcc00317 	ldw	r19,12(sp)
    8398:	dc800217 	ldw	r18,8(sp)
    839c:	dc400117 	ldw	r17,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00904 	addi	sp,sp,36
    83a8:	f800283a 	ret

000083ac <__fp_lock>:
    83ac:	0005883a 	mov	r2,zero
    83b0:	f800283a 	ret

000083b4 <__sfmoreglue>:
    83b4:	defffc04 	addi	sp,sp,-16
    83b8:	dc800215 	stw	r18,8(sp)
    83bc:	2825883a 	mov	r18,r5
    83c0:	dc000015 	stw	r16,0(sp)
    83c4:	01401a04 	movi	r5,104
    83c8:	2021883a 	mov	r16,r4
    83cc:	913fffc4 	addi	r4,r18,-1
    83d0:	dfc00315 	stw	ra,12(sp)
    83d4:	dc400115 	stw	r17,4(sp)
    83d8:	000ae740 	call	ae74 <__mulsi3>
    83dc:	8009883a 	mov	r4,r16
    83e0:	11401d04 	addi	r5,r2,116
    83e4:	1023883a 	mov	r17,r2
    83e8:	0008bfc0 	call	8bfc <_malloc_r>
    83ec:	1021883a 	mov	r16,r2
    83f0:	10000726 	beq	r2,zero,8410 <__sfmoreglue+0x5c>
    83f4:	11000304 	addi	r4,r2,12
    83f8:	10000015 	stw	zero,0(r2)
    83fc:	14800115 	stw	r18,4(r2)
    8400:	11000215 	stw	r4,8(r2)
    8404:	89801a04 	addi	r6,r17,104
    8408:	000b883a 	mov	r5,zero
    840c:	00097900 	call	9790 <memset>
    8410:	8005883a 	mov	r2,r16
    8414:	dfc00317 	ldw	ra,12(sp)
    8418:	dc800217 	ldw	r18,8(sp)
    841c:	dc400117 	ldw	r17,4(sp)
    8420:	dc000017 	ldw	r16,0(sp)
    8424:	dec00404 	addi	sp,sp,16
    8428:	f800283a 	ret

0000842c <__sfp>:
    842c:	defffb04 	addi	sp,sp,-20
    8430:	dc000015 	stw	r16,0(sp)
    8434:	04000074 	movhi	r16,1
    8438:	84348104 	addi	r16,r16,-11772
    843c:	dcc00315 	stw	r19,12(sp)
    8440:	2027883a 	mov	r19,r4
    8444:	81000017 	ldw	r4,0(r16)
    8448:	dfc00415 	stw	ra,16(sp)
    844c:	dc800215 	stw	r18,8(sp)
    8450:	20800e17 	ldw	r2,56(r4)
    8454:	dc400115 	stw	r17,4(sp)
    8458:	1000021e 	bne	r2,zero,8464 <__sfp+0x38>
    845c:	00082100 	call	8210 <__sinit.part.1>
    8460:	81000017 	ldw	r4,0(r16)
    8464:	2480b804 	addi	r18,r4,736
    8468:	047fffc4 	movi	r17,-1
    846c:	91000117 	ldw	r4,4(r18)
    8470:	94000217 	ldw	r16,8(r18)
    8474:	213fffc4 	addi	r4,r4,-1
    8478:	20000a16 	blt	r4,zero,84a4 <__sfp+0x78>
    847c:	8080030f 	ldh	r2,12(r16)
    8480:	10000c26 	beq	r2,zero,84b4 <__sfp+0x88>
    8484:	80c01d04 	addi	r3,r16,116
    8488:	00000206 	br	8494 <__sfp+0x68>
    848c:	18bfe60f 	ldh	r2,-104(r3)
    8490:	10000826 	beq	r2,zero,84b4 <__sfp+0x88>
    8494:	213fffc4 	addi	r4,r4,-1
    8498:	1c3ffd04 	addi	r16,r3,-12
    849c:	18c01a04 	addi	r3,r3,104
    84a0:	247ffa1e 	bne	r4,r17,848c <__sfp+0x60>
    84a4:	90800017 	ldw	r2,0(r18)
    84a8:	10001d26 	beq	r2,zero,8520 <__sfp+0xf4>
    84ac:	1025883a 	mov	r18,r2
    84b0:	003fee06 	br	846c <__sfp+0x40>
    84b4:	00bfffc4 	movi	r2,-1
    84b8:	8080038d 	sth	r2,14(r16)
    84bc:	00800044 	movi	r2,1
    84c0:	8080030d 	sth	r2,12(r16)
    84c4:	80001915 	stw	zero,100(r16)
    84c8:	80000015 	stw	zero,0(r16)
    84cc:	80000215 	stw	zero,8(r16)
    84d0:	80000115 	stw	zero,4(r16)
    84d4:	80000415 	stw	zero,16(r16)
    84d8:	80000515 	stw	zero,20(r16)
    84dc:	80000615 	stw	zero,24(r16)
    84e0:	01800204 	movi	r6,8
    84e4:	000b883a 	mov	r5,zero
    84e8:	81001704 	addi	r4,r16,92
    84ec:	00097900 	call	9790 <memset>
    84f0:	8005883a 	mov	r2,r16
    84f4:	80000c15 	stw	zero,48(r16)
    84f8:	80000d15 	stw	zero,52(r16)
    84fc:	80001115 	stw	zero,68(r16)
    8500:	80001215 	stw	zero,72(r16)
    8504:	dfc00417 	ldw	ra,16(sp)
    8508:	dcc00317 	ldw	r19,12(sp)
    850c:	dc800217 	ldw	r18,8(sp)
    8510:	dc400117 	ldw	r17,4(sp)
    8514:	dc000017 	ldw	r16,0(sp)
    8518:	dec00504 	addi	sp,sp,20
    851c:	f800283a 	ret
    8520:	01400104 	movi	r5,4
    8524:	9809883a 	mov	r4,r19
    8528:	00083b40 	call	83b4 <__sfmoreglue>
    852c:	90800015 	stw	r2,0(r18)
    8530:	103fde1e 	bne	r2,zero,84ac <__sfp+0x80>
    8534:	00800304 	movi	r2,12
    8538:	98800015 	stw	r2,0(r19)
    853c:	0005883a 	mov	r2,zero
    8540:	003ff006 	br	8504 <__sfp+0xd8>

00008544 <_cleanup>:
    8544:	00800074 	movhi	r2,1
    8548:	10b48104 	addi	r2,r2,-11772
    854c:	11000017 	ldw	r4,0(r2)
    8550:	01400074 	movhi	r5,1
    8554:	29686d04 	addi	r5,r5,-24140
    8558:	0008b381 	jmpi	8b38 <_fwalk_reent>

0000855c <__sinit>:
    855c:	20800e17 	ldw	r2,56(r4)
    8560:	10000126 	beq	r2,zero,8568 <__sinit+0xc>
    8564:	f800283a 	ret
    8568:	00082101 	jmpi	8210 <__sinit.part.1>

0000856c <__sfp_lock_acquire>:
    856c:	f800283a 	ret

00008570 <__sfp_lock_release>:
    8570:	f800283a 	ret

00008574 <__sinit_lock_acquire>:
    8574:	f800283a 	ret

00008578 <__sinit_lock_release>:
    8578:	f800283a 	ret

0000857c <__fp_lock_all>:
    857c:	00800074 	movhi	r2,1
    8580:	10b48204 	addi	r2,r2,-11768
    8584:	11000017 	ldw	r4,0(r2)
    8588:	01400074 	movhi	r5,1
    858c:	2960eb04 	addi	r5,r5,-31828
    8590:	0008a741 	jmpi	8a74 <_fwalk>

00008594 <__fp_unlock_all>:
    8594:	00800074 	movhi	r2,1
    8598:	10b48204 	addi	r2,r2,-11768
    859c:	11000017 	ldw	r4,0(r2)
    85a0:	01400074 	movhi	r5,1
    85a4:	29607f04 	addi	r5,r5,-32260
    85a8:	0008a741 	jmpi	8a74 <_fwalk>

000085ac <__sfvwrite_r>:
    85ac:	30800217 	ldw	r2,8(r6)
    85b0:	10006726 	beq	r2,zero,8750 <__sfvwrite_r+0x1a4>
    85b4:	28c0030b 	ldhu	r3,12(r5)
    85b8:	defff404 	addi	sp,sp,-48
    85bc:	dd400715 	stw	r21,28(sp)
    85c0:	dd000615 	stw	r20,24(sp)
    85c4:	dc000215 	stw	r16,8(sp)
    85c8:	dfc00b15 	stw	ra,44(sp)
    85cc:	df000a15 	stw	fp,40(sp)
    85d0:	ddc00915 	stw	r23,36(sp)
    85d4:	dd800815 	stw	r22,32(sp)
    85d8:	dcc00515 	stw	r19,20(sp)
    85dc:	dc800415 	stw	r18,16(sp)
    85e0:	dc400315 	stw	r17,12(sp)
    85e4:	1880020c 	andi	r2,r3,8
    85e8:	2821883a 	mov	r16,r5
    85ec:	202b883a 	mov	r21,r4
    85f0:	3029883a 	mov	r20,r6
    85f4:	10002726 	beq	r2,zero,8694 <__sfvwrite_r+0xe8>
    85f8:	28800417 	ldw	r2,16(r5)
    85fc:	10002526 	beq	r2,zero,8694 <__sfvwrite_r+0xe8>
    8600:	1880008c 	andi	r2,r3,2
    8604:	a4400017 	ldw	r17,0(r20)
    8608:	10002a26 	beq	r2,zero,86b4 <__sfvwrite_r+0x108>
    860c:	05a00034 	movhi	r22,32768
    8610:	0027883a 	mov	r19,zero
    8614:	0025883a 	mov	r18,zero
    8618:	b5bf0004 	addi	r22,r22,-1024
    861c:	980d883a 	mov	r6,r19
    8620:	a809883a 	mov	r4,r21
    8624:	90004626 	beq	r18,zero,8740 <__sfvwrite_r+0x194>
    8628:	900f883a 	mov	r7,r18
    862c:	b480022e 	bgeu	r22,r18,8638 <__sfvwrite_r+0x8c>
    8630:	01e00034 	movhi	r7,32768
    8634:	39ff0004 	addi	r7,r7,-1024
    8638:	80800917 	ldw	r2,36(r16)
    863c:	81400717 	ldw	r5,28(r16)
    8640:	103ee83a 	callr	r2
    8644:	00805a0e 	bge	zero,r2,87b0 <__sfvwrite_r+0x204>
    8648:	a0c00217 	ldw	r3,8(r20)
    864c:	98a7883a 	add	r19,r19,r2
    8650:	90a5c83a 	sub	r18,r18,r2
    8654:	1885c83a 	sub	r2,r3,r2
    8658:	a0800215 	stw	r2,8(r20)
    865c:	103fef1e 	bne	r2,zero,861c <__sfvwrite_r+0x70>
    8660:	0005883a 	mov	r2,zero
    8664:	dfc00b17 	ldw	ra,44(sp)
    8668:	df000a17 	ldw	fp,40(sp)
    866c:	ddc00917 	ldw	r23,36(sp)
    8670:	dd800817 	ldw	r22,32(sp)
    8674:	dd400717 	ldw	r21,28(sp)
    8678:	dd000617 	ldw	r20,24(sp)
    867c:	dcc00517 	ldw	r19,20(sp)
    8680:	dc800417 	ldw	r18,16(sp)
    8684:	dc400317 	ldw	r17,12(sp)
    8688:	dc000217 	ldw	r16,8(sp)
    868c:	dec00c04 	addi	sp,sp,48
    8690:	f800283a 	ret
    8694:	800b883a 	mov	r5,r16
    8698:	a809883a 	mov	r4,r21
    869c:	000a00c0 	call	a00c <__swsetup_r>
    86a0:	1000ee1e 	bne	r2,zero,8a5c <__sfvwrite_r+0x4b0>
    86a4:	80c0030b 	ldhu	r3,12(r16)
    86a8:	a4400017 	ldw	r17,0(r20)
    86ac:	1880008c 	andi	r2,r3,2
    86b0:	103fd61e 	bne	r2,zero,860c <__sfvwrite_r+0x60>
    86b4:	1880004c 	andi	r2,r3,1
    86b8:	1000421e 	bne	r2,zero,87c4 <__sfvwrite_r+0x218>
    86bc:	0039883a 	mov	fp,zero
    86c0:	0025883a 	mov	r18,zero
    86c4:	90001a26 	beq	r18,zero,8730 <__sfvwrite_r+0x184>
    86c8:	1880800c 	andi	r2,r3,512
    86cc:	84c00217 	ldw	r19,8(r16)
    86d0:	10002126 	beq	r2,zero,8758 <__sfvwrite_r+0x1ac>
    86d4:	982f883a 	mov	r23,r19
    86d8:	94c09636 	bltu	r18,r19,8934 <__sfvwrite_r+0x388>
    86dc:	1881200c 	andi	r2,r3,1152
    86e0:	1000a11e 	bne	r2,zero,8968 <__sfvwrite_r+0x3bc>
    86e4:	81000017 	ldw	r4,0(r16)
    86e8:	b80d883a 	mov	r6,r23
    86ec:	e00b883a 	mov	r5,fp
    86f0:	00096340 	call	9634 <memmove>
    86f4:	80c00217 	ldw	r3,8(r16)
    86f8:	81000017 	ldw	r4,0(r16)
    86fc:	9005883a 	mov	r2,r18
    8700:	1ce7c83a 	sub	r19,r3,r19
    8704:	25cf883a 	add	r7,r4,r23
    8708:	84c00215 	stw	r19,8(r16)
    870c:	81c00015 	stw	r7,0(r16)
    8710:	a0c00217 	ldw	r3,8(r20)
    8714:	e0b9883a 	add	fp,fp,r2
    8718:	90a5c83a 	sub	r18,r18,r2
    871c:	18a7c83a 	sub	r19,r3,r2
    8720:	a4c00215 	stw	r19,8(r20)
    8724:	983fce26 	beq	r19,zero,8660 <__sfvwrite_r+0xb4>
    8728:	80c0030b 	ldhu	r3,12(r16)
    872c:	903fe61e 	bne	r18,zero,86c8 <__sfvwrite_r+0x11c>
    8730:	8f000017 	ldw	fp,0(r17)
    8734:	8c800117 	ldw	r18,4(r17)
    8738:	8c400204 	addi	r17,r17,8
    873c:	003fe106 	br	86c4 <__sfvwrite_r+0x118>
    8740:	8cc00017 	ldw	r19,0(r17)
    8744:	8c800117 	ldw	r18,4(r17)
    8748:	8c400204 	addi	r17,r17,8
    874c:	003fb306 	br	861c <__sfvwrite_r+0x70>
    8750:	0005883a 	mov	r2,zero
    8754:	f800283a 	ret
    8758:	81000017 	ldw	r4,0(r16)
    875c:	80800417 	ldw	r2,16(r16)
    8760:	11005a36 	bltu	r2,r4,88cc <__sfvwrite_r+0x320>
    8764:	85c00517 	ldw	r23,20(r16)
    8768:	95c05836 	bltu	r18,r23,88cc <__sfvwrite_r+0x320>
    876c:	00a00034 	movhi	r2,32768
    8770:	10bfffc4 	addi	r2,r2,-1
    8774:	9009883a 	mov	r4,r18
    8778:	1480012e 	bgeu	r2,r18,8780 <__sfvwrite_r+0x1d4>
    877c:	1009883a 	mov	r4,r2
    8780:	b80b883a 	mov	r5,r23
    8784:	000acc00 	call	acc0 <__divsi3>
    8788:	b80b883a 	mov	r5,r23
    878c:	1009883a 	mov	r4,r2
    8790:	000ae740 	call	ae74 <__mulsi3>
    8794:	81400717 	ldw	r5,28(r16)
    8798:	80c00917 	ldw	r3,36(r16)
    879c:	100f883a 	mov	r7,r2
    87a0:	e00d883a 	mov	r6,fp
    87a4:	a809883a 	mov	r4,r21
    87a8:	183ee83a 	callr	r3
    87ac:	00bfd816 	blt	zero,r2,8710 <__sfvwrite_r+0x164>
    87b0:	8080030b 	ldhu	r2,12(r16)
    87b4:	10801014 	ori	r2,r2,64
    87b8:	8080030d 	sth	r2,12(r16)
    87bc:	00bfffc4 	movi	r2,-1
    87c0:	003fa806 	br	8664 <__sfvwrite_r+0xb8>
    87c4:	0027883a 	mov	r19,zero
    87c8:	0011883a 	mov	r8,zero
    87cc:	0039883a 	mov	fp,zero
    87d0:	0025883a 	mov	r18,zero
    87d4:	90001f26 	beq	r18,zero,8854 <__sfvwrite_r+0x2a8>
    87d8:	40005a26 	beq	r8,zero,8944 <__sfvwrite_r+0x398>
    87dc:	982d883a 	mov	r22,r19
    87e0:	94c0012e 	bgeu	r18,r19,87e8 <__sfvwrite_r+0x23c>
    87e4:	902d883a 	mov	r22,r18
    87e8:	81000017 	ldw	r4,0(r16)
    87ec:	80800417 	ldw	r2,16(r16)
    87f0:	b02f883a 	mov	r23,r22
    87f4:	81c00517 	ldw	r7,20(r16)
    87f8:	1100032e 	bgeu	r2,r4,8808 <__sfvwrite_r+0x25c>
    87fc:	80c00217 	ldw	r3,8(r16)
    8800:	38c7883a 	add	r3,r7,r3
    8804:	1d801816 	blt	r3,r22,8868 <__sfvwrite_r+0x2bc>
    8808:	b1c03e16 	blt	r22,r7,8904 <__sfvwrite_r+0x358>
    880c:	80800917 	ldw	r2,36(r16)
    8810:	81400717 	ldw	r5,28(r16)
    8814:	e00d883a 	mov	r6,fp
    8818:	da000115 	stw	r8,4(sp)
    881c:	a809883a 	mov	r4,r21
    8820:	103ee83a 	callr	r2
    8824:	102f883a 	mov	r23,r2
    8828:	da000117 	ldw	r8,4(sp)
    882c:	00bfe00e 	bge	zero,r2,87b0 <__sfvwrite_r+0x204>
    8830:	9de7c83a 	sub	r19,r19,r23
    8834:	98001f26 	beq	r19,zero,88b4 <__sfvwrite_r+0x308>
    8838:	a0800217 	ldw	r2,8(r20)
    883c:	e5f9883a 	add	fp,fp,r23
    8840:	95e5c83a 	sub	r18,r18,r23
    8844:	15efc83a 	sub	r23,r2,r23
    8848:	a5c00215 	stw	r23,8(r20)
    884c:	b83f8426 	beq	r23,zero,8660 <__sfvwrite_r+0xb4>
    8850:	903fe11e 	bne	r18,zero,87d8 <__sfvwrite_r+0x22c>
    8854:	8f000017 	ldw	fp,0(r17)
    8858:	8c800117 	ldw	r18,4(r17)
    885c:	0011883a 	mov	r8,zero
    8860:	8c400204 	addi	r17,r17,8
    8864:	003fdb06 	br	87d4 <__sfvwrite_r+0x228>
    8868:	180d883a 	mov	r6,r3
    886c:	e00b883a 	mov	r5,fp
    8870:	da000115 	stw	r8,4(sp)
    8874:	d8c00015 	stw	r3,0(sp)
    8878:	00096340 	call	9634 <memmove>
    887c:	d8c00017 	ldw	r3,0(sp)
    8880:	80800017 	ldw	r2,0(r16)
    8884:	800b883a 	mov	r5,r16
    8888:	a809883a 	mov	r4,r21
    888c:	10c5883a 	add	r2,r2,r3
    8890:	80800015 	stw	r2,0(r16)
    8894:	d8c00015 	stw	r3,0(sp)
    8898:	000a4d40 	call	a4d4 <_fflush_r>
    889c:	d8c00017 	ldw	r3,0(sp)
    88a0:	da000117 	ldw	r8,4(sp)
    88a4:	103fc21e 	bne	r2,zero,87b0 <__sfvwrite_r+0x204>
    88a8:	182f883a 	mov	r23,r3
    88ac:	9de7c83a 	sub	r19,r19,r23
    88b0:	983fe11e 	bne	r19,zero,8838 <__sfvwrite_r+0x28c>
    88b4:	800b883a 	mov	r5,r16
    88b8:	a809883a 	mov	r4,r21
    88bc:	000a4d40 	call	a4d4 <_fflush_r>
    88c0:	103fbb1e 	bne	r2,zero,87b0 <__sfvwrite_r+0x204>
    88c4:	0011883a 	mov	r8,zero
    88c8:	003fdb06 	br	8838 <__sfvwrite_r+0x28c>
    88cc:	94c0012e 	bgeu	r18,r19,88d4 <__sfvwrite_r+0x328>
    88d0:	9027883a 	mov	r19,r18
    88d4:	980d883a 	mov	r6,r19
    88d8:	e00b883a 	mov	r5,fp
    88dc:	00096340 	call	9634 <memmove>
    88e0:	80800217 	ldw	r2,8(r16)
    88e4:	80c00017 	ldw	r3,0(r16)
    88e8:	14c5c83a 	sub	r2,r2,r19
    88ec:	1cc7883a 	add	r3,r3,r19
    88f0:	80800215 	stw	r2,8(r16)
    88f4:	80c00015 	stw	r3,0(r16)
    88f8:	10004326 	beq	r2,zero,8a08 <__sfvwrite_r+0x45c>
    88fc:	9805883a 	mov	r2,r19
    8900:	003f8306 	br	8710 <__sfvwrite_r+0x164>
    8904:	b00d883a 	mov	r6,r22
    8908:	e00b883a 	mov	r5,fp
    890c:	da000115 	stw	r8,4(sp)
    8910:	00096340 	call	9634 <memmove>
    8914:	80800217 	ldw	r2,8(r16)
    8918:	80c00017 	ldw	r3,0(r16)
    891c:	da000117 	ldw	r8,4(sp)
    8920:	1585c83a 	sub	r2,r2,r22
    8924:	1dad883a 	add	r22,r3,r22
    8928:	80800215 	stw	r2,8(r16)
    892c:	85800015 	stw	r22,0(r16)
    8930:	003fbf06 	br	8830 <__sfvwrite_r+0x284>
    8934:	81000017 	ldw	r4,0(r16)
    8938:	9027883a 	mov	r19,r18
    893c:	902f883a 	mov	r23,r18
    8940:	003f6906 	br	86e8 <__sfvwrite_r+0x13c>
    8944:	900d883a 	mov	r6,r18
    8948:	01400284 	movi	r5,10
    894c:	e009883a 	mov	r4,fp
    8950:	00094080 	call	9408 <memchr>
    8954:	10003e26 	beq	r2,zero,8a50 <__sfvwrite_r+0x4a4>
    8958:	10800044 	addi	r2,r2,1
    895c:	1727c83a 	sub	r19,r2,fp
    8960:	02000044 	movi	r8,1
    8964:	003f9d06 	br	87dc <__sfvwrite_r+0x230>
    8968:	80800517 	ldw	r2,20(r16)
    896c:	81400417 	ldw	r5,16(r16)
    8970:	81c00017 	ldw	r7,0(r16)
    8974:	10a7883a 	add	r19,r2,r2
    8978:	9885883a 	add	r2,r19,r2
    897c:	1026d7fa 	srli	r19,r2,31
    8980:	396dc83a 	sub	r22,r7,r5
    8984:	b1000044 	addi	r4,r22,1
    8988:	9885883a 	add	r2,r19,r2
    898c:	1027d07a 	srai	r19,r2,1
    8990:	2485883a 	add	r2,r4,r18
    8994:	980d883a 	mov	r6,r19
    8998:	9880022e 	bgeu	r19,r2,89a4 <__sfvwrite_r+0x3f8>
    899c:	1027883a 	mov	r19,r2
    89a0:	100d883a 	mov	r6,r2
    89a4:	18c1000c 	andi	r3,r3,1024
    89a8:	18001c26 	beq	r3,zero,8a1c <__sfvwrite_r+0x470>
    89ac:	300b883a 	mov	r5,r6
    89b0:	a809883a 	mov	r4,r21
    89b4:	0008bfc0 	call	8bfc <_malloc_r>
    89b8:	102f883a 	mov	r23,r2
    89bc:	10002926 	beq	r2,zero,8a64 <__sfvwrite_r+0x4b8>
    89c0:	81400417 	ldw	r5,16(r16)
    89c4:	b00d883a 	mov	r6,r22
    89c8:	1009883a 	mov	r4,r2
    89cc:	00094ec0 	call	94ec <memcpy>
    89d0:	8080030b 	ldhu	r2,12(r16)
    89d4:	00fedfc4 	movi	r3,-1153
    89d8:	10c4703a 	and	r2,r2,r3
    89dc:	10802014 	ori	r2,r2,128
    89e0:	8080030d 	sth	r2,12(r16)
    89e4:	bd89883a 	add	r4,r23,r22
    89e8:	9d8fc83a 	sub	r7,r19,r22
    89ec:	85c00415 	stw	r23,16(r16)
    89f0:	84c00515 	stw	r19,20(r16)
    89f4:	81000015 	stw	r4,0(r16)
    89f8:	9027883a 	mov	r19,r18
    89fc:	81c00215 	stw	r7,8(r16)
    8a00:	902f883a 	mov	r23,r18
    8a04:	003f3806 	br	86e8 <__sfvwrite_r+0x13c>
    8a08:	800b883a 	mov	r5,r16
    8a0c:	a809883a 	mov	r4,r21
    8a10:	000a4d40 	call	a4d4 <_fflush_r>
    8a14:	103fb926 	beq	r2,zero,88fc <__sfvwrite_r+0x350>
    8a18:	003f6506 	br	87b0 <__sfvwrite_r+0x204>
    8a1c:	a809883a 	mov	r4,r21
    8a20:	00098b80 	call	98b8 <_realloc_r>
    8a24:	102f883a 	mov	r23,r2
    8a28:	103fee1e 	bne	r2,zero,89e4 <__sfvwrite_r+0x438>
    8a2c:	81400417 	ldw	r5,16(r16)
    8a30:	a809883a 	mov	r4,r21
    8a34:	000a6840 	call	a684 <_free_r>
    8a38:	8080030b 	ldhu	r2,12(r16)
    8a3c:	00ffdfc4 	movi	r3,-129
    8a40:	1884703a 	and	r2,r3,r2
    8a44:	00c00304 	movi	r3,12
    8a48:	a8c00015 	stw	r3,0(r21)
    8a4c:	003f5906 	br	87b4 <__sfvwrite_r+0x208>
    8a50:	94c00044 	addi	r19,r18,1
    8a54:	02000044 	movi	r8,1
    8a58:	003f6006 	br	87dc <__sfvwrite_r+0x230>
    8a5c:	00bfffc4 	movi	r2,-1
    8a60:	003f0006 	br	8664 <__sfvwrite_r+0xb8>
    8a64:	00800304 	movi	r2,12
    8a68:	a8800015 	stw	r2,0(r21)
    8a6c:	8080030b 	ldhu	r2,12(r16)
    8a70:	003f5006 	br	87b4 <__sfvwrite_r+0x208>

00008a74 <_fwalk>:
    8a74:	defff704 	addi	sp,sp,-36
    8a78:	dd000415 	stw	r20,16(sp)
    8a7c:	dfc00815 	stw	ra,32(sp)
    8a80:	ddc00715 	stw	r23,28(sp)
    8a84:	dd800615 	stw	r22,24(sp)
    8a88:	dd400515 	stw	r21,20(sp)
    8a8c:	dcc00315 	stw	r19,12(sp)
    8a90:	dc800215 	stw	r18,8(sp)
    8a94:	dc400115 	stw	r17,4(sp)
    8a98:	dc000015 	stw	r16,0(sp)
    8a9c:	2500b804 	addi	r20,r4,736
    8aa0:	a0002326 	beq	r20,zero,8b30 <_fwalk+0xbc>
    8aa4:	282b883a 	mov	r21,r5
    8aa8:	002f883a 	mov	r23,zero
    8aac:	05800044 	movi	r22,1
    8ab0:	04ffffc4 	movi	r19,-1
    8ab4:	a4400117 	ldw	r17,4(r20)
    8ab8:	a4800217 	ldw	r18,8(r20)
    8abc:	8c7fffc4 	addi	r17,r17,-1
    8ac0:	88000d16 	blt	r17,zero,8af8 <_fwalk+0x84>
    8ac4:	94000304 	addi	r16,r18,12
    8ac8:	94800384 	addi	r18,r18,14
    8acc:	8080000b 	ldhu	r2,0(r16)
    8ad0:	8c7fffc4 	addi	r17,r17,-1
    8ad4:	813ffd04 	addi	r4,r16,-12
    8ad8:	b080042e 	bgeu	r22,r2,8aec <_fwalk+0x78>
    8adc:	9080000f 	ldh	r2,0(r18)
    8ae0:	14c00226 	beq	r2,r19,8aec <_fwalk+0x78>
    8ae4:	a83ee83a 	callr	r21
    8ae8:	b8aeb03a 	or	r23,r23,r2
    8aec:	84001a04 	addi	r16,r16,104
    8af0:	94801a04 	addi	r18,r18,104
    8af4:	8cfff51e 	bne	r17,r19,8acc <_fwalk+0x58>
    8af8:	a5000017 	ldw	r20,0(r20)
    8afc:	a03fed1e 	bne	r20,zero,8ab4 <_fwalk+0x40>
    8b00:	b805883a 	mov	r2,r23
    8b04:	dfc00817 	ldw	ra,32(sp)
    8b08:	ddc00717 	ldw	r23,28(sp)
    8b0c:	dd800617 	ldw	r22,24(sp)
    8b10:	dd400517 	ldw	r21,20(sp)
    8b14:	dd000417 	ldw	r20,16(sp)
    8b18:	dcc00317 	ldw	r19,12(sp)
    8b1c:	dc800217 	ldw	r18,8(sp)
    8b20:	dc400117 	ldw	r17,4(sp)
    8b24:	dc000017 	ldw	r16,0(sp)
    8b28:	dec00904 	addi	sp,sp,36
    8b2c:	f800283a 	ret
    8b30:	002f883a 	mov	r23,zero
    8b34:	003ff206 	br	8b00 <_fwalk+0x8c>

00008b38 <_fwalk_reent>:
    8b38:	defff704 	addi	sp,sp,-36
    8b3c:	dd000415 	stw	r20,16(sp)
    8b40:	dfc00815 	stw	ra,32(sp)
    8b44:	ddc00715 	stw	r23,28(sp)
    8b48:	dd800615 	stw	r22,24(sp)
    8b4c:	dd400515 	stw	r21,20(sp)
    8b50:	dcc00315 	stw	r19,12(sp)
    8b54:	dc800215 	stw	r18,8(sp)
    8b58:	dc400115 	stw	r17,4(sp)
    8b5c:	dc000015 	stw	r16,0(sp)
    8b60:	2500b804 	addi	r20,r4,736
    8b64:	a0002326 	beq	r20,zero,8bf4 <_fwalk_reent+0xbc>
    8b68:	282b883a 	mov	r21,r5
    8b6c:	2027883a 	mov	r19,r4
    8b70:	002f883a 	mov	r23,zero
    8b74:	05800044 	movi	r22,1
    8b78:	04bfffc4 	movi	r18,-1
    8b7c:	a4400117 	ldw	r17,4(r20)
    8b80:	a4000217 	ldw	r16,8(r20)
    8b84:	8c7fffc4 	addi	r17,r17,-1
    8b88:	88000c16 	blt	r17,zero,8bbc <_fwalk_reent+0x84>
    8b8c:	84000304 	addi	r16,r16,12
    8b90:	8080000b 	ldhu	r2,0(r16)
    8b94:	8c7fffc4 	addi	r17,r17,-1
    8b98:	817ffd04 	addi	r5,r16,-12
    8b9c:	b080052e 	bgeu	r22,r2,8bb4 <_fwalk_reent+0x7c>
    8ba0:	8080008f 	ldh	r2,2(r16)
    8ba4:	9809883a 	mov	r4,r19
    8ba8:	14800226 	beq	r2,r18,8bb4 <_fwalk_reent+0x7c>
    8bac:	a83ee83a 	callr	r21
    8bb0:	b8aeb03a 	or	r23,r23,r2
    8bb4:	84001a04 	addi	r16,r16,104
    8bb8:	8cbff51e 	bne	r17,r18,8b90 <_fwalk_reent+0x58>
    8bbc:	a5000017 	ldw	r20,0(r20)
    8bc0:	a03fee1e 	bne	r20,zero,8b7c <_fwalk_reent+0x44>
    8bc4:	b805883a 	mov	r2,r23
    8bc8:	dfc00817 	ldw	ra,32(sp)
    8bcc:	ddc00717 	ldw	r23,28(sp)
    8bd0:	dd800617 	ldw	r22,24(sp)
    8bd4:	dd400517 	ldw	r21,20(sp)
    8bd8:	dd000417 	ldw	r20,16(sp)
    8bdc:	dcc00317 	ldw	r19,12(sp)
    8be0:	dc800217 	ldw	r18,8(sp)
    8be4:	dc400117 	ldw	r17,4(sp)
    8be8:	dc000017 	ldw	r16,0(sp)
    8bec:	dec00904 	addi	sp,sp,36
    8bf0:	f800283a 	ret
    8bf4:	002f883a 	mov	r23,zero
    8bf8:	003ff206 	br	8bc4 <_fwalk_reent+0x8c>

00008bfc <_malloc_r>:
    8bfc:	defff504 	addi	sp,sp,-44
    8c00:	dc800315 	stw	r18,12(sp)
    8c04:	dfc00a15 	stw	ra,40(sp)
    8c08:	df000915 	stw	fp,36(sp)
    8c0c:	ddc00815 	stw	r23,32(sp)
    8c10:	dd800715 	stw	r22,28(sp)
    8c14:	dd400615 	stw	r21,24(sp)
    8c18:	dd000515 	stw	r20,20(sp)
    8c1c:	dcc00415 	stw	r19,16(sp)
    8c20:	dc400215 	stw	r17,8(sp)
    8c24:	dc000115 	stw	r16,4(sp)
    8c28:	288002c4 	addi	r2,r5,11
    8c2c:	00c00584 	movi	r3,22
    8c30:	2025883a 	mov	r18,r4
    8c34:	18807f2e 	bgeu	r3,r2,8e34 <_malloc_r+0x238>
    8c38:	047ffe04 	movi	r17,-8
    8c3c:	1462703a 	and	r17,r2,r17
    8c40:	8800a316 	blt	r17,zero,8ed0 <_malloc_r+0x2d4>
    8c44:	8940a236 	bltu	r17,r5,8ed0 <_malloc_r+0x2d4>
    8c48:	000b4880 	call	b488 <__malloc_lock>
    8c4c:	00807dc4 	movi	r2,503
    8c50:	1441e92e 	bgeu	r2,r17,93f8 <_malloc_r+0x7fc>
    8c54:	8804d27a 	srli	r2,r17,9
    8c58:	1000a126 	beq	r2,zero,8ee0 <_malloc_r+0x2e4>
    8c5c:	00c00104 	movi	r3,4
    8c60:	18811e36 	bltu	r3,r2,90dc <_malloc_r+0x4e0>
    8c64:	8804d1ba 	srli	r2,r17,6
    8c68:	12000e44 	addi	r8,r2,57
    8c6c:	11c00e04 	addi	r7,r2,56
    8c70:	4209883a 	add	r4,r8,r8
    8c74:	04c00074 	movhi	r19,1
    8c78:	2109883a 	add	r4,r4,r4
    8c7c:	9cf30a04 	addi	r19,r19,-13272
    8c80:	2109883a 	add	r4,r4,r4
    8c84:	9909883a 	add	r4,r19,r4
    8c88:	24000117 	ldw	r16,4(r4)
    8c8c:	213ffe04 	addi	r4,r4,-8
    8c90:	24009726 	beq	r4,r16,8ef0 <_malloc_r+0x2f4>
    8c94:	80800117 	ldw	r2,4(r16)
    8c98:	01bfff04 	movi	r6,-4
    8c9c:	014003c4 	movi	r5,15
    8ca0:	1184703a 	and	r2,r2,r6
    8ca4:	1447c83a 	sub	r3,r2,r17
    8ca8:	28c00716 	blt	r5,r3,8cc8 <_malloc_r+0xcc>
    8cac:	1800920e 	bge	r3,zero,8ef8 <_malloc_r+0x2fc>
    8cb0:	84000317 	ldw	r16,12(r16)
    8cb4:	24008e26 	beq	r4,r16,8ef0 <_malloc_r+0x2f4>
    8cb8:	80800117 	ldw	r2,4(r16)
    8cbc:	1184703a 	and	r2,r2,r6
    8cc0:	1447c83a 	sub	r3,r2,r17
    8cc4:	28fff90e 	bge	r5,r3,8cac <_malloc_r+0xb0>
    8cc8:	3809883a 	mov	r4,r7
    8ccc:	01800074 	movhi	r6,1
    8cd0:	9c000417 	ldw	r16,16(r19)
    8cd4:	31b30a04 	addi	r6,r6,-13272
    8cd8:	32000204 	addi	r8,r6,8
    8cdc:	82013426 	beq	r16,r8,91b0 <_malloc_r+0x5b4>
    8ce0:	80c00117 	ldw	r3,4(r16)
    8ce4:	00bfff04 	movi	r2,-4
    8ce8:	188e703a 	and	r7,r3,r2
    8cec:	3c45c83a 	sub	r2,r7,r17
    8cf0:	00c003c4 	movi	r3,15
    8cf4:	18811f16 	blt	r3,r2,9174 <_malloc_r+0x578>
    8cf8:	32000515 	stw	r8,20(r6)
    8cfc:	32000415 	stw	r8,16(r6)
    8d00:	10007f0e 	bge	r2,zero,8f00 <_malloc_r+0x304>
    8d04:	00807fc4 	movi	r2,511
    8d08:	11c0fd36 	bltu	r2,r7,9100 <_malloc_r+0x504>
    8d0c:	3806d0fa 	srli	r3,r7,3
    8d10:	01c00044 	movi	r7,1
    8d14:	30800117 	ldw	r2,4(r6)
    8d18:	19400044 	addi	r5,r3,1
    8d1c:	294b883a 	add	r5,r5,r5
    8d20:	1807d0ba 	srai	r3,r3,2
    8d24:	294b883a 	add	r5,r5,r5
    8d28:	294b883a 	add	r5,r5,r5
    8d2c:	298b883a 	add	r5,r5,r6
    8d30:	38c6983a 	sll	r3,r7,r3
    8d34:	29c00017 	ldw	r7,0(r5)
    8d38:	2a7ffe04 	addi	r9,r5,-8
    8d3c:	1886b03a 	or	r3,r3,r2
    8d40:	82400315 	stw	r9,12(r16)
    8d44:	81c00215 	stw	r7,8(r16)
    8d48:	30c00115 	stw	r3,4(r6)
    8d4c:	2c000015 	stw	r16,0(r5)
    8d50:	3c000315 	stw	r16,12(r7)
    8d54:	2005d0ba 	srai	r2,r4,2
    8d58:	01400044 	movi	r5,1
    8d5c:	288a983a 	sll	r5,r5,r2
    8d60:	19406f36 	bltu	r3,r5,8f20 <_malloc_r+0x324>
    8d64:	28c4703a 	and	r2,r5,r3
    8d68:	10000a1e 	bne	r2,zero,8d94 <_malloc_r+0x198>
    8d6c:	00bfff04 	movi	r2,-4
    8d70:	294b883a 	add	r5,r5,r5
    8d74:	2088703a 	and	r4,r4,r2
    8d78:	28c4703a 	and	r2,r5,r3
    8d7c:	21000104 	addi	r4,r4,4
    8d80:	1000041e 	bne	r2,zero,8d94 <_malloc_r+0x198>
    8d84:	294b883a 	add	r5,r5,r5
    8d88:	28c4703a 	and	r2,r5,r3
    8d8c:	21000104 	addi	r4,r4,4
    8d90:	103ffc26 	beq	r2,zero,8d84 <_malloc_r+0x188>
    8d94:	02bfff04 	movi	r10,-4
    8d98:	024003c4 	movi	r9,15
    8d9c:	21800044 	addi	r6,r4,1
    8da0:	318d883a 	add	r6,r6,r6
    8da4:	318d883a 	add	r6,r6,r6
    8da8:	318d883a 	add	r6,r6,r6
    8dac:	998d883a 	add	r6,r19,r6
    8db0:	333ffe04 	addi	r12,r6,-8
    8db4:	2017883a 	mov	r11,r4
    8db8:	31800104 	addi	r6,r6,4
    8dbc:	34000017 	ldw	r16,0(r6)
    8dc0:	31fffd04 	addi	r7,r6,-12
    8dc4:	81c0041e 	bne	r16,r7,8dd8 <_malloc_r+0x1dc>
    8dc8:	0000fb06 	br	91b8 <_malloc_r+0x5bc>
    8dcc:	1801030e 	bge	r3,zero,91dc <_malloc_r+0x5e0>
    8dd0:	84000317 	ldw	r16,12(r16)
    8dd4:	81c0f826 	beq	r16,r7,91b8 <_malloc_r+0x5bc>
    8dd8:	80800117 	ldw	r2,4(r16)
    8ddc:	1284703a 	and	r2,r2,r10
    8de0:	1447c83a 	sub	r3,r2,r17
    8de4:	48fff90e 	bge	r9,r3,8dcc <_malloc_r+0x1d0>
    8de8:	80800317 	ldw	r2,12(r16)
    8dec:	81000217 	ldw	r4,8(r16)
    8df0:	89400054 	ori	r5,r17,1
    8df4:	81400115 	stw	r5,4(r16)
    8df8:	20800315 	stw	r2,12(r4)
    8dfc:	11000215 	stw	r4,8(r2)
    8e00:	8463883a 	add	r17,r16,r17
    8e04:	9c400515 	stw	r17,20(r19)
    8e08:	9c400415 	stw	r17,16(r19)
    8e0c:	18800054 	ori	r2,r3,1
    8e10:	88800115 	stw	r2,4(r17)
    8e14:	8a000315 	stw	r8,12(r17)
    8e18:	8a000215 	stw	r8,8(r17)
    8e1c:	88e3883a 	add	r17,r17,r3
    8e20:	88c00015 	stw	r3,0(r17)
    8e24:	9009883a 	mov	r4,r18
    8e28:	000b4ac0 	call	b4ac <__malloc_unlock>
    8e2c:	80800204 	addi	r2,r16,8
    8e30:	00001b06 	br	8ea0 <_malloc_r+0x2a4>
    8e34:	04400404 	movi	r17,16
    8e38:	89402536 	bltu	r17,r5,8ed0 <_malloc_r+0x2d4>
    8e3c:	000b4880 	call	b488 <__malloc_lock>
    8e40:	00800184 	movi	r2,6
    8e44:	01000084 	movi	r4,2
    8e48:	04c00074 	movhi	r19,1
    8e4c:	1085883a 	add	r2,r2,r2
    8e50:	9cf30a04 	addi	r19,r19,-13272
    8e54:	1085883a 	add	r2,r2,r2
    8e58:	9885883a 	add	r2,r19,r2
    8e5c:	14000117 	ldw	r16,4(r2)
    8e60:	10fffe04 	addi	r3,r2,-8
    8e64:	80c0d926 	beq	r16,r3,91cc <_malloc_r+0x5d0>
    8e68:	80c00117 	ldw	r3,4(r16)
    8e6c:	81000317 	ldw	r4,12(r16)
    8e70:	00bfff04 	movi	r2,-4
    8e74:	1884703a 	and	r2,r3,r2
    8e78:	81400217 	ldw	r5,8(r16)
    8e7c:	8085883a 	add	r2,r16,r2
    8e80:	10c00117 	ldw	r3,4(r2)
    8e84:	29000315 	stw	r4,12(r5)
    8e88:	21400215 	stw	r5,8(r4)
    8e8c:	18c00054 	ori	r3,r3,1
    8e90:	10c00115 	stw	r3,4(r2)
    8e94:	9009883a 	mov	r4,r18
    8e98:	000b4ac0 	call	b4ac <__malloc_unlock>
    8e9c:	80800204 	addi	r2,r16,8
    8ea0:	dfc00a17 	ldw	ra,40(sp)
    8ea4:	df000917 	ldw	fp,36(sp)
    8ea8:	ddc00817 	ldw	r23,32(sp)
    8eac:	dd800717 	ldw	r22,28(sp)
    8eb0:	dd400617 	ldw	r21,24(sp)
    8eb4:	dd000517 	ldw	r20,20(sp)
    8eb8:	dcc00417 	ldw	r19,16(sp)
    8ebc:	dc800317 	ldw	r18,12(sp)
    8ec0:	dc400217 	ldw	r17,8(sp)
    8ec4:	dc000117 	ldw	r16,4(sp)
    8ec8:	dec00b04 	addi	sp,sp,44
    8ecc:	f800283a 	ret
    8ed0:	00800304 	movi	r2,12
    8ed4:	90800015 	stw	r2,0(r18)
    8ed8:	0005883a 	mov	r2,zero
    8edc:	003ff006 	br	8ea0 <_malloc_r+0x2a4>
    8ee0:	01002004 	movi	r4,128
    8ee4:	02001004 	movi	r8,64
    8ee8:	01c00fc4 	movi	r7,63
    8eec:	003f6106 	br	8c74 <_malloc_r+0x78>
    8ef0:	4009883a 	mov	r4,r8
    8ef4:	003f7506 	br	8ccc <_malloc_r+0xd0>
    8ef8:	81000317 	ldw	r4,12(r16)
    8efc:	003fde06 	br	8e78 <_malloc_r+0x27c>
    8f00:	81c5883a 	add	r2,r16,r7
    8f04:	11400117 	ldw	r5,4(r2)
    8f08:	9009883a 	mov	r4,r18
    8f0c:	29400054 	ori	r5,r5,1
    8f10:	11400115 	stw	r5,4(r2)
    8f14:	000b4ac0 	call	b4ac <__malloc_unlock>
    8f18:	80800204 	addi	r2,r16,8
    8f1c:	003fe006 	br	8ea0 <_malloc_r+0x2a4>
    8f20:	9c000217 	ldw	r16,8(r19)
    8f24:	00bfff04 	movi	r2,-4
    8f28:	85800117 	ldw	r22,4(r16)
    8f2c:	b0ac703a 	and	r22,r22,r2
    8f30:	b4400336 	bltu	r22,r17,8f40 <_malloc_r+0x344>
    8f34:	b445c83a 	sub	r2,r22,r17
    8f38:	00c003c4 	movi	r3,15
    8f3c:	18805d16 	blt	r3,r2,90b4 <_malloc_r+0x4b8>
    8f40:	05c00074 	movhi	r23,1
    8f44:	00800074 	movhi	r2,1
    8f48:	10b71904 	addi	r2,r2,-9116
    8f4c:	bdf48304 	addi	r23,r23,-11764
    8f50:	15400017 	ldw	r21,0(r2)
    8f54:	b8c00017 	ldw	r3,0(r23)
    8f58:	00bfffc4 	movi	r2,-1
    8f5c:	858d883a 	add	r6,r16,r22
    8f60:	8d6b883a 	add	r21,r17,r21
    8f64:	1880ea26 	beq	r3,r2,9310 <_malloc_r+0x714>
    8f68:	ad4403c4 	addi	r21,r21,4111
    8f6c:	00bc0004 	movi	r2,-4096
    8f70:	a8aa703a 	and	r21,r21,r2
    8f74:	a80b883a 	mov	r5,r21
    8f78:	9009883a 	mov	r4,r18
    8f7c:	d9800015 	stw	r6,0(sp)
    8f80:	0009e1c0 	call	9e1c <_sbrk_r>
    8f84:	1029883a 	mov	r20,r2
    8f88:	00bfffc4 	movi	r2,-1
    8f8c:	d9800017 	ldw	r6,0(sp)
    8f90:	a080e826 	beq	r20,r2,9334 <_malloc_r+0x738>
    8f94:	a180a636 	bltu	r20,r6,9230 <_malloc_r+0x634>
    8f98:	07000074 	movhi	fp,1
    8f9c:	e7371e04 	addi	fp,fp,-9096
    8fa0:	e0800017 	ldw	r2,0(fp)
    8fa4:	a887883a 	add	r3,r21,r2
    8fa8:	e0c00015 	stw	r3,0(fp)
    8fac:	3500e626 	beq	r6,r20,9348 <_malloc_r+0x74c>
    8fb0:	b9000017 	ldw	r4,0(r23)
    8fb4:	00bfffc4 	movi	r2,-1
    8fb8:	2080ee26 	beq	r4,r2,9374 <_malloc_r+0x778>
    8fbc:	a185c83a 	sub	r2,r20,r6
    8fc0:	10c5883a 	add	r2,r2,r3
    8fc4:	e0800015 	stw	r2,0(fp)
    8fc8:	a0c001cc 	andi	r3,r20,7
    8fcc:	1800bc26 	beq	r3,zero,92c0 <_malloc_r+0x6c4>
    8fd0:	a0e9c83a 	sub	r20,r20,r3
    8fd4:	00840204 	movi	r2,4104
    8fd8:	a5000204 	addi	r20,r20,8
    8fdc:	10c7c83a 	sub	r3,r2,r3
    8fe0:	a545883a 	add	r2,r20,r21
    8fe4:	1083ffcc 	andi	r2,r2,4095
    8fe8:	18abc83a 	sub	r21,r3,r2
    8fec:	a80b883a 	mov	r5,r21
    8ff0:	9009883a 	mov	r4,r18
    8ff4:	0009e1c0 	call	9e1c <_sbrk_r>
    8ff8:	00ffffc4 	movi	r3,-1
    8ffc:	10c0e126 	beq	r2,r3,9384 <_malloc_r+0x788>
    9000:	1505c83a 	sub	r2,r2,r20
    9004:	1545883a 	add	r2,r2,r21
    9008:	10800054 	ori	r2,r2,1
    900c:	e0c00017 	ldw	r3,0(fp)
    9010:	9d000215 	stw	r20,8(r19)
    9014:	a0800115 	stw	r2,4(r20)
    9018:	a8c7883a 	add	r3,r21,r3
    901c:	e0c00015 	stw	r3,0(fp)
    9020:	84c00e26 	beq	r16,r19,905c <_malloc_r+0x460>
    9024:	018003c4 	movi	r6,15
    9028:	3580a72e 	bgeu	r6,r22,92c8 <_malloc_r+0x6cc>
    902c:	81400117 	ldw	r5,4(r16)
    9030:	013ffe04 	movi	r4,-8
    9034:	b0bffd04 	addi	r2,r22,-12
    9038:	1104703a 	and	r2,r2,r4
    903c:	2900004c 	andi	r4,r5,1
    9040:	2088b03a 	or	r4,r4,r2
    9044:	81000115 	stw	r4,4(r16)
    9048:	01400144 	movi	r5,5
    904c:	8089883a 	add	r4,r16,r2
    9050:	21400115 	stw	r5,4(r4)
    9054:	21400215 	stw	r5,8(r4)
    9058:	3080cd36 	bltu	r6,r2,9390 <_malloc_r+0x794>
    905c:	00800074 	movhi	r2,1
    9060:	10b71804 	addi	r2,r2,-9120
    9064:	11000017 	ldw	r4,0(r2)
    9068:	20c0012e 	bgeu	r4,r3,9070 <_malloc_r+0x474>
    906c:	10c00015 	stw	r3,0(r2)
    9070:	00800074 	movhi	r2,1
    9074:	10b71704 	addi	r2,r2,-9124
    9078:	11000017 	ldw	r4,0(r2)
    907c:	9c000217 	ldw	r16,8(r19)
    9080:	20c0012e 	bgeu	r4,r3,9088 <_malloc_r+0x48c>
    9084:	10c00015 	stw	r3,0(r2)
    9088:	80c00117 	ldw	r3,4(r16)
    908c:	00bfff04 	movi	r2,-4
    9090:	1886703a 	and	r3,r3,r2
    9094:	1c45c83a 	sub	r2,r3,r17
    9098:	1c400236 	bltu	r3,r17,90a4 <_malloc_r+0x4a8>
    909c:	00c003c4 	movi	r3,15
    90a0:	18800416 	blt	r3,r2,90b4 <_malloc_r+0x4b8>
    90a4:	9009883a 	mov	r4,r18
    90a8:	000b4ac0 	call	b4ac <__malloc_unlock>
    90ac:	0005883a 	mov	r2,zero
    90b0:	003f7b06 	br	8ea0 <_malloc_r+0x2a4>
    90b4:	88c00054 	ori	r3,r17,1
    90b8:	80c00115 	stw	r3,4(r16)
    90bc:	8463883a 	add	r17,r16,r17
    90c0:	10800054 	ori	r2,r2,1
    90c4:	9c400215 	stw	r17,8(r19)
    90c8:	88800115 	stw	r2,4(r17)
    90cc:	9009883a 	mov	r4,r18
    90d0:	000b4ac0 	call	b4ac <__malloc_unlock>
    90d4:	80800204 	addi	r2,r16,8
    90d8:	003f7106 	br	8ea0 <_malloc_r+0x2a4>
    90dc:	00c00504 	movi	r3,20
    90e0:	18804a2e 	bgeu	r3,r2,920c <_malloc_r+0x610>
    90e4:	00c01504 	movi	r3,84
    90e8:	18806e36 	bltu	r3,r2,92a4 <_malloc_r+0x6a8>
    90ec:	8804d33a 	srli	r2,r17,12
    90f0:	12001bc4 	addi	r8,r2,111
    90f4:	11c01b84 	addi	r7,r2,110
    90f8:	4209883a 	add	r4,r8,r8
    90fc:	003edd06 	br	8c74 <_malloc_r+0x78>
    9100:	3804d27a 	srli	r2,r7,9
    9104:	00c00104 	movi	r3,4
    9108:	1880442e 	bgeu	r3,r2,921c <_malloc_r+0x620>
    910c:	00c00504 	movi	r3,20
    9110:	18808136 	bltu	r3,r2,9318 <_malloc_r+0x71c>
    9114:	11401704 	addi	r5,r2,92
    9118:	10c016c4 	addi	r3,r2,91
    911c:	294b883a 	add	r5,r5,r5
    9120:	294b883a 	add	r5,r5,r5
    9124:	294b883a 	add	r5,r5,r5
    9128:	994b883a 	add	r5,r19,r5
    912c:	28800017 	ldw	r2,0(r5)
    9130:	01800074 	movhi	r6,1
    9134:	297ffe04 	addi	r5,r5,-8
    9138:	31b30a04 	addi	r6,r6,-13272
    913c:	28806526 	beq	r5,r2,92d4 <_malloc_r+0x6d8>
    9140:	01bfff04 	movi	r6,-4
    9144:	10c00117 	ldw	r3,4(r2)
    9148:	1986703a 	and	r3,r3,r6
    914c:	38c0022e 	bgeu	r7,r3,9158 <_malloc_r+0x55c>
    9150:	10800217 	ldw	r2,8(r2)
    9154:	28bffb1e 	bne	r5,r2,9144 <_malloc_r+0x548>
    9158:	11400317 	ldw	r5,12(r2)
    915c:	98c00117 	ldw	r3,4(r19)
    9160:	81400315 	stw	r5,12(r16)
    9164:	80800215 	stw	r2,8(r16)
    9168:	2c000215 	stw	r16,8(r5)
    916c:	14000315 	stw	r16,12(r2)
    9170:	003ef806 	br	8d54 <_malloc_r+0x158>
    9174:	88c00054 	ori	r3,r17,1
    9178:	80c00115 	stw	r3,4(r16)
    917c:	8463883a 	add	r17,r16,r17
    9180:	34400515 	stw	r17,20(r6)
    9184:	34400415 	stw	r17,16(r6)
    9188:	10c00054 	ori	r3,r2,1
    918c:	8a000315 	stw	r8,12(r17)
    9190:	8a000215 	stw	r8,8(r17)
    9194:	88c00115 	stw	r3,4(r17)
    9198:	88a3883a 	add	r17,r17,r2
    919c:	88800015 	stw	r2,0(r17)
    91a0:	9009883a 	mov	r4,r18
    91a4:	000b4ac0 	call	b4ac <__malloc_unlock>
    91a8:	80800204 	addi	r2,r16,8
    91ac:	003f3c06 	br	8ea0 <_malloc_r+0x2a4>
    91b0:	30c00117 	ldw	r3,4(r6)
    91b4:	003ee706 	br	8d54 <_malloc_r+0x158>
    91b8:	5ac00044 	addi	r11,r11,1
    91bc:	588000cc 	andi	r2,r11,3
    91c0:	31800204 	addi	r6,r6,8
    91c4:	103efd1e 	bne	r2,zero,8dbc <_malloc_r+0x1c0>
    91c8:	00002406 	br	925c <_malloc_r+0x660>
    91cc:	14000317 	ldw	r16,12(r2)
    91d0:	143f251e 	bne	r2,r16,8e68 <_malloc_r+0x26c>
    91d4:	21000084 	addi	r4,r4,2
    91d8:	003ebc06 	br	8ccc <_malloc_r+0xd0>
    91dc:	8085883a 	add	r2,r16,r2
    91e0:	10c00117 	ldw	r3,4(r2)
    91e4:	81000317 	ldw	r4,12(r16)
    91e8:	81400217 	ldw	r5,8(r16)
    91ec:	18c00054 	ori	r3,r3,1
    91f0:	10c00115 	stw	r3,4(r2)
    91f4:	29000315 	stw	r4,12(r5)
    91f8:	21400215 	stw	r5,8(r4)
    91fc:	9009883a 	mov	r4,r18
    9200:	000b4ac0 	call	b4ac <__malloc_unlock>
    9204:	80800204 	addi	r2,r16,8
    9208:	003f2506 	br	8ea0 <_malloc_r+0x2a4>
    920c:	12001704 	addi	r8,r2,92
    9210:	11c016c4 	addi	r7,r2,91
    9214:	4209883a 	add	r4,r8,r8
    9218:	003e9606 	br	8c74 <_malloc_r+0x78>
    921c:	3804d1ba 	srli	r2,r7,6
    9220:	11400e44 	addi	r5,r2,57
    9224:	10c00e04 	addi	r3,r2,56
    9228:	294b883a 	add	r5,r5,r5
    922c:	003fbc06 	br	9120 <_malloc_r+0x524>
    9230:	84ff5926 	beq	r16,r19,8f98 <_malloc_r+0x39c>
    9234:	00800074 	movhi	r2,1
    9238:	10b30a04 	addi	r2,r2,-13272
    923c:	14000217 	ldw	r16,8(r2)
    9240:	00bfff04 	movi	r2,-4
    9244:	80c00117 	ldw	r3,4(r16)
    9248:	1886703a 	and	r3,r3,r2
    924c:	003f9106 	br	9094 <_malloc_r+0x498>
    9250:	60800217 	ldw	r2,8(r12)
    9254:	213fffc4 	addi	r4,r4,-1
    9258:	1300651e 	bne	r2,r12,93f0 <_malloc_r+0x7f4>
    925c:	208000cc 	andi	r2,r4,3
    9260:	633ffe04 	addi	r12,r12,-8
    9264:	103ffa1e 	bne	r2,zero,9250 <_malloc_r+0x654>
    9268:	98800117 	ldw	r2,4(r19)
    926c:	0146303a 	nor	r3,zero,r5
    9270:	1884703a 	and	r2,r3,r2
    9274:	98800115 	stw	r2,4(r19)
    9278:	294b883a 	add	r5,r5,r5
    927c:	117f2836 	bltu	r2,r5,8f20 <_malloc_r+0x324>
    9280:	283f2726 	beq	r5,zero,8f20 <_malloc_r+0x324>
    9284:	2886703a 	and	r3,r5,r2
    9288:	5809883a 	mov	r4,r11
    928c:	183ec31e 	bne	r3,zero,8d9c <_malloc_r+0x1a0>
    9290:	294b883a 	add	r5,r5,r5
    9294:	2886703a 	and	r3,r5,r2
    9298:	21000104 	addi	r4,r4,4
    929c:	183ffc26 	beq	r3,zero,9290 <_malloc_r+0x694>
    92a0:	003ebe06 	br	8d9c <_malloc_r+0x1a0>
    92a4:	00c05504 	movi	r3,340
    92a8:	18801236 	bltu	r3,r2,92f4 <_malloc_r+0x6f8>
    92ac:	8804d3fa 	srli	r2,r17,15
    92b0:	12001e04 	addi	r8,r2,120
    92b4:	11c01dc4 	addi	r7,r2,119
    92b8:	4209883a 	add	r4,r8,r8
    92bc:	003e6d06 	br	8c74 <_malloc_r+0x78>
    92c0:	00c40004 	movi	r3,4096
    92c4:	003f4606 	br	8fe0 <_malloc_r+0x3e4>
    92c8:	00800044 	movi	r2,1
    92cc:	a0800115 	stw	r2,4(r20)
    92d0:	003f7406 	br	90a4 <_malloc_r+0x4a8>
    92d4:	1805d0ba 	srai	r2,r3,2
    92d8:	01c00044 	movi	r7,1
    92dc:	30c00117 	ldw	r3,4(r6)
    92e0:	388e983a 	sll	r7,r7,r2
    92e4:	2805883a 	mov	r2,r5
    92e8:	38c6b03a 	or	r3,r7,r3
    92ec:	30c00115 	stw	r3,4(r6)
    92f0:	003f9b06 	br	9160 <_malloc_r+0x564>
    92f4:	00c15504 	movi	r3,1364
    92f8:	18801a36 	bltu	r3,r2,9364 <_malloc_r+0x768>
    92fc:	8804d4ba 	srli	r2,r17,18
    9300:	12001f44 	addi	r8,r2,125
    9304:	11c01f04 	addi	r7,r2,124
    9308:	4209883a 	add	r4,r8,r8
    930c:	003e5906 	br	8c74 <_malloc_r+0x78>
    9310:	ad400404 	addi	r21,r21,16
    9314:	003f1706 	br	8f74 <_malloc_r+0x378>
    9318:	00c01504 	movi	r3,84
    931c:	18802336 	bltu	r3,r2,93ac <_malloc_r+0x7b0>
    9320:	3804d33a 	srli	r2,r7,12
    9324:	11401bc4 	addi	r5,r2,111
    9328:	10c01b84 	addi	r3,r2,110
    932c:	294b883a 	add	r5,r5,r5
    9330:	003f7b06 	br	9120 <_malloc_r+0x524>
    9334:	9c000217 	ldw	r16,8(r19)
    9338:	00bfff04 	movi	r2,-4
    933c:	80c00117 	ldw	r3,4(r16)
    9340:	1886703a 	and	r3,r3,r2
    9344:	003f5306 	br	9094 <_malloc_r+0x498>
    9348:	3083ffcc 	andi	r2,r6,4095
    934c:	103f181e 	bne	r2,zero,8fb0 <_malloc_r+0x3b4>
    9350:	99000217 	ldw	r4,8(r19)
    9354:	b545883a 	add	r2,r22,r21
    9358:	10800054 	ori	r2,r2,1
    935c:	20800115 	stw	r2,4(r4)
    9360:	003f3e06 	br	905c <_malloc_r+0x460>
    9364:	01003f84 	movi	r4,254
    9368:	02001fc4 	movi	r8,127
    936c:	01c01f84 	movi	r7,126
    9370:	003e4006 	br	8c74 <_malloc_r+0x78>
    9374:	00800074 	movhi	r2,1
    9378:	10b48304 	addi	r2,r2,-11764
    937c:	15000015 	stw	r20,0(r2)
    9380:	003f1106 	br	8fc8 <_malloc_r+0x3cc>
    9384:	00800044 	movi	r2,1
    9388:	002b883a 	mov	r21,zero
    938c:	003f1f06 	br	900c <_malloc_r+0x410>
    9390:	81400204 	addi	r5,r16,8
    9394:	9009883a 	mov	r4,r18
    9398:	000a6840 	call	a684 <_free_r>
    939c:	00800074 	movhi	r2,1
    93a0:	10b71e04 	addi	r2,r2,-9096
    93a4:	10c00017 	ldw	r3,0(r2)
    93a8:	003f2c06 	br	905c <_malloc_r+0x460>
    93ac:	00c05504 	movi	r3,340
    93b0:	18800536 	bltu	r3,r2,93c8 <_malloc_r+0x7cc>
    93b4:	3804d3fa 	srli	r2,r7,15
    93b8:	11401e04 	addi	r5,r2,120
    93bc:	10c01dc4 	addi	r3,r2,119
    93c0:	294b883a 	add	r5,r5,r5
    93c4:	003f5606 	br	9120 <_malloc_r+0x524>
    93c8:	00c15504 	movi	r3,1364
    93cc:	18800536 	bltu	r3,r2,93e4 <_malloc_r+0x7e8>
    93d0:	3804d4ba 	srli	r2,r7,18
    93d4:	11401f44 	addi	r5,r2,125
    93d8:	10c01f04 	addi	r3,r2,124
    93dc:	294b883a 	add	r5,r5,r5
    93e0:	003f4f06 	br	9120 <_malloc_r+0x524>
    93e4:	01403f84 	movi	r5,254
    93e8:	00c01f84 	movi	r3,126
    93ec:	003f4c06 	br	9120 <_malloc_r+0x524>
    93f0:	98800117 	ldw	r2,4(r19)
    93f4:	003fa006 	br	9278 <_malloc_r+0x67c>
    93f8:	8808d0fa 	srli	r4,r17,3
    93fc:	20800044 	addi	r2,r4,1
    9400:	1085883a 	add	r2,r2,r2
    9404:	003e9006 	br	8e48 <_malloc_r+0x24c>

00009408 <memchr>:
    9408:	208000cc 	andi	r2,r4,3
    940c:	280f883a 	mov	r7,r5
    9410:	10003426 	beq	r2,zero,94e4 <memchr+0xdc>
    9414:	30bfffc4 	addi	r2,r6,-1
    9418:	30001a26 	beq	r6,zero,9484 <memchr+0x7c>
    941c:	20c00003 	ldbu	r3,0(r4)
    9420:	29803fcc 	andi	r6,r5,255
    9424:	30c0051e 	bne	r6,r3,943c <memchr+0x34>
    9428:	00001806 	br	948c <memchr+0x84>
    942c:	10001526 	beq	r2,zero,9484 <memchr+0x7c>
    9430:	20c00003 	ldbu	r3,0(r4)
    9434:	10bfffc4 	addi	r2,r2,-1
    9438:	30c01426 	beq	r6,r3,948c <memchr+0x84>
    943c:	21000044 	addi	r4,r4,1
    9440:	20c000cc 	andi	r3,r4,3
    9444:	183ff91e 	bne	r3,zero,942c <memchr+0x24>
    9448:	020000c4 	movi	r8,3
    944c:	40801136 	bltu	r8,r2,9494 <memchr+0x8c>
    9450:	10000c26 	beq	r2,zero,9484 <memchr+0x7c>
    9454:	20c00003 	ldbu	r3,0(r4)
    9458:	29403fcc 	andi	r5,r5,255
    945c:	28c00b26 	beq	r5,r3,948c <memchr+0x84>
    9460:	20c00044 	addi	r3,r4,1
    9464:	39803fcc 	andi	r6,r7,255
    9468:	2089883a 	add	r4,r4,r2
    946c:	00000306 	br	947c <memchr+0x74>
    9470:	18c00044 	addi	r3,r3,1
    9474:	197fffc3 	ldbu	r5,-1(r3)
    9478:	31400526 	beq	r6,r5,9490 <memchr+0x88>
    947c:	1805883a 	mov	r2,r3
    9480:	20fffb1e 	bne	r4,r3,9470 <memchr+0x68>
    9484:	0005883a 	mov	r2,zero
    9488:	f800283a 	ret
    948c:	2005883a 	mov	r2,r4
    9490:	f800283a 	ret
    9494:	28c03fcc 	andi	r3,r5,255
    9498:	1812923a 	slli	r9,r3,8
    949c:	02ffbff4 	movhi	r11,65279
    94a0:	02a02074 	movhi	r10,32897
    94a4:	48d2b03a 	or	r9,r9,r3
    94a8:	4806943a 	slli	r3,r9,16
    94ac:	5affbfc4 	addi	r11,r11,-257
    94b0:	52a02004 	addi	r10,r10,-32640
    94b4:	48d2b03a 	or	r9,r9,r3
    94b8:	20c00017 	ldw	r3,0(r4)
    94bc:	48c6f03a 	xor	r3,r9,r3
    94c0:	1acd883a 	add	r6,r3,r11
    94c4:	00c6303a 	nor	r3,zero,r3
    94c8:	30c6703a 	and	r3,r6,r3
    94cc:	1a86703a 	and	r3,r3,r10
    94d0:	183fe01e 	bne	r3,zero,9454 <memchr+0x4c>
    94d4:	10bfff04 	addi	r2,r2,-4
    94d8:	21000104 	addi	r4,r4,4
    94dc:	40bff636 	bltu	r8,r2,94b8 <memchr+0xb0>
    94e0:	003fdb06 	br	9450 <memchr+0x48>
    94e4:	3005883a 	mov	r2,r6
    94e8:	003fd706 	br	9448 <memchr+0x40>

000094ec <memcpy>:
    94ec:	defffd04 	addi	sp,sp,-12
    94f0:	dfc00215 	stw	ra,8(sp)
    94f4:	dc400115 	stw	r17,4(sp)
    94f8:	dc000015 	stw	r16,0(sp)
    94fc:	00c003c4 	movi	r3,15
    9500:	2005883a 	mov	r2,r4
    9504:	1980452e 	bgeu	r3,r6,961c <memcpy+0x130>
    9508:	2906b03a 	or	r3,r5,r4
    950c:	18c000cc 	andi	r3,r3,3
    9510:	1800441e 	bne	r3,zero,9624 <memcpy+0x138>
    9514:	347ffc04 	addi	r17,r6,-16
    9518:	8822d13a 	srli	r17,r17,4
    951c:	28c00104 	addi	r3,r5,4
    9520:	23400104 	addi	r13,r4,4
    9524:	8820913a 	slli	r16,r17,4
    9528:	2b000204 	addi	r12,r5,8
    952c:	22c00204 	addi	r11,r4,8
    9530:	84000504 	addi	r16,r16,20
    9534:	2a800304 	addi	r10,r5,12
    9538:	22400304 	addi	r9,r4,12
    953c:	2c21883a 	add	r16,r5,r16
    9540:	2811883a 	mov	r8,r5
    9544:	200f883a 	mov	r7,r4
    9548:	41000017 	ldw	r4,0(r8)
    954c:	1fc00017 	ldw	ra,0(r3)
    9550:	63c00017 	ldw	r15,0(r12)
    9554:	39000015 	stw	r4,0(r7)
    9558:	53800017 	ldw	r14,0(r10)
    955c:	6fc00015 	stw	ra,0(r13)
    9560:	5bc00015 	stw	r15,0(r11)
    9564:	4b800015 	stw	r14,0(r9)
    9568:	18c00404 	addi	r3,r3,16
    956c:	39c00404 	addi	r7,r7,16
    9570:	42000404 	addi	r8,r8,16
    9574:	6b400404 	addi	r13,r13,16
    9578:	63000404 	addi	r12,r12,16
    957c:	5ac00404 	addi	r11,r11,16
    9580:	52800404 	addi	r10,r10,16
    9584:	4a400404 	addi	r9,r9,16
    9588:	1c3fef1e 	bne	r3,r16,9548 <memcpy+0x5c>
    958c:	89c00044 	addi	r7,r17,1
    9590:	380e913a 	slli	r7,r7,4
    9594:	310003cc 	andi	r4,r6,15
    9598:	02c000c4 	movi	r11,3
    959c:	11c7883a 	add	r3,r2,r7
    95a0:	29cb883a 	add	r5,r5,r7
    95a4:	5900212e 	bgeu	r11,r4,962c <memcpy+0x140>
    95a8:	1813883a 	mov	r9,r3
    95ac:	2811883a 	mov	r8,r5
    95b0:	200f883a 	mov	r7,r4
    95b4:	42800017 	ldw	r10,0(r8)
    95b8:	4a400104 	addi	r9,r9,4
    95bc:	39ffff04 	addi	r7,r7,-4
    95c0:	4abfff15 	stw	r10,-4(r9)
    95c4:	42000104 	addi	r8,r8,4
    95c8:	59fffa36 	bltu	r11,r7,95b4 <memcpy+0xc8>
    95cc:	213fff04 	addi	r4,r4,-4
    95d0:	2008d0ba 	srli	r4,r4,2
    95d4:	318000cc 	andi	r6,r6,3
    95d8:	21000044 	addi	r4,r4,1
    95dc:	2109883a 	add	r4,r4,r4
    95e0:	2109883a 	add	r4,r4,r4
    95e4:	1907883a 	add	r3,r3,r4
    95e8:	290b883a 	add	r5,r5,r4
    95ec:	30000626 	beq	r6,zero,9608 <memcpy+0x11c>
    95f0:	198d883a 	add	r6,r3,r6
    95f4:	29c00003 	ldbu	r7,0(r5)
    95f8:	18c00044 	addi	r3,r3,1
    95fc:	29400044 	addi	r5,r5,1
    9600:	19ffffc5 	stb	r7,-1(r3)
    9604:	19bffb1e 	bne	r3,r6,95f4 <memcpy+0x108>
    9608:	dfc00217 	ldw	ra,8(sp)
    960c:	dc400117 	ldw	r17,4(sp)
    9610:	dc000017 	ldw	r16,0(sp)
    9614:	dec00304 	addi	sp,sp,12
    9618:	f800283a 	ret
    961c:	2007883a 	mov	r3,r4
    9620:	003ff206 	br	95ec <memcpy+0x100>
    9624:	2007883a 	mov	r3,r4
    9628:	003ff106 	br	95f0 <memcpy+0x104>
    962c:	200d883a 	mov	r6,r4
    9630:	003fee06 	br	95ec <memcpy+0x100>

00009634 <memmove>:
    9634:	2005883a 	mov	r2,r4
    9638:	29000b2e 	bgeu	r5,r4,9668 <memmove+0x34>
    963c:	298f883a 	add	r7,r5,r6
    9640:	21c0092e 	bgeu	r4,r7,9668 <memmove+0x34>
    9644:	2187883a 	add	r3,r4,r6
    9648:	198bc83a 	sub	r5,r3,r6
    964c:	30004826 	beq	r6,zero,9770 <memmove+0x13c>
    9650:	39ffffc4 	addi	r7,r7,-1
    9654:	39000003 	ldbu	r4,0(r7)
    9658:	18ffffc4 	addi	r3,r3,-1
    965c:	19000005 	stb	r4,0(r3)
    9660:	28fffb1e 	bne	r5,r3,9650 <memmove+0x1c>
    9664:	f800283a 	ret
    9668:	00c003c4 	movi	r3,15
    966c:	1980412e 	bgeu	r3,r6,9774 <memmove+0x140>
    9670:	2886b03a 	or	r3,r5,r2
    9674:	18c000cc 	andi	r3,r3,3
    9678:	1800401e 	bne	r3,zero,977c <memmove+0x148>
    967c:	33fffc04 	addi	r15,r6,-16
    9680:	781ed13a 	srli	r15,r15,4
    9684:	28c00104 	addi	r3,r5,4
    9688:	13400104 	addi	r13,r2,4
    968c:	781c913a 	slli	r14,r15,4
    9690:	2b000204 	addi	r12,r5,8
    9694:	12c00204 	addi	r11,r2,8
    9698:	73800504 	addi	r14,r14,20
    969c:	2a800304 	addi	r10,r5,12
    96a0:	12400304 	addi	r9,r2,12
    96a4:	2b9d883a 	add	r14,r5,r14
    96a8:	2811883a 	mov	r8,r5
    96ac:	100f883a 	mov	r7,r2
    96b0:	41000017 	ldw	r4,0(r8)
    96b4:	39c00404 	addi	r7,r7,16
    96b8:	18c00404 	addi	r3,r3,16
    96bc:	393ffc15 	stw	r4,-16(r7)
    96c0:	193ffc17 	ldw	r4,-16(r3)
    96c4:	6b400404 	addi	r13,r13,16
    96c8:	5ac00404 	addi	r11,r11,16
    96cc:	693ffc15 	stw	r4,-16(r13)
    96d0:	61000017 	ldw	r4,0(r12)
    96d4:	4a400404 	addi	r9,r9,16
    96d8:	42000404 	addi	r8,r8,16
    96dc:	593ffc15 	stw	r4,-16(r11)
    96e0:	51000017 	ldw	r4,0(r10)
    96e4:	63000404 	addi	r12,r12,16
    96e8:	52800404 	addi	r10,r10,16
    96ec:	493ffc15 	stw	r4,-16(r9)
    96f0:	1bbfef1e 	bne	r3,r14,96b0 <memmove+0x7c>
    96f4:	79000044 	addi	r4,r15,1
    96f8:	2008913a 	slli	r4,r4,4
    96fc:	328003cc 	andi	r10,r6,15
    9700:	02c000c4 	movi	r11,3
    9704:	1107883a 	add	r3,r2,r4
    9708:	290b883a 	add	r5,r5,r4
    970c:	5a801e2e 	bgeu	r11,r10,9788 <memmove+0x154>
    9710:	1813883a 	mov	r9,r3
    9714:	2811883a 	mov	r8,r5
    9718:	500f883a 	mov	r7,r10
    971c:	41000017 	ldw	r4,0(r8)
    9720:	4a400104 	addi	r9,r9,4
    9724:	39ffff04 	addi	r7,r7,-4
    9728:	493fff15 	stw	r4,-4(r9)
    972c:	42000104 	addi	r8,r8,4
    9730:	59fffa36 	bltu	r11,r7,971c <memmove+0xe8>
    9734:	513fff04 	addi	r4,r10,-4
    9738:	2008d0ba 	srli	r4,r4,2
    973c:	318000cc 	andi	r6,r6,3
    9740:	21000044 	addi	r4,r4,1
    9744:	2109883a 	add	r4,r4,r4
    9748:	2109883a 	add	r4,r4,r4
    974c:	1907883a 	add	r3,r3,r4
    9750:	290b883a 	add	r5,r5,r4
    9754:	30000b26 	beq	r6,zero,9784 <memmove+0x150>
    9758:	198d883a 	add	r6,r3,r6
    975c:	29c00003 	ldbu	r7,0(r5)
    9760:	18c00044 	addi	r3,r3,1
    9764:	29400044 	addi	r5,r5,1
    9768:	19ffffc5 	stb	r7,-1(r3)
    976c:	19bffb1e 	bne	r3,r6,975c <memmove+0x128>
    9770:	f800283a 	ret
    9774:	1007883a 	mov	r3,r2
    9778:	003ff606 	br	9754 <memmove+0x120>
    977c:	1007883a 	mov	r3,r2
    9780:	003ff506 	br	9758 <memmove+0x124>
    9784:	f800283a 	ret
    9788:	500d883a 	mov	r6,r10
    978c:	003ff106 	br	9754 <memmove+0x120>

00009790 <memset>:
    9790:	20c000cc 	andi	r3,r4,3
    9794:	2005883a 	mov	r2,r4
    9798:	18004426 	beq	r3,zero,98ac <memset+0x11c>
    979c:	31ffffc4 	addi	r7,r6,-1
    97a0:	30004026 	beq	r6,zero,98a4 <memset+0x114>
    97a4:	2813883a 	mov	r9,r5
    97a8:	200d883a 	mov	r6,r4
    97ac:	2007883a 	mov	r3,r4
    97b0:	00000406 	br	97c4 <memset+0x34>
    97b4:	3a3fffc4 	addi	r8,r7,-1
    97b8:	31800044 	addi	r6,r6,1
    97bc:	38003926 	beq	r7,zero,98a4 <memset+0x114>
    97c0:	400f883a 	mov	r7,r8
    97c4:	18c00044 	addi	r3,r3,1
    97c8:	32400005 	stb	r9,0(r6)
    97cc:	1a0000cc 	andi	r8,r3,3
    97d0:	403ff81e 	bne	r8,zero,97b4 <memset+0x24>
    97d4:	010000c4 	movi	r4,3
    97d8:	21c02d2e 	bgeu	r4,r7,9890 <memset+0x100>
    97dc:	29003fcc 	andi	r4,r5,255
    97e0:	200c923a 	slli	r6,r4,8
    97e4:	3108b03a 	or	r4,r6,r4
    97e8:	200c943a 	slli	r6,r4,16
    97ec:	218cb03a 	or	r6,r4,r6
    97f0:	010003c4 	movi	r4,15
    97f4:	21c0182e 	bgeu	r4,r7,9858 <memset+0xc8>
    97f8:	3b3ffc04 	addi	r12,r7,-16
    97fc:	6018d13a 	srli	r12,r12,4
    9800:	1a000104 	addi	r8,r3,4
    9804:	1ac00204 	addi	r11,r3,8
    9808:	6008913a 	slli	r4,r12,4
    980c:	1a800304 	addi	r10,r3,12
    9810:	1813883a 	mov	r9,r3
    9814:	21000504 	addi	r4,r4,20
    9818:	1909883a 	add	r4,r3,r4
    981c:	49800015 	stw	r6,0(r9)
    9820:	41800015 	stw	r6,0(r8)
    9824:	59800015 	stw	r6,0(r11)
    9828:	51800015 	stw	r6,0(r10)
    982c:	42000404 	addi	r8,r8,16
    9830:	4a400404 	addi	r9,r9,16
    9834:	5ac00404 	addi	r11,r11,16
    9838:	52800404 	addi	r10,r10,16
    983c:	413ff71e 	bne	r8,r4,981c <memset+0x8c>
    9840:	63000044 	addi	r12,r12,1
    9844:	6018913a 	slli	r12,r12,4
    9848:	39c003cc 	andi	r7,r7,15
    984c:	010000c4 	movi	r4,3
    9850:	1b07883a 	add	r3,r3,r12
    9854:	21c00e2e 	bgeu	r4,r7,9890 <memset+0x100>
    9858:	1813883a 	mov	r9,r3
    985c:	3811883a 	mov	r8,r7
    9860:	010000c4 	movi	r4,3
    9864:	49800015 	stw	r6,0(r9)
    9868:	423fff04 	addi	r8,r8,-4
    986c:	4a400104 	addi	r9,r9,4
    9870:	223ffc36 	bltu	r4,r8,9864 <memset+0xd4>
    9874:	393fff04 	addi	r4,r7,-4
    9878:	2008d0ba 	srli	r4,r4,2
    987c:	39c000cc 	andi	r7,r7,3
    9880:	21000044 	addi	r4,r4,1
    9884:	2109883a 	add	r4,r4,r4
    9888:	2109883a 	add	r4,r4,r4
    988c:	1907883a 	add	r3,r3,r4
    9890:	38000526 	beq	r7,zero,98a8 <memset+0x118>
    9894:	19cf883a 	add	r7,r3,r7
    9898:	19400005 	stb	r5,0(r3)
    989c:	18c00044 	addi	r3,r3,1
    98a0:	38fffd1e 	bne	r7,r3,9898 <memset+0x108>
    98a4:	f800283a 	ret
    98a8:	f800283a 	ret
    98ac:	2007883a 	mov	r3,r4
    98b0:	300f883a 	mov	r7,r6
    98b4:	003fc706 	br	97d4 <memset+0x44>

000098b8 <_realloc_r>:
    98b8:	defff604 	addi	sp,sp,-40
    98bc:	dc400115 	stw	r17,4(sp)
    98c0:	dfc00915 	stw	ra,36(sp)
    98c4:	df000815 	stw	fp,32(sp)
    98c8:	ddc00715 	stw	r23,28(sp)
    98cc:	dd800615 	stw	r22,24(sp)
    98d0:	dd400515 	stw	r21,20(sp)
    98d4:	dd000415 	stw	r20,16(sp)
    98d8:	dcc00315 	stw	r19,12(sp)
    98dc:	dc800215 	stw	r18,8(sp)
    98e0:	dc000015 	stw	r16,0(sp)
    98e4:	3023883a 	mov	r17,r6
    98e8:	2800b626 	beq	r5,zero,9bc4 <_realloc_r+0x30c>
    98ec:	2829883a 	mov	r20,r5
    98f0:	2025883a 	mov	r18,r4
    98f4:	000b4880 	call	b488 <__malloc_lock>
    98f8:	a0ffff17 	ldw	r3,-4(r20)
    98fc:	043fff04 	movi	r16,-4
    9900:	888002c4 	addi	r2,r17,11
    9904:	01000584 	movi	r4,22
    9908:	a57ffe04 	addi	r21,r20,-8
    990c:	1c20703a 	and	r16,r3,r16
    9910:	2080332e 	bgeu	r4,r2,99e0 <_realloc_r+0x128>
    9914:	05bffe04 	movi	r22,-8
    9918:	15ac703a 	and	r22,r2,r22
    991c:	b005883a 	mov	r2,r22
    9920:	b0005716 	blt	r22,zero,9a80 <_realloc_r+0x1c8>
    9924:	b4405636 	bltu	r22,r17,9a80 <_realloc_r+0x1c8>
    9928:	8080300e 	bge	r16,r2,99ec <_realloc_r+0x134>
    992c:	07000074 	movhi	fp,1
    9930:	e7330a04 	addi	fp,fp,-13272
    9934:	e2000217 	ldw	r8,8(fp)
    9938:	ac09883a 	add	r4,r21,r16
    993c:	22006126 	beq	r4,r8,9ac4 <_realloc_r+0x20c>
    9940:	22400117 	ldw	r9,4(r4)
    9944:	01ffff84 	movi	r7,-2
    9948:	49ce703a 	and	r7,r9,r7
    994c:	21cf883a 	add	r7,r4,r7
    9950:	39800117 	ldw	r6,4(r7)
    9954:	3180004c 	andi	r6,r6,1
    9958:	30003e26 	beq	r6,zero,9a54 <_realloc_r+0x19c>
    995c:	18c0004c 	andi	r3,r3,1
    9960:	18008126 	beq	r3,zero,9b68 <_realloc_r+0x2b0>
    9964:	880b883a 	mov	r5,r17
    9968:	9009883a 	mov	r4,r18
    996c:	0008bfc0 	call	8bfc <_malloc_r>
    9970:	1023883a 	mov	r17,r2
    9974:	10011e26 	beq	r2,zero,9df0 <_realloc_r+0x538>
    9978:	a0ffff17 	ldw	r3,-4(r20)
    997c:	113ffe04 	addi	r4,r2,-8
    9980:	00bfff84 	movi	r2,-2
    9984:	1884703a 	and	r2,r3,r2
    9988:	a885883a 	add	r2,r21,r2
    998c:	2080ee26 	beq	r4,r2,9d48 <_realloc_r+0x490>
    9990:	81bfff04 	addi	r6,r16,-4
    9994:	00800904 	movi	r2,36
    9998:	1180b836 	bltu	r2,r6,9c7c <_realloc_r+0x3c4>
    999c:	00c004c4 	movi	r3,19
    99a0:	19809536 	bltu	r3,r6,9bf8 <_realloc_r+0x340>
    99a4:	8805883a 	mov	r2,r17
    99a8:	a007883a 	mov	r3,r20
    99ac:	19000017 	ldw	r4,0(r3)
    99b0:	11000015 	stw	r4,0(r2)
    99b4:	19000117 	ldw	r4,4(r3)
    99b8:	11000115 	stw	r4,4(r2)
    99bc:	18c00217 	ldw	r3,8(r3)
    99c0:	10c00215 	stw	r3,8(r2)
    99c4:	a00b883a 	mov	r5,r20
    99c8:	9009883a 	mov	r4,r18
    99cc:	000a6840 	call	a684 <_free_r>
    99d0:	9009883a 	mov	r4,r18
    99d4:	000b4ac0 	call	b4ac <__malloc_unlock>
    99d8:	8805883a 	mov	r2,r17
    99dc:	00001106 	br	9a24 <_realloc_r+0x16c>
    99e0:	00800404 	movi	r2,16
    99e4:	102d883a 	mov	r22,r2
    99e8:	003fce06 	br	9924 <_realloc_r+0x6c>
    99ec:	a023883a 	mov	r17,r20
    99f0:	858fc83a 	sub	r7,r16,r22
    99f4:	008003c4 	movi	r2,15
    99f8:	18c0004c 	andi	r3,r3,1
    99fc:	11c02436 	bltu	r2,r7,9a90 <_realloc_r+0x1d8>
    9a00:	1c06b03a 	or	r3,r3,r16
    9a04:	a8c00115 	stw	r3,4(r21)
    9a08:	ac21883a 	add	r16,r21,r16
    9a0c:	80800117 	ldw	r2,4(r16)
    9a10:	10800054 	ori	r2,r2,1
    9a14:	80800115 	stw	r2,4(r16)
    9a18:	9009883a 	mov	r4,r18
    9a1c:	000b4ac0 	call	b4ac <__malloc_unlock>
    9a20:	8805883a 	mov	r2,r17
    9a24:	dfc00917 	ldw	ra,36(sp)
    9a28:	df000817 	ldw	fp,32(sp)
    9a2c:	ddc00717 	ldw	r23,28(sp)
    9a30:	dd800617 	ldw	r22,24(sp)
    9a34:	dd400517 	ldw	r21,20(sp)
    9a38:	dd000417 	ldw	r20,16(sp)
    9a3c:	dcc00317 	ldw	r19,12(sp)
    9a40:	dc800217 	ldw	r18,8(sp)
    9a44:	dc400117 	ldw	r17,4(sp)
    9a48:	dc000017 	ldw	r16,0(sp)
    9a4c:	dec00a04 	addi	sp,sp,40
    9a50:	f800283a 	ret
    9a54:	017fff04 	movi	r5,-4
    9a58:	494a703a 	and	r5,r9,r5
    9a5c:	814d883a 	add	r6,r16,r5
    9a60:	30801e16 	blt	r6,r2,9adc <_realloc_r+0x224>
    9a64:	20800317 	ldw	r2,12(r4)
    9a68:	21000217 	ldw	r4,8(r4)
    9a6c:	a023883a 	mov	r17,r20
    9a70:	3021883a 	mov	r16,r6
    9a74:	20800315 	stw	r2,12(r4)
    9a78:	11000215 	stw	r4,8(r2)
    9a7c:	003fdc06 	br	99f0 <_realloc_r+0x138>
    9a80:	00800304 	movi	r2,12
    9a84:	90800015 	stw	r2,0(r18)
    9a88:	0005883a 	mov	r2,zero
    9a8c:	003fe506 	br	9a24 <_realloc_r+0x16c>
    9a90:	1d86b03a 	or	r3,r3,r22
    9a94:	a8c00115 	stw	r3,4(r21)
    9a98:	ad8b883a 	add	r5,r21,r22
    9a9c:	38c00054 	ori	r3,r7,1
    9aa0:	28c00115 	stw	r3,4(r5)
    9aa4:	29cf883a 	add	r7,r5,r7
    9aa8:	38c00117 	ldw	r3,4(r7)
    9aac:	29400204 	addi	r5,r5,8
    9ab0:	9009883a 	mov	r4,r18
    9ab4:	18800054 	ori	r2,r3,1
    9ab8:	38800115 	stw	r2,4(r7)
    9abc:	000a6840 	call	a684 <_free_r>
    9ac0:	003fd506 	br	9a18 <_realloc_r+0x160>
    9ac4:	21c00117 	ldw	r7,4(r4)
    9ac8:	017fff04 	movi	r5,-4
    9acc:	b1800404 	addi	r6,r22,16
    9ad0:	394a703a 	and	r5,r7,r5
    9ad4:	814f883a 	add	r7,r16,r5
    9ad8:	39805b0e 	bge	r7,r6,9c48 <_realloc_r+0x390>
    9adc:	18c0004c 	andi	r3,r3,1
    9ae0:	183fa01e 	bne	r3,zero,9964 <_realloc_r+0xac>
    9ae4:	a4fffe17 	ldw	r19,-8(r20)
    9ae8:	00ffff04 	movi	r3,-4
    9aec:	ace7c83a 	sub	r19,r21,r19
    9af0:	99800117 	ldw	r6,4(r19)
    9af4:	30c6703a 	and	r3,r6,r3
    9af8:	20002026 	beq	r4,zero,9b7c <_realloc_r+0x2c4>
    9afc:	80ef883a 	add	r23,r16,r3
    9b00:	b96f883a 	add	r23,r23,r5
    9b04:	22006126 	beq	r4,r8,9c8c <_realloc_r+0x3d4>
    9b08:	b8801c16 	blt	r23,r2,9b7c <_realloc_r+0x2c4>
    9b0c:	20800317 	ldw	r2,12(r4)
    9b10:	20c00217 	ldw	r3,8(r4)
    9b14:	81bfff04 	addi	r6,r16,-4
    9b18:	01000904 	movi	r4,36
    9b1c:	18800315 	stw	r2,12(r3)
    9b20:	10c00215 	stw	r3,8(r2)
    9b24:	98c00217 	ldw	r3,8(r19)
    9b28:	98800317 	ldw	r2,12(r19)
    9b2c:	9c400204 	addi	r17,r19,8
    9b30:	18800315 	stw	r2,12(r3)
    9b34:	10c00215 	stw	r3,8(r2)
    9b38:	21801b36 	bltu	r4,r6,9ba8 <_realloc_r+0x2f0>
    9b3c:	008004c4 	movi	r2,19
    9b40:	1180362e 	bgeu	r2,r6,9c1c <_realloc_r+0x364>
    9b44:	a0800017 	ldw	r2,0(r20)
    9b48:	98800215 	stw	r2,8(r19)
    9b4c:	a0800117 	ldw	r2,4(r20)
    9b50:	98800315 	stw	r2,12(r19)
    9b54:	008006c4 	movi	r2,27
    9b58:	11808136 	bltu	r2,r6,9d60 <_realloc_r+0x4a8>
    9b5c:	98800404 	addi	r2,r19,16
    9b60:	a5000204 	addi	r20,r20,8
    9b64:	00002e06 	br	9c20 <_realloc_r+0x368>
    9b68:	a4fffe17 	ldw	r19,-8(r20)
    9b6c:	00ffff04 	movi	r3,-4
    9b70:	ace7c83a 	sub	r19,r21,r19
    9b74:	99000117 	ldw	r4,4(r19)
    9b78:	20c6703a 	and	r3,r4,r3
    9b7c:	983f7926 	beq	r19,zero,9964 <_realloc_r+0xac>
    9b80:	80ef883a 	add	r23,r16,r3
    9b84:	b8bf7716 	blt	r23,r2,9964 <_realloc_r+0xac>
    9b88:	98800317 	ldw	r2,12(r19)
    9b8c:	98c00217 	ldw	r3,8(r19)
    9b90:	81bfff04 	addi	r6,r16,-4
    9b94:	01000904 	movi	r4,36
    9b98:	18800315 	stw	r2,12(r3)
    9b9c:	10c00215 	stw	r3,8(r2)
    9ba0:	9c400204 	addi	r17,r19,8
    9ba4:	21bfe52e 	bgeu	r4,r6,9b3c <_realloc_r+0x284>
    9ba8:	a00b883a 	mov	r5,r20
    9bac:	8809883a 	mov	r4,r17
    9bb0:	00096340 	call	9634 <memmove>
    9bb4:	98c00117 	ldw	r3,4(r19)
    9bb8:	b821883a 	mov	r16,r23
    9bbc:	982b883a 	mov	r21,r19
    9bc0:	003f8b06 	br	99f0 <_realloc_r+0x138>
    9bc4:	300b883a 	mov	r5,r6
    9bc8:	dfc00917 	ldw	ra,36(sp)
    9bcc:	df000817 	ldw	fp,32(sp)
    9bd0:	ddc00717 	ldw	r23,28(sp)
    9bd4:	dd800617 	ldw	r22,24(sp)
    9bd8:	dd400517 	ldw	r21,20(sp)
    9bdc:	dd000417 	ldw	r20,16(sp)
    9be0:	dcc00317 	ldw	r19,12(sp)
    9be4:	dc800217 	ldw	r18,8(sp)
    9be8:	dc400117 	ldw	r17,4(sp)
    9bec:	dc000017 	ldw	r16,0(sp)
    9bf0:	dec00a04 	addi	sp,sp,40
    9bf4:	0008bfc1 	jmpi	8bfc <_malloc_r>
    9bf8:	a0c00017 	ldw	r3,0(r20)
    9bfc:	88c00015 	stw	r3,0(r17)
    9c00:	a0c00117 	ldw	r3,4(r20)
    9c04:	88c00115 	stw	r3,4(r17)
    9c08:	00c006c4 	movi	r3,27
    9c0c:	19804636 	bltu	r3,r6,9d28 <_realloc_r+0x470>
    9c10:	88800204 	addi	r2,r17,8
    9c14:	a0c00204 	addi	r3,r20,8
    9c18:	003f6406 	br	99ac <_realloc_r+0xf4>
    9c1c:	8805883a 	mov	r2,r17
    9c20:	a0c00017 	ldw	r3,0(r20)
    9c24:	b821883a 	mov	r16,r23
    9c28:	982b883a 	mov	r21,r19
    9c2c:	10c00015 	stw	r3,0(r2)
    9c30:	a0c00117 	ldw	r3,4(r20)
    9c34:	10c00115 	stw	r3,4(r2)
    9c38:	a0c00217 	ldw	r3,8(r20)
    9c3c:	10c00215 	stw	r3,8(r2)
    9c40:	98c00117 	ldw	r3,4(r19)
    9c44:	003f6a06 	br	99f0 <_realloc_r+0x138>
    9c48:	adab883a 	add	r21,r21,r22
    9c4c:	3d85c83a 	sub	r2,r7,r22
    9c50:	e5400215 	stw	r21,8(fp)
    9c54:	10800054 	ori	r2,r2,1
    9c58:	a8800115 	stw	r2,4(r21)
    9c5c:	a0bfff17 	ldw	r2,-4(r20)
    9c60:	9009883a 	mov	r4,r18
    9c64:	1080004c 	andi	r2,r2,1
    9c68:	1584b03a 	or	r2,r2,r22
    9c6c:	a0bfff15 	stw	r2,-4(r20)
    9c70:	000b4ac0 	call	b4ac <__malloc_unlock>
    9c74:	a005883a 	mov	r2,r20
    9c78:	003f6a06 	br	9a24 <_realloc_r+0x16c>
    9c7c:	a00b883a 	mov	r5,r20
    9c80:	8809883a 	mov	r4,r17
    9c84:	00096340 	call	9634 <memmove>
    9c88:	003f4e06 	br	99c4 <_realloc_r+0x10c>
    9c8c:	b1000404 	addi	r4,r22,16
    9c90:	b93fba16 	blt	r23,r4,9b7c <_realloc_r+0x2c4>
    9c94:	98800317 	ldw	r2,12(r19)
    9c98:	98c00217 	ldw	r3,8(r19)
    9c9c:	81bfff04 	addi	r6,r16,-4
    9ca0:	01000904 	movi	r4,36
    9ca4:	18800315 	stw	r2,12(r3)
    9ca8:	10c00215 	stw	r3,8(r2)
    9cac:	9c400204 	addi	r17,r19,8
    9cb0:	21804336 	bltu	r4,r6,9dc0 <_realloc_r+0x508>
    9cb4:	008004c4 	movi	r2,19
    9cb8:	11803f2e 	bgeu	r2,r6,9db8 <_realloc_r+0x500>
    9cbc:	a0800017 	ldw	r2,0(r20)
    9cc0:	98800215 	stw	r2,8(r19)
    9cc4:	a0800117 	ldw	r2,4(r20)
    9cc8:	98800315 	stw	r2,12(r19)
    9ccc:	008006c4 	movi	r2,27
    9cd0:	11803f36 	bltu	r2,r6,9dd0 <_realloc_r+0x518>
    9cd4:	98800404 	addi	r2,r19,16
    9cd8:	a5000204 	addi	r20,r20,8
    9cdc:	a0c00017 	ldw	r3,0(r20)
    9ce0:	10c00015 	stw	r3,0(r2)
    9ce4:	a0c00117 	ldw	r3,4(r20)
    9ce8:	10c00115 	stw	r3,4(r2)
    9cec:	a0c00217 	ldw	r3,8(r20)
    9cf0:	10c00215 	stw	r3,8(r2)
    9cf4:	9d87883a 	add	r3,r19,r22
    9cf8:	bd85c83a 	sub	r2,r23,r22
    9cfc:	e0c00215 	stw	r3,8(fp)
    9d00:	10800054 	ori	r2,r2,1
    9d04:	18800115 	stw	r2,4(r3)
    9d08:	98800117 	ldw	r2,4(r19)
    9d0c:	9009883a 	mov	r4,r18
    9d10:	1080004c 	andi	r2,r2,1
    9d14:	1584b03a 	or	r2,r2,r22
    9d18:	98800115 	stw	r2,4(r19)
    9d1c:	000b4ac0 	call	b4ac <__malloc_unlock>
    9d20:	8805883a 	mov	r2,r17
    9d24:	003f3f06 	br	9a24 <_realloc_r+0x16c>
    9d28:	a0c00217 	ldw	r3,8(r20)
    9d2c:	88c00215 	stw	r3,8(r17)
    9d30:	a0c00317 	ldw	r3,12(r20)
    9d34:	88c00315 	stw	r3,12(r17)
    9d38:	30801126 	beq	r6,r2,9d80 <_realloc_r+0x4c8>
    9d3c:	88800404 	addi	r2,r17,16
    9d40:	a0c00404 	addi	r3,r20,16
    9d44:	003f1906 	br	99ac <_realloc_r+0xf4>
    9d48:	893fff17 	ldw	r4,-4(r17)
    9d4c:	00bfff04 	movi	r2,-4
    9d50:	a023883a 	mov	r17,r20
    9d54:	2084703a 	and	r2,r4,r2
    9d58:	80a1883a 	add	r16,r16,r2
    9d5c:	003f2406 	br	99f0 <_realloc_r+0x138>
    9d60:	a0800217 	ldw	r2,8(r20)
    9d64:	98800415 	stw	r2,16(r19)
    9d68:	a0800317 	ldw	r2,12(r20)
    9d6c:	98800515 	stw	r2,20(r19)
    9d70:	31000a26 	beq	r6,r4,9d9c <_realloc_r+0x4e4>
    9d74:	98800604 	addi	r2,r19,24
    9d78:	a5000404 	addi	r20,r20,16
    9d7c:	003fa806 	br	9c20 <_realloc_r+0x368>
    9d80:	a1000417 	ldw	r4,16(r20)
    9d84:	88800604 	addi	r2,r17,24
    9d88:	a0c00604 	addi	r3,r20,24
    9d8c:	89000415 	stw	r4,16(r17)
    9d90:	a1000517 	ldw	r4,20(r20)
    9d94:	89000515 	stw	r4,20(r17)
    9d98:	003f0406 	br	99ac <_realloc_r+0xf4>
    9d9c:	a0c00417 	ldw	r3,16(r20)
    9da0:	a5000604 	addi	r20,r20,24
    9da4:	98800804 	addi	r2,r19,32
    9da8:	98c00615 	stw	r3,24(r19)
    9dac:	a0ffff17 	ldw	r3,-4(r20)
    9db0:	98c00715 	stw	r3,28(r19)
    9db4:	003f9a06 	br	9c20 <_realloc_r+0x368>
    9db8:	8805883a 	mov	r2,r17
    9dbc:	003fc706 	br	9cdc <_realloc_r+0x424>
    9dc0:	a00b883a 	mov	r5,r20
    9dc4:	8809883a 	mov	r4,r17
    9dc8:	00096340 	call	9634 <memmove>
    9dcc:	003fc906 	br	9cf4 <_realloc_r+0x43c>
    9dd0:	a0800217 	ldw	r2,8(r20)
    9dd4:	98800415 	stw	r2,16(r19)
    9dd8:	a0800317 	ldw	r2,12(r20)
    9ddc:	98800515 	stw	r2,20(r19)
    9de0:	31000726 	beq	r6,r4,9e00 <_realloc_r+0x548>
    9de4:	98800604 	addi	r2,r19,24
    9de8:	a5000404 	addi	r20,r20,16
    9dec:	003fbb06 	br	9cdc <_realloc_r+0x424>
    9df0:	9009883a 	mov	r4,r18
    9df4:	000b4ac0 	call	b4ac <__malloc_unlock>
    9df8:	0005883a 	mov	r2,zero
    9dfc:	003f0906 	br	9a24 <_realloc_r+0x16c>
    9e00:	a0c00417 	ldw	r3,16(r20)
    9e04:	a5000604 	addi	r20,r20,24
    9e08:	98800804 	addi	r2,r19,32
    9e0c:	98c00615 	stw	r3,24(r19)
    9e10:	a0ffff17 	ldw	r3,-4(r20)
    9e14:	98c00715 	stw	r3,28(r19)
    9e18:	003fb006 	br	9cdc <_realloc_r+0x424>

00009e1c <_sbrk_r>:
    9e1c:	defffd04 	addi	sp,sp,-12
    9e20:	dc000015 	stw	r16,0(sp)
    9e24:	04000074 	movhi	r16,1
    9e28:	dc400115 	stw	r17,4(sp)
    9e2c:	84371a04 	addi	r16,r16,-9112
    9e30:	2023883a 	mov	r17,r4
    9e34:	2809883a 	mov	r4,r5
    9e38:	dfc00215 	stw	ra,8(sp)
    9e3c:	80000015 	stw	zero,0(r16)
    9e40:	000b6a80 	call	b6a8 <sbrk>
    9e44:	00ffffc4 	movi	r3,-1
    9e48:	10c00526 	beq	r2,r3,9e60 <_sbrk_r+0x44>
    9e4c:	dfc00217 	ldw	ra,8(sp)
    9e50:	dc400117 	ldw	r17,4(sp)
    9e54:	dc000017 	ldw	r16,0(sp)
    9e58:	dec00304 	addi	sp,sp,12
    9e5c:	f800283a 	ret
    9e60:	80c00017 	ldw	r3,0(r16)
    9e64:	183ff926 	beq	r3,zero,9e4c <_sbrk_r+0x30>
    9e68:	88c00015 	stw	r3,0(r17)
    9e6c:	003ff706 	br	9e4c <_sbrk_r+0x30>

00009e70 <__sread>:
    9e70:	defffe04 	addi	sp,sp,-8
    9e74:	dc000015 	stw	r16,0(sp)
    9e78:	2821883a 	mov	r16,r5
    9e7c:	2940038f 	ldh	r5,14(r5)
    9e80:	dfc00115 	stw	ra,4(sp)
    9e84:	000abb00 	call	abb0 <_read_r>
    9e88:	10000716 	blt	r2,zero,9ea8 <__sread+0x38>
    9e8c:	80c01417 	ldw	r3,80(r16)
    9e90:	1887883a 	add	r3,r3,r2
    9e94:	80c01415 	stw	r3,80(r16)
    9e98:	dfc00117 	ldw	ra,4(sp)
    9e9c:	dc000017 	ldw	r16,0(sp)
    9ea0:	dec00204 	addi	sp,sp,8
    9ea4:	f800283a 	ret
    9ea8:	80c0030b 	ldhu	r3,12(r16)
    9eac:	18fbffcc 	andi	r3,r3,61439
    9eb0:	80c0030d 	sth	r3,12(r16)
    9eb4:	dfc00117 	ldw	ra,4(sp)
    9eb8:	dc000017 	ldw	r16,0(sp)
    9ebc:	dec00204 	addi	sp,sp,8
    9ec0:	f800283a 	ret

00009ec4 <__seofread>:
    9ec4:	0005883a 	mov	r2,zero
    9ec8:	f800283a 	ret

00009ecc <__swrite>:
    9ecc:	2880030b 	ldhu	r2,12(r5)
    9ed0:	defffb04 	addi	sp,sp,-20
    9ed4:	dcc00315 	stw	r19,12(sp)
    9ed8:	dc800215 	stw	r18,8(sp)
    9edc:	dc400115 	stw	r17,4(sp)
    9ee0:	dc000015 	stw	r16,0(sp)
    9ee4:	dfc00415 	stw	ra,16(sp)
    9ee8:	10c0400c 	andi	r3,r2,256
    9eec:	2821883a 	mov	r16,r5
    9ef0:	2023883a 	mov	r17,r4
    9ef4:	3025883a 	mov	r18,r6
    9ef8:	3827883a 	mov	r19,r7
    9efc:	18000526 	beq	r3,zero,9f14 <__swrite+0x48>
    9f00:	2940038f 	ldh	r5,14(r5)
    9f04:	01c00084 	movi	r7,2
    9f08:	000d883a 	mov	r6,zero
    9f0c:	000a9940 	call	a994 <_lseek_r>
    9f10:	8080030b 	ldhu	r2,12(r16)
    9f14:	8140038f 	ldh	r5,14(r16)
    9f18:	10bbffcc 	andi	r2,r2,61439
    9f1c:	980f883a 	mov	r7,r19
    9f20:	900d883a 	mov	r6,r18
    9f24:	8809883a 	mov	r4,r17
    9f28:	8080030d 	sth	r2,12(r16)
    9f2c:	dfc00417 	ldw	ra,16(sp)
    9f30:	dcc00317 	ldw	r19,12(sp)
    9f34:	dc800217 	ldw	r18,8(sp)
    9f38:	dc400117 	ldw	r17,4(sp)
    9f3c:	dc000017 	ldw	r16,0(sp)
    9f40:	dec00504 	addi	sp,sp,20
    9f44:	0009fac1 	jmpi	9fac <_write_r>

00009f48 <__sseek>:
    9f48:	defffe04 	addi	sp,sp,-8
    9f4c:	dc000015 	stw	r16,0(sp)
    9f50:	2821883a 	mov	r16,r5
    9f54:	2940038f 	ldh	r5,14(r5)
    9f58:	dfc00115 	stw	ra,4(sp)
    9f5c:	000a9940 	call	a994 <_lseek_r>
    9f60:	00ffffc4 	movi	r3,-1
    9f64:	10c00826 	beq	r2,r3,9f88 <__sseek+0x40>
    9f68:	80c0030b 	ldhu	r3,12(r16)
    9f6c:	80801415 	stw	r2,80(r16)
    9f70:	18c40014 	ori	r3,r3,4096
    9f74:	80c0030d 	sth	r3,12(r16)
    9f78:	dfc00117 	ldw	ra,4(sp)
    9f7c:	dc000017 	ldw	r16,0(sp)
    9f80:	dec00204 	addi	sp,sp,8
    9f84:	f800283a 	ret
    9f88:	80c0030b 	ldhu	r3,12(r16)
    9f8c:	18fbffcc 	andi	r3,r3,61439
    9f90:	80c0030d 	sth	r3,12(r16)
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	dc000017 	ldw	r16,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <__sclose>:
    9fa4:	2940038f 	ldh	r5,14(r5)
    9fa8:	000a1601 	jmpi	a160 <_close_r>

00009fac <_write_r>:
    9fac:	defffd04 	addi	sp,sp,-12
    9fb0:	2805883a 	mov	r2,r5
    9fb4:	dc000015 	stw	r16,0(sp)
    9fb8:	04000074 	movhi	r16,1
    9fbc:	dc400115 	stw	r17,4(sp)
    9fc0:	300b883a 	mov	r5,r6
    9fc4:	84371a04 	addi	r16,r16,-9112
    9fc8:	2023883a 	mov	r17,r4
    9fcc:	380d883a 	mov	r6,r7
    9fd0:	1009883a 	mov	r4,r2
    9fd4:	dfc00215 	stw	ra,8(sp)
    9fd8:	80000015 	stw	zero,0(r16)
    9fdc:	000b7a80 	call	b7a8 <write>
    9fe0:	00ffffc4 	movi	r3,-1
    9fe4:	10c00526 	beq	r2,r3,9ffc <_write_r+0x50>
    9fe8:	dfc00217 	ldw	ra,8(sp)
    9fec:	dc400117 	ldw	r17,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00304 	addi	sp,sp,12
    9ff8:	f800283a 	ret
    9ffc:	80c00017 	ldw	r3,0(r16)
    a000:	183ff926 	beq	r3,zero,9fe8 <_write_r+0x3c>
    a004:	88c00015 	stw	r3,0(r17)
    a008:	003ff706 	br	9fe8 <_write_r+0x3c>

0000a00c <__swsetup_r>:
    a00c:	00800074 	movhi	r2,1
    a010:	defffd04 	addi	sp,sp,-12
    a014:	10b48204 	addi	r2,r2,-11768
    a018:	dc400115 	stw	r17,4(sp)
    a01c:	2023883a 	mov	r17,r4
    a020:	11000017 	ldw	r4,0(r2)
    a024:	dc000015 	stw	r16,0(sp)
    a028:	dfc00215 	stw	ra,8(sp)
    a02c:	2821883a 	mov	r16,r5
    a030:	20000226 	beq	r4,zero,a03c <__swsetup_r+0x30>
    a034:	20800e17 	ldw	r2,56(r4)
    a038:	10003126 	beq	r2,zero,a100 <__swsetup_r+0xf4>
    a03c:	8080030b 	ldhu	r2,12(r16)
    a040:	10c0020c 	andi	r3,r2,8
    a044:	1009883a 	mov	r4,r2
    a048:	18000f26 	beq	r3,zero,a088 <__swsetup_r+0x7c>
    a04c:	80c00417 	ldw	r3,16(r16)
    a050:	18001526 	beq	r3,zero,a0a8 <__swsetup_r+0x9c>
    a054:	1100004c 	andi	r4,r2,1
    a058:	20001c1e 	bne	r4,zero,a0cc <__swsetup_r+0xc0>
    a05c:	1080008c 	andi	r2,r2,2
    a060:	1000291e 	bne	r2,zero,a108 <__swsetup_r+0xfc>
    a064:	80800517 	ldw	r2,20(r16)
    a068:	80800215 	stw	r2,8(r16)
    a06c:	18001c26 	beq	r3,zero,a0e0 <__swsetup_r+0xd4>
    a070:	0005883a 	mov	r2,zero
    a074:	dfc00217 	ldw	ra,8(sp)
    a078:	dc400117 	ldw	r17,4(sp)
    a07c:	dc000017 	ldw	r16,0(sp)
    a080:	dec00304 	addi	sp,sp,12
    a084:	f800283a 	ret
    a088:	2080040c 	andi	r2,r4,16
    a08c:	10002e26 	beq	r2,zero,a148 <__swsetup_r+0x13c>
    a090:	2080010c 	andi	r2,r4,4
    a094:	10001e1e 	bne	r2,zero,a110 <__swsetup_r+0x104>
    a098:	80c00417 	ldw	r3,16(r16)
    a09c:	20800214 	ori	r2,r4,8
    a0a0:	8080030d 	sth	r2,12(r16)
    a0a4:	183feb1e 	bne	r3,zero,a054 <__swsetup_r+0x48>
    a0a8:	1100a00c 	andi	r4,r2,640
    a0ac:	01408004 	movi	r5,512
    a0b0:	217fe826 	beq	r4,r5,a054 <__swsetup_r+0x48>
    a0b4:	800b883a 	mov	r5,r16
    a0b8:	8809883a 	mov	r4,r17
    a0bc:	000a9f40 	call	a9f4 <__smakebuf_r>
    a0c0:	8080030b 	ldhu	r2,12(r16)
    a0c4:	80c00417 	ldw	r3,16(r16)
    a0c8:	003fe206 	br	a054 <__swsetup_r+0x48>
    a0cc:	80800517 	ldw	r2,20(r16)
    a0d0:	80000215 	stw	zero,8(r16)
    a0d4:	0085c83a 	sub	r2,zero,r2
    a0d8:	80800615 	stw	r2,24(r16)
    a0dc:	183fe41e 	bne	r3,zero,a070 <__swsetup_r+0x64>
    a0e0:	80c0030b 	ldhu	r3,12(r16)
    a0e4:	0005883a 	mov	r2,zero
    a0e8:	1900200c 	andi	r4,r3,128
    a0ec:	203fe126 	beq	r4,zero,a074 <__swsetup_r+0x68>
    a0f0:	18c01014 	ori	r3,r3,64
    a0f4:	80c0030d 	sth	r3,12(r16)
    a0f8:	00bfffc4 	movi	r2,-1
    a0fc:	003fdd06 	br	a074 <__swsetup_r+0x68>
    a100:	000855c0 	call	855c <__sinit>
    a104:	003fcd06 	br	a03c <__swsetup_r+0x30>
    a108:	0005883a 	mov	r2,zero
    a10c:	003fd606 	br	a068 <__swsetup_r+0x5c>
    a110:	81400c17 	ldw	r5,48(r16)
    a114:	28000626 	beq	r5,zero,a130 <__swsetup_r+0x124>
    a118:	80801004 	addi	r2,r16,64
    a11c:	28800326 	beq	r5,r2,a12c <__swsetup_r+0x120>
    a120:	8809883a 	mov	r4,r17
    a124:	000a6840 	call	a684 <_free_r>
    a128:	8100030b 	ldhu	r4,12(r16)
    a12c:	80000c15 	stw	zero,48(r16)
    a130:	80c00417 	ldw	r3,16(r16)
    a134:	00bff6c4 	movi	r2,-37
    a138:	1108703a 	and	r4,r2,r4
    a13c:	80000115 	stw	zero,4(r16)
    a140:	80c00015 	stw	r3,0(r16)
    a144:	003fd506 	br	a09c <__swsetup_r+0x90>
    a148:	00800244 	movi	r2,9
    a14c:	88800015 	stw	r2,0(r17)
    a150:	20801014 	ori	r2,r4,64
    a154:	8080030d 	sth	r2,12(r16)
    a158:	00bfffc4 	movi	r2,-1
    a15c:	003fc506 	br	a074 <__swsetup_r+0x68>

0000a160 <_close_r>:
    a160:	defffd04 	addi	sp,sp,-12
    a164:	dc000015 	stw	r16,0(sp)
    a168:	04000074 	movhi	r16,1
    a16c:	dc400115 	stw	r17,4(sp)
    a170:	84371a04 	addi	r16,r16,-9112
    a174:	2023883a 	mov	r17,r4
    a178:	2809883a 	mov	r4,r5
    a17c:	dfc00215 	stw	ra,8(sp)
    a180:	80000015 	stw	zero,0(r16)
    a184:	000aeec0 	call	aeec <close>
    a188:	00ffffc4 	movi	r3,-1
    a18c:	10c00526 	beq	r2,r3,a1a4 <_close_r+0x44>
    a190:	dfc00217 	ldw	ra,8(sp)
    a194:	dc400117 	ldw	r17,4(sp)
    a198:	dc000017 	ldw	r16,0(sp)
    a19c:	dec00304 	addi	sp,sp,12
    a1a0:	f800283a 	ret
    a1a4:	80c00017 	ldw	r3,0(r16)
    a1a8:	183ff926 	beq	r3,zero,a190 <_close_r+0x30>
    a1ac:	88c00015 	stw	r3,0(r17)
    a1b0:	003ff706 	br	a190 <_close_r+0x30>

0000a1b4 <_fclose_r>:
    a1b4:	28003926 	beq	r5,zero,a29c <_fclose_r+0xe8>
    a1b8:	defffc04 	addi	sp,sp,-16
    a1bc:	dc400115 	stw	r17,4(sp)
    a1c0:	dc000015 	stw	r16,0(sp)
    a1c4:	dfc00315 	stw	ra,12(sp)
    a1c8:	dc800215 	stw	r18,8(sp)
    a1cc:	2023883a 	mov	r17,r4
    a1d0:	2821883a 	mov	r16,r5
    a1d4:	20000226 	beq	r4,zero,a1e0 <_fclose_r+0x2c>
    a1d8:	20800e17 	ldw	r2,56(r4)
    a1dc:	10002726 	beq	r2,zero,a27c <_fclose_r+0xc8>
    a1e0:	8080030f 	ldh	r2,12(r16)
    a1e4:	1000071e 	bne	r2,zero,a204 <_fclose_r+0x50>
    a1e8:	0005883a 	mov	r2,zero
    a1ec:	dfc00317 	ldw	ra,12(sp)
    a1f0:	dc800217 	ldw	r18,8(sp)
    a1f4:	dc400117 	ldw	r17,4(sp)
    a1f8:	dc000017 	ldw	r16,0(sp)
    a1fc:	dec00404 	addi	sp,sp,16
    a200:	f800283a 	ret
    a204:	800b883a 	mov	r5,r16
    a208:	8809883a 	mov	r4,r17
    a20c:	000a2b80 	call	a2b8 <__sflush_r>
    a210:	1025883a 	mov	r18,r2
    a214:	80800b17 	ldw	r2,44(r16)
    a218:	10000426 	beq	r2,zero,a22c <_fclose_r+0x78>
    a21c:	81400717 	ldw	r5,28(r16)
    a220:	8809883a 	mov	r4,r17
    a224:	103ee83a 	callr	r2
    a228:	10001616 	blt	r2,zero,a284 <_fclose_r+0xd0>
    a22c:	8080030b 	ldhu	r2,12(r16)
    a230:	1080200c 	andi	r2,r2,128
    a234:	1000151e 	bne	r2,zero,a28c <_fclose_r+0xd8>
    a238:	81400c17 	ldw	r5,48(r16)
    a23c:	28000526 	beq	r5,zero,a254 <_fclose_r+0xa0>
    a240:	80801004 	addi	r2,r16,64
    a244:	28800226 	beq	r5,r2,a250 <_fclose_r+0x9c>
    a248:	8809883a 	mov	r4,r17
    a24c:	000a6840 	call	a684 <_free_r>
    a250:	80000c15 	stw	zero,48(r16)
    a254:	81401117 	ldw	r5,68(r16)
    a258:	28000326 	beq	r5,zero,a268 <_fclose_r+0xb4>
    a25c:	8809883a 	mov	r4,r17
    a260:	000a6840 	call	a684 <_free_r>
    a264:	80001115 	stw	zero,68(r16)
    a268:	000856c0 	call	856c <__sfp_lock_acquire>
    a26c:	8000030d 	sth	zero,12(r16)
    a270:	00085700 	call	8570 <__sfp_lock_release>
    a274:	9005883a 	mov	r2,r18
    a278:	003fdc06 	br	a1ec <_fclose_r+0x38>
    a27c:	000855c0 	call	855c <__sinit>
    a280:	003fd706 	br	a1e0 <_fclose_r+0x2c>
    a284:	04bfffc4 	movi	r18,-1
    a288:	003fe806 	br	a22c <_fclose_r+0x78>
    a28c:	81400417 	ldw	r5,16(r16)
    a290:	8809883a 	mov	r4,r17
    a294:	000a6840 	call	a684 <_free_r>
    a298:	003fe706 	br	a238 <_fclose_r+0x84>
    a29c:	0005883a 	mov	r2,zero
    a2a0:	f800283a 	ret

0000a2a4 <fclose>:
    a2a4:	00800074 	movhi	r2,1
    a2a8:	10b48204 	addi	r2,r2,-11768
    a2ac:	200b883a 	mov	r5,r4
    a2b0:	11000017 	ldw	r4,0(r2)
    a2b4:	000a1b41 	jmpi	a1b4 <_fclose_r>

0000a2b8 <__sflush_r>:
    a2b8:	2880030b 	ldhu	r2,12(r5)
    a2bc:	defffb04 	addi	sp,sp,-20
    a2c0:	dcc00315 	stw	r19,12(sp)
    a2c4:	dc400115 	stw	r17,4(sp)
    a2c8:	dfc00415 	stw	ra,16(sp)
    a2cc:	dc800215 	stw	r18,8(sp)
    a2d0:	dc000015 	stw	r16,0(sp)
    a2d4:	10c0020c 	andi	r3,r2,8
    a2d8:	2823883a 	mov	r17,r5
    a2dc:	2027883a 	mov	r19,r4
    a2e0:	1800311e 	bne	r3,zero,a3a8 <__sflush_r+0xf0>
    a2e4:	28c00117 	ldw	r3,4(r5)
    a2e8:	10820014 	ori	r2,r2,2048
    a2ec:	2880030d 	sth	r2,12(r5)
    a2f0:	00c04b0e 	bge	zero,r3,a420 <__sflush_r+0x168>
    a2f4:	8a000a17 	ldw	r8,40(r17)
    a2f8:	40002326 	beq	r8,zero,a388 <__sflush_r+0xd0>
    a2fc:	9c000017 	ldw	r16,0(r19)
    a300:	10c4000c 	andi	r3,r2,4096
    a304:	98000015 	stw	zero,0(r19)
    a308:	18004826 	beq	r3,zero,a42c <__sflush_r+0x174>
    a30c:	89801417 	ldw	r6,80(r17)
    a310:	10c0010c 	andi	r3,r2,4
    a314:	18000626 	beq	r3,zero,a330 <__sflush_r+0x78>
    a318:	88c00117 	ldw	r3,4(r17)
    a31c:	88800c17 	ldw	r2,48(r17)
    a320:	30cdc83a 	sub	r6,r6,r3
    a324:	10000226 	beq	r2,zero,a330 <__sflush_r+0x78>
    a328:	88800f17 	ldw	r2,60(r17)
    a32c:	308dc83a 	sub	r6,r6,r2
    a330:	89400717 	ldw	r5,28(r17)
    a334:	000f883a 	mov	r7,zero
    a338:	9809883a 	mov	r4,r19
    a33c:	403ee83a 	callr	r8
    a340:	00ffffc4 	movi	r3,-1
    a344:	10c04426 	beq	r2,r3,a458 <__sflush_r+0x1a0>
    a348:	88c0030b 	ldhu	r3,12(r17)
    a34c:	89000417 	ldw	r4,16(r17)
    a350:	88000115 	stw	zero,4(r17)
    a354:	197dffcc 	andi	r5,r3,63487
    a358:	8940030d 	sth	r5,12(r17)
    a35c:	89000015 	stw	r4,0(r17)
    a360:	18c4000c 	andi	r3,r3,4096
    a364:	18002c1e 	bne	r3,zero,a418 <__sflush_r+0x160>
    a368:	89400c17 	ldw	r5,48(r17)
    a36c:	9c000015 	stw	r16,0(r19)
    a370:	28000526 	beq	r5,zero,a388 <__sflush_r+0xd0>
    a374:	88801004 	addi	r2,r17,64
    a378:	28800226 	beq	r5,r2,a384 <__sflush_r+0xcc>
    a37c:	9809883a 	mov	r4,r19
    a380:	000a6840 	call	a684 <_free_r>
    a384:	88000c15 	stw	zero,48(r17)
    a388:	0005883a 	mov	r2,zero
    a38c:	dfc00417 	ldw	ra,16(sp)
    a390:	dcc00317 	ldw	r19,12(sp)
    a394:	dc800217 	ldw	r18,8(sp)
    a398:	dc400117 	ldw	r17,4(sp)
    a39c:	dc000017 	ldw	r16,0(sp)
    a3a0:	dec00504 	addi	sp,sp,20
    a3a4:	f800283a 	ret
    a3a8:	2c800417 	ldw	r18,16(r5)
    a3ac:	903ff626 	beq	r18,zero,a388 <__sflush_r+0xd0>
    a3b0:	2c000017 	ldw	r16,0(r5)
    a3b4:	108000cc 	andi	r2,r2,3
    a3b8:	2c800015 	stw	r18,0(r5)
    a3bc:	84a1c83a 	sub	r16,r16,r18
    a3c0:	1000131e 	bne	r2,zero,a410 <__sflush_r+0x158>
    a3c4:	28800517 	ldw	r2,20(r5)
    a3c8:	88800215 	stw	r2,8(r17)
    a3cc:	04000316 	blt	zero,r16,a3dc <__sflush_r+0x124>
    a3d0:	003fed06 	br	a388 <__sflush_r+0xd0>
    a3d4:	90a5883a 	add	r18,r18,r2
    a3d8:	043feb0e 	bge	zero,r16,a388 <__sflush_r+0xd0>
    a3dc:	88800917 	ldw	r2,36(r17)
    a3e0:	89400717 	ldw	r5,28(r17)
    a3e4:	800f883a 	mov	r7,r16
    a3e8:	900d883a 	mov	r6,r18
    a3ec:	9809883a 	mov	r4,r19
    a3f0:	103ee83a 	callr	r2
    a3f4:	80a1c83a 	sub	r16,r16,r2
    a3f8:	00bff616 	blt	zero,r2,a3d4 <__sflush_r+0x11c>
    a3fc:	88c0030b 	ldhu	r3,12(r17)
    a400:	00bfffc4 	movi	r2,-1
    a404:	18c01014 	ori	r3,r3,64
    a408:	88c0030d 	sth	r3,12(r17)
    a40c:	003fdf06 	br	a38c <__sflush_r+0xd4>
    a410:	0005883a 	mov	r2,zero
    a414:	003fec06 	br	a3c8 <__sflush_r+0x110>
    a418:	88801415 	stw	r2,80(r17)
    a41c:	003fd206 	br	a368 <__sflush_r+0xb0>
    a420:	28c00f17 	ldw	r3,60(r5)
    a424:	00ffb316 	blt	zero,r3,a2f4 <__sflush_r+0x3c>
    a428:	003fd706 	br	a388 <__sflush_r+0xd0>
    a42c:	89400717 	ldw	r5,28(r17)
    a430:	000d883a 	mov	r6,zero
    a434:	01c00044 	movi	r7,1
    a438:	9809883a 	mov	r4,r19
    a43c:	403ee83a 	callr	r8
    a440:	100d883a 	mov	r6,r2
    a444:	00bfffc4 	movi	r2,-1
    a448:	30801426 	beq	r6,r2,a49c <__sflush_r+0x1e4>
    a44c:	8880030b 	ldhu	r2,12(r17)
    a450:	8a000a17 	ldw	r8,40(r17)
    a454:	003fae06 	br	a310 <__sflush_r+0x58>
    a458:	98c00017 	ldw	r3,0(r19)
    a45c:	183fba26 	beq	r3,zero,a348 <__sflush_r+0x90>
    a460:	01000744 	movi	r4,29
    a464:	19000626 	beq	r3,r4,a480 <__sflush_r+0x1c8>
    a468:	01000584 	movi	r4,22
    a46c:	19000426 	beq	r3,r4,a480 <__sflush_r+0x1c8>
    a470:	88c0030b 	ldhu	r3,12(r17)
    a474:	18c01014 	ori	r3,r3,64
    a478:	88c0030d 	sth	r3,12(r17)
    a47c:	003fc306 	br	a38c <__sflush_r+0xd4>
    a480:	8880030b 	ldhu	r2,12(r17)
    a484:	88c00417 	ldw	r3,16(r17)
    a488:	88000115 	stw	zero,4(r17)
    a48c:	10bdffcc 	andi	r2,r2,63487
    a490:	8880030d 	sth	r2,12(r17)
    a494:	88c00015 	stw	r3,0(r17)
    a498:	003fb306 	br	a368 <__sflush_r+0xb0>
    a49c:	98800017 	ldw	r2,0(r19)
    a4a0:	103fea26 	beq	r2,zero,a44c <__sflush_r+0x194>
    a4a4:	00c00744 	movi	r3,29
    a4a8:	10c00226 	beq	r2,r3,a4b4 <__sflush_r+0x1fc>
    a4ac:	00c00584 	movi	r3,22
    a4b0:	10c0031e 	bne	r2,r3,a4c0 <__sflush_r+0x208>
    a4b4:	9c000015 	stw	r16,0(r19)
    a4b8:	0005883a 	mov	r2,zero
    a4bc:	003fb306 	br	a38c <__sflush_r+0xd4>
    a4c0:	88c0030b 	ldhu	r3,12(r17)
    a4c4:	3005883a 	mov	r2,r6
    a4c8:	18c01014 	ori	r3,r3,64
    a4cc:	88c0030d 	sth	r3,12(r17)
    a4d0:	003fae06 	br	a38c <__sflush_r+0xd4>

0000a4d4 <_fflush_r>:
    a4d4:	defffd04 	addi	sp,sp,-12
    a4d8:	dc000115 	stw	r16,4(sp)
    a4dc:	dfc00215 	stw	ra,8(sp)
    a4e0:	2021883a 	mov	r16,r4
    a4e4:	20000226 	beq	r4,zero,a4f0 <_fflush_r+0x1c>
    a4e8:	20800e17 	ldw	r2,56(r4)
    a4ec:	10000c26 	beq	r2,zero,a520 <_fflush_r+0x4c>
    a4f0:	2880030f 	ldh	r2,12(r5)
    a4f4:	1000051e 	bne	r2,zero,a50c <_fflush_r+0x38>
    a4f8:	0005883a 	mov	r2,zero
    a4fc:	dfc00217 	ldw	ra,8(sp)
    a500:	dc000117 	ldw	r16,4(sp)
    a504:	dec00304 	addi	sp,sp,12
    a508:	f800283a 	ret
    a50c:	8009883a 	mov	r4,r16
    a510:	dfc00217 	ldw	ra,8(sp)
    a514:	dc000117 	ldw	r16,4(sp)
    a518:	dec00304 	addi	sp,sp,12
    a51c:	000a2b81 	jmpi	a2b8 <__sflush_r>
    a520:	d9400015 	stw	r5,0(sp)
    a524:	000855c0 	call	855c <__sinit>
    a528:	d9400017 	ldw	r5,0(sp)
    a52c:	003ff006 	br	a4f0 <_fflush_r+0x1c>

0000a530 <fflush>:
    a530:	20000526 	beq	r4,zero,a548 <fflush+0x18>
    a534:	00800074 	movhi	r2,1
    a538:	10b48204 	addi	r2,r2,-11768
    a53c:	200b883a 	mov	r5,r4
    a540:	11000017 	ldw	r4,0(r2)
    a544:	000a4d41 	jmpi	a4d4 <_fflush_r>
    a548:	00800074 	movhi	r2,1
    a54c:	10b48104 	addi	r2,r2,-11772
    a550:	11000017 	ldw	r4,0(r2)
    a554:	01400074 	movhi	r5,1
    a558:	29693504 	addi	r5,r5,-23340
    a55c:	0008b381 	jmpi	8b38 <_fwalk_reent>

0000a560 <_malloc_trim_r>:
    a560:	defffb04 	addi	sp,sp,-20
    a564:	dcc00315 	stw	r19,12(sp)
    a568:	04c00074 	movhi	r19,1
    a56c:	dc800215 	stw	r18,8(sp)
    a570:	dc400115 	stw	r17,4(sp)
    a574:	dc000015 	stw	r16,0(sp)
    a578:	dfc00415 	stw	ra,16(sp)
    a57c:	2821883a 	mov	r16,r5
    a580:	9cf30a04 	addi	r19,r19,-13272
    a584:	2025883a 	mov	r18,r4
    a588:	000b4880 	call	b488 <__malloc_lock>
    a58c:	98800217 	ldw	r2,8(r19)
    a590:	14400117 	ldw	r17,4(r2)
    a594:	00bfff04 	movi	r2,-4
    a598:	88a2703a 	and	r17,r17,r2
    a59c:	8c21c83a 	sub	r16,r17,r16
    a5a0:	8403fbc4 	addi	r16,r16,4079
    a5a4:	8020d33a 	srli	r16,r16,12
    a5a8:	0083ffc4 	movi	r2,4095
    a5ac:	843fffc4 	addi	r16,r16,-1
    a5b0:	8020933a 	slli	r16,r16,12
    a5b4:	1400060e 	bge	r2,r16,a5d0 <_malloc_trim_r+0x70>
    a5b8:	000b883a 	mov	r5,zero
    a5bc:	9009883a 	mov	r4,r18
    a5c0:	0009e1c0 	call	9e1c <_sbrk_r>
    a5c4:	98c00217 	ldw	r3,8(r19)
    a5c8:	1c47883a 	add	r3,r3,r17
    a5cc:	10c00a26 	beq	r2,r3,a5f8 <_malloc_trim_r+0x98>
    a5d0:	9009883a 	mov	r4,r18
    a5d4:	000b4ac0 	call	b4ac <__malloc_unlock>
    a5d8:	0005883a 	mov	r2,zero
    a5dc:	dfc00417 	ldw	ra,16(sp)
    a5e0:	dcc00317 	ldw	r19,12(sp)
    a5e4:	dc800217 	ldw	r18,8(sp)
    a5e8:	dc400117 	ldw	r17,4(sp)
    a5ec:	dc000017 	ldw	r16,0(sp)
    a5f0:	dec00504 	addi	sp,sp,20
    a5f4:	f800283a 	ret
    a5f8:	040bc83a 	sub	r5,zero,r16
    a5fc:	9009883a 	mov	r4,r18
    a600:	0009e1c0 	call	9e1c <_sbrk_r>
    a604:	00ffffc4 	movi	r3,-1
    a608:	10c00d26 	beq	r2,r3,a640 <_malloc_trim_r+0xe0>
    a60c:	00c00074 	movhi	r3,1
    a610:	18f71e04 	addi	r3,r3,-9096
    a614:	18800017 	ldw	r2,0(r3)
    a618:	99000217 	ldw	r4,8(r19)
    a61c:	8c23c83a 	sub	r17,r17,r16
    a620:	8c400054 	ori	r17,r17,1
    a624:	1421c83a 	sub	r16,r2,r16
    a628:	24400115 	stw	r17,4(r4)
    a62c:	9009883a 	mov	r4,r18
    a630:	1c000015 	stw	r16,0(r3)
    a634:	000b4ac0 	call	b4ac <__malloc_unlock>
    a638:	00800044 	movi	r2,1
    a63c:	003fe706 	br	a5dc <_malloc_trim_r+0x7c>
    a640:	000b883a 	mov	r5,zero
    a644:	9009883a 	mov	r4,r18
    a648:	0009e1c0 	call	9e1c <_sbrk_r>
    a64c:	99000217 	ldw	r4,8(r19)
    a650:	014003c4 	movi	r5,15
    a654:	1107c83a 	sub	r3,r2,r4
    a658:	28ffdd0e 	bge	r5,r3,a5d0 <_malloc_trim_r+0x70>
    a65c:	01400074 	movhi	r5,1
    a660:	29748304 	addi	r5,r5,-11764
    a664:	29400017 	ldw	r5,0(r5)
    a668:	18c00054 	ori	r3,r3,1
    a66c:	20c00115 	stw	r3,4(r4)
    a670:	00c00074 	movhi	r3,1
    a674:	1145c83a 	sub	r2,r2,r5
    a678:	18f71e04 	addi	r3,r3,-9096
    a67c:	18800015 	stw	r2,0(r3)
    a680:	003fd306 	br	a5d0 <_malloc_trim_r+0x70>

0000a684 <_free_r>:
    a684:	28004126 	beq	r5,zero,a78c <_free_r+0x108>
    a688:	defffd04 	addi	sp,sp,-12
    a68c:	dc400115 	stw	r17,4(sp)
    a690:	dc000015 	stw	r16,0(sp)
    a694:	2023883a 	mov	r17,r4
    a698:	2821883a 	mov	r16,r5
    a69c:	dfc00215 	stw	ra,8(sp)
    a6a0:	000b4880 	call	b488 <__malloc_lock>
    a6a4:	81ffff17 	ldw	r7,-4(r16)
    a6a8:	00bfff84 	movi	r2,-2
    a6ac:	01000074 	movhi	r4,1
    a6b0:	81bffe04 	addi	r6,r16,-8
    a6b4:	3884703a 	and	r2,r7,r2
    a6b8:	21330a04 	addi	r4,r4,-13272
    a6bc:	308b883a 	add	r5,r6,r2
    a6c0:	2a400117 	ldw	r9,4(r5)
    a6c4:	22000217 	ldw	r8,8(r4)
    a6c8:	00ffff04 	movi	r3,-4
    a6cc:	48c6703a 	and	r3,r9,r3
    a6d0:	2a005726 	beq	r5,r8,a830 <_free_r+0x1ac>
    a6d4:	28c00115 	stw	r3,4(r5)
    a6d8:	39c0004c 	andi	r7,r7,1
    a6dc:	3800091e 	bne	r7,zero,a704 <_free_r+0x80>
    a6e0:	823ffe17 	ldw	r8,-8(r16)
    a6e4:	22400204 	addi	r9,r4,8
    a6e8:	320dc83a 	sub	r6,r6,r8
    a6ec:	31c00217 	ldw	r7,8(r6)
    a6f0:	1205883a 	add	r2,r2,r8
    a6f4:	3a406526 	beq	r7,r9,a88c <_free_r+0x208>
    a6f8:	32000317 	ldw	r8,12(r6)
    a6fc:	3a000315 	stw	r8,12(r7)
    a700:	41c00215 	stw	r7,8(r8)
    a704:	28cf883a 	add	r7,r5,r3
    a708:	39c00117 	ldw	r7,4(r7)
    a70c:	39c0004c 	andi	r7,r7,1
    a710:	38003a26 	beq	r7,zero,a7fc <_free_r+0x178>
    a714:	10c00054 	ori	r3,r2,1
    a718:	30c00115 	stw	r3,4(r6)
    a71c:	3087883a 	add	r3,r6,r2
    a720:	18800015 	stw	r2,0(r3)
    a724:	00c07fc4 	movi	r3,511
    a728:	18801936 	bltu	r3,r2,a790 <_free_r+0x10c>
    a72c:	1004d0fa 	srli	r2,r2,3
    a730:	01c00044 	movi	r7,1
    a734:	21400117 	ldw	r5,4(r4)
    a738:	10c00044 	addi	r3,r2,1
    a73c:	18c7883a 	add	r3,r3,r3
    a740:	1005d0ba 	srai	r2,r2,2
    a744:	18c7883a 	add	r3,r3,r3
    a748:	18c7883a 	add	r3,r3,r3
    a74c:	1907883a 	add	r3,r3,r4
    a750:	3884983a 	sll	r2,r7,r2
    a754:	19c00017 	ldw	r7,0(r3)
    a758:	1a3ffe04 	addi	r8,r3,-8
    a75c:	1144b03a 	or	r2,r2,r5
    a760:	32000315 	stw	r8,12(r6)
    a764:	31c00215 	stw	r7,8(r6)
    a768:	20800115 	stw	r2,4(r4)
    a76c:	19800015 	stw	r6,0(r3)
    a770:	39800315 	stw	r6,12(r7)
    a774:	8809883a 	mov	r4,r17
    a778:	dfc00217 	ldw	ra,8(sp)
    a77c:	dc400117 	ldw	r17,4(sp)
    a780:	dc000017 	ldw	r16,0(sp)
    a784:	dec00304 	addi	sp,sp,12
    a788:	000b4ac1 	jmpi	b4ac <__malloc_unlock>
    a78c:	f800283a 	ret
    a790:	100ad27a 	srli	r5,r2,9
    a794:	00c00104 	movi	r3,4
    a798:	19404a36 	bltu	r3,r5,a8c4 <_free_r+0x240>
    a79c:	100ad1ba 	srli	r5,r2,6
    a7a0:	28c00e44 	addi	r3,r5,57
    a7a4:	18c7883a 	add	r3,r3,r3
    a7a8:	29400e04 	addi	r5,r5,56
    a7ac:	18c7883a 	add	r3,r3,r3
    a7b0:	18c7883a 	add	r3,r3,r3
    a7b4:	1909883a 	add	r4,r3,r4
    a7b8:	20c00017 	ldw	r3,0(r4)
    a7bc:	01c00074 	movhi	r7,1
    a7c0:	213ffe04 	addi	r4,r4,-8
    a7c4:	39f30a04 	addi	r7,r7,-13272
    a7c8:	20c04426 	beq	r4,r3,a8dc <_free_r+0x258>
    a7cc:	01ffff04 	movi	r7,-4
    a7d0:	19400117 	ldw	r5,4(r3)
    a7d4:	29ca703a 	and	r5,r5,r7
    a7d8:	1140022e 	bgeu	r2,r5,a7e4 <_free_r+0x160>
    a7dc:	18c00217 	ldw	r3,8(r3)
    a7e0:	20fffb1e 	bne	r4,r3,a7d0 <_free_r+0x14c>
    a7e4:	19000317 	ldw	r4,12(r3)
    a7e8:	31000315 	stw	r4,12(r6)
    a7ec:	30c00215 	stw	r3,8(r6)
    a7f0:	21800215 	stw	r6,8(r4)
    a7f4:	19800315 	stw	r6,12(r3)
    a7f8:	003fde06 	br	a774 <_free_r+0xf0>
    a7fc:	29c00217 	ldw	r7,8(r5)
    a800:	10c5883a 	add	r2,r2,r3
    a804:	00c00074 	movhi	r3,1
    a808:	18f30c04 	addi	r3,r3,-13264
    a80c:	38c03b26 	beq	r7,r3,a8fc <_free_r+0x278>
    a810:	2a000317 	ldw	r8,12(r5)
    a814:	11400054 	ori	r5,r2,1
    a818:	3087883a 	add	r3,r6,r2
    a81c:	3a000315 	stw	r8,12(r7)
    a820:	41c00215 	stw	r7,8(r8)
    a824:	31400115 	stw	r5,4(r6)
    a828:	18800015 	stw	r2,0(r3)
    a82c:	003fbd06 	br	a724 <_free_r+0xa0>
    a830:	39c0004c 	andi	r7,r7,1
    a834:	10c5883a 	add	r2,r2,r3
    a838:	3800071e 	bne	r7,zero,a858 <_free_r+0x1d4>
    a83c:	81fffe17 	ldw	r7,-8(r16)
    a840:	31cdc83a 	sub	r6,r6,r7
    a844:	30c00317 	ldw	r3,12(r6)
    a848:	31400217 	ldw	r5,8(r6)
    a84c:	11c5883a 	add	r2,r2,r7
    a850:	28c00315 	stw	r3,12(r5)
    a854:	19400215 	stw	r5,8(r3)
    a858:	10c00054 	ori	r3,r2,1
    a85c:	30c00115 	stw	r3,4(r6)
    a860:	00c00074 	movhi	r3,1
    a864:	18f48404 	addi	r3,r3,-11760
    a868:	18c00017 	ldw	r3,0(r3)
    a86c:	21800215 	stw	r6,8(r4)
    a870:	10ffc036 	bltu	r2,r3,a774 <_free_r+0xf0>
    a874:	00800074 	movhi	r2,1
    a878:	10b71904 	addi	r2,r2,-9116
    a87c:	11400017 	ldw	r5,0(r2)
    a880:	8809883a 	mov	r4,r17
    a884:	000a5600 	call	a560 <_malloc_trim_r>
    a888:	003fba06 	br	a774 <_free_r+0xf0>
    a88c:	28c9883a 	add	r4,r5,r3
    a890:	21000117 	ldw	r4,4(r4)
    a894:	2100004c 	andi	r4,r4,1
    a898:	2000391e 	bne	r4,zero,a980 <_free_r+0x2fc>
    a89c:	29c00217 	ldw	r7,8(r5)
    a8a0:	29000317 	ldw	r4,12(r5)
    a8a4:	1885883a 	add	r2,r3,r2
    a8a8:	10c00054 	ori	r3,r2,1
    a8ac:	39000315 	stw	r4,12(r7)
    a8b0:	21c00215 	stw	r7,8(r4)
    a8b4:	30c00115 	stw	r3,4(r6)
    a8b8:	308d883a 	add	r6,r6,r2
    a8bc:	30800015 	stw	r2,0(r6)
    a8c0:	003fac06 	br	a774 <_free_r+0xf0>
    a8c4:	00c00504 	movi	r3,20
    a8c8:	19401536 	bltu	r3,r5,a920 <_free_r+0x29c>
    a8cc:	28c01704 	addi	r3,r5,92
    a8d0:	18c7883a 	add	r3,r3,r3
    a8d4:	294016c4 	addi	r5,r5,91
    a8d8:	003fb406 	br	a7ac <_free_r+0x128>
    a8dc:	280bd0ba 	srai	r5,r5,2
    a8e0:	00c00044 	movi	r3,1
    a8e4:	38800117 	ldw	r2,4(r7)
    a8e8:	194a983a 	sll	r5,r3,r5
    a8ec:	2007883a 	mov	r3,r4
    a8f0:	2884b03a 	or	r2,r5,r2
    a8f4:	38800115 	stw	r2,4(r7)
    a8f8:	003fbb06 	br	a7e8 <_free_r+0x164>
    a8fc:	21800515 	stw	r6,20(r4)
    a900:	21800415 	stw	r6,16(r4)
    a904:	10c00054 	ori	r3,r2,1
    a908:	31c00315 	stw	r7,12(r6)
    a90c:	31c00215 	stw	r7,8(r6)
    a910:	30c00115 	stw	r3,4(r6)
    a914:	308d883a 	add	r6,r6,r2
    a918:	30800015 	stw	r2,0(r6)
    a91c:	003f9506 	br	a774 <_free_r+0xf0>
    a920:	00c01504 	movi	r3,84
    a924:	19400536 	bltu	r3,r5,a93c <_free_r+0x2b8>
    a928:	100ad33a 	srli	r5,r2,12
    a92c:	28c01bc4 	addi	r3,r5,111
    a930:	18c7883a 	add	r3,r3,r3
    a934:	29401b84 	addi	r5,r5,110
    a938:	003f9c06 	br	a7ac <_free_r+0x128>
    a93c:	00c05504 	movi	r3,340
    a940:	19400536 	bltu	r3,r5,a958 <_free_r+0x2d4>
    a944:	100ad3fa 	srli	r5,r2,15
    a948:	28c01e04 	addi	r3,r5,120
    a94c:	18c7883a 	add	r3,r3,r3
    a950:	29401dc4 	addi	r5,r5,119
    a954:	003f9506 	br	a7ac <_free_r+0x128>
    a958:	00c15504 	movi	r3,1364
    a95c:	19400536 	bltu	r3,r5,a974 <_free_r+0x2f0>
    a960:	100ad4ba 	srli	r5,r2,18
    a964:	28c01f44 	addi	r3,r5,125
    a968:	18c7883a 	add	r3,r3,r3
    a96c:	29401f04 	addi	r5,r5,124
    a970:	003f8e06 	br	a7ac <_free_r+0x128>
    a974:	00c03f84 	movi	r3,254
    a978:	01401f84 	movi	r5,126
    a97c:	003f8b06 	br	a7ac <_free_r+0x128>
    a980:	10c00054 	ori	r3,r2,1
    a984:	30c00115 	stw	r3,4(r6)
    a988:	308d883a 	add	r6,r6,r2
    a98c:	30800015 	stw	r2,0(r6)
    a990:	003f7806 	br	a774 <_free_r+0xf0>

0000a994 <_lseek_r>:
    a994:	defffd04 	addi	sp,sp,-12
    a998:	2805883a 	mov	r2,r5
    a99c:	dc000015 	stw	r16,0(sp)
    a9a0:	04000074 	movhi	r16,1
    a9a4:	dc400115 	stw	r17,4(sp)
    a9a8:	300b883a 	mov	r5,r6
    a9ac:	84371a04 	addi	r16,r16,-9112
    a9b0:	2023883a 	mov	r17,r4
    a9b4:	380d883a 	mov	r6,r7
    a9b8:	1009883a 	mov	r4,r2
    a9bc:	dfc00215 	stw	ra,8(sp)
    a9c0:	80000015 	stw	zero,0(r16)
    a9c4:	000b3300 	call	b330 <lseek>
    a9c8:	00ffffc4 	movi	r3,-1
    a9cc:	10c00526 	beq	r2,r3,a9e4 <_lseek_r+0x50>
    a9d0:	dfc00217 	ldw	ra,8(sp)
    a9d4:	dc400117 	ldw	r17,4(sp)
    a9d8:	dc000017 	ldw	r16,0(sp)
    a9dc:	dec00304 	addi	sp,sp,12
    a9e0:	f800283a 	ret
    a9e4:	80c00017 	ldw	r3,0(r16)
    a9e8:	183ff926 	beq	r3,zero,a9d0 <_lseek_r+0x3c>
    a9ec:	88c00015 	stw	r3,0(r17)
    a9f0:	003ff706 	br	a9d0 <_lseek_r+0x3c>

0000a9f4 <__smakebuf_r>:
    a9f4:	2880030b 	ldhu	r2,12(r5)
    a9f8:	10c0008c 	andi	r3,r2,2
    a9fc:	1800411e 	bne	r3,zero,ab04 <__smakebuf_r+0x110>
    aa00:	deffec04 	addi	sp,sp,-80
    aa04:	dc000f15 	stw	r16,60(sp)
    aa08:	2821883a 	mov	r16,r5
    aa0c:	2940038f 	ldh	r5,14(r5)
    aa10:	dc401015 	stw	r17,64(sp)
    aa14:	dfc01315 	stw	ra,76(sp)
    aa18:	dcc01215 	stw	r19,72(sp)
    aa1c:	dc801115 	stw	r18,68(sp)
    aa20:	2023883a 	mov	r17,r4
    aa24:	28001c16 	blt	r5,zero,aa98 <__smakebuf_r+0xa4>
    aa28:	d80d883a 	mov	r6,sp
    aa2c:	000ac100 	call	ac10 <_fstat_r>
    aa30:	10001816 	blt	r2,zero,aa94 <__smakebuf_r+0xa0>
    aa34:	d8800117 	ldw	r2,4(sp)
    aa38:	00e00014 	movui	r3,32768
    aa3c:	10bc000c 	andi	r2,r2,61440
    aa40:	14c80020 	cmpeqi	r19,r2,8192
    aa44:	10c03726 	beq	r2,r3,ab24 <__smakebuf_r+0x130>
    aa48:	80c0030b 	ldhu	r3,12(r16)
    aa4c:	18c20014 	ori	r3,r3,2048
    aa50:	80c0030d 	sth	r3,12(r16)
    aa54:	00c80004 	movi	r3,8192
    aa58:	10c0521e 	bne	r2,r3,aba4 <__smakebuf_r+0x1b0>
    aa5c:	8140038f 	ldh	r5,14(r16)
    aa60:	8809883a 	mov	r4,r17
    aa64:	000ac6c0 	call	ac6c <_isatty_r>
    aa68:	10004c26 	beq	r2,zero,ab9c <__smakebuf_r+0x1a8>
    aa6c:	8080030b 	ldhu	r2,12(r16)
    aa70:	80c010c4 	addi	r3,r16,67
    aa74:	80c00015 	stw	r3,0(r16)
    aa78:	10800054 	ori	r2,r2,1
    aa7c:	8080030d 	sth	r2,12(r16)
    aa80:	00800044 	movi	r2,1
    aa84:	80c00415 	stw	r3,16(r16)
    aa88:	80800515 	stw	r2,20(r16)
    aa8c:	04810004 	movi	r18,1024
    aa90:	00000706 	br	aab0 <__smakebuf_r+0xbc>
    aa94:	8080030b 	ldhu	r2,12(r16)
    aa98:	10c0200c 	andi	r3,r2,128
    aa9c:	18001f1e 	bne	r3,zero,ab1c <__smakebuf_r+0x128>
    aaa0:	04810004 	movi	r18,1024
    aaa4:	10820014 	ori	r2,r2,2048
    aaa8:	8080030d 	sth	r2,12(r16)
    aaac:	0027883a 	mov	r19,zero
    aab0:	900b883a 	mov	r5,r18
    aab4:	8809883a 	mov	r4,r17
    aab8:	0008bfc0 	call	8bfc <_malloc_r>
    aabc:	10002c26 	beq	r2,zero,ab70 <__smakebuf_r+0x17c>
    aac0:	80c0030b 	ldhu	r3,12(r16)
    aac4:	01000074 	movhi	r4,1
    aac8:	21208104 	addi	r4,r4,-32252
    aacc:	89000f15 	stw	r4,60(r17)
    aad0:	18c02014 	ori	r3,r3,128
    aad4:	80c0030d 	sth	r3,12(r16)
    aad8:	80800015 	stw	r2,0(r16)
    aadc:	80800415 	stw	r2,16(r16)
    aae0:	84800515 	stw	r18,20(r16)
    aae4:	98001a1e 	bne	r19,zero,ab50 <__smakebuf_r+0x15c>
    aae8:	dfc01317 	ldw	ra,76(sp)
    aaec:	dcc01217 	ldw	r19,72(sp)
    aaf0:	dc801117 	ldw	r18,68(sp)
    aaf4:	dc401017 	ldw	r17,64(sp)
    aaf8:	dc000f17 	ldw	r16,60(sp)
    aafc:	dec01404 	addi	sp,sp,80
    ab00:	f800283a 	ret
    ab04:	288010c4 	addi	r2,r5,67
    ab08:	28800015 	stw	r2,0(r5)
    ab0c:	28800415 	stw	r2,16(r5)
    ab10:	00800044 	movi	r2,1
    ab14:	28800515 	stw	r2,20(r5)
    ab18:	f800283a 	ret
    ab1c:	04801004 	movi	r18,64
    ab20:	003fe006 	br	aaa4 <__smakebuf_r+0xb0>
    ab24:	81000a17 	ldw	r4,40(r16)
    ab28:	00c00074 	movhi	r3,1
    ab2c:	18e7d204 	addi	r3,r3,-24760
    ab30:	20ffc51e 	bne	r4,r3,aa48 <__smakebuf_r+0x54>
    ab34:	8080030b 	ldhu	r2,12(r16)
    ab38:	04810004 	movi	r18,1024
    ab3c:	84801315 	stw	r18,76(r16)
    ab40:	1484b03a 	or	r2,r2,r18
    ab44:	8080030d 	sth	r2,12(r16)
    ab48:	0027883a 	mov	r19,zero
    ab4c:	003fd806 	br	aab0 <__smakebuf_r+0xbc>
    ab50:	8140038f 	ldh	r5,14(r16)
    ab54:	8809883a 	mov	r4,r17
    ab58:	000ac6c0 	call	ac6c <_isatty_r>
    ab5c:	103fe226 	beq	r2,zero,aae8 <__smakebuf_r+0xf4>
    ab60:	8080030b 	ldhu	r2,12(r16)
    ab64:	10800054 	ori	r2,r2,1
    ab68:	8080030d 	sth	r2,12(r16)
    ab6c:	003fde06 	br	aae8 <__smakebuf_r+0xf4>
    ab70:	8080030b 	ldhu	r2,12(r16)
    ab74:	10c0800c 	andi	r3,r2,512
    ab78:	183fdb1e 	bne	r3,zero,aae8 <__smakebuf_r+0xf4>
    ab7c:	10800094 	ori	r2,r2,2
    ab80:	80c010c4 	addi	r3,r16,67
    ab84:	8080030d 	sth	r2,12(r16)
    ab88:	00800044 	movi	r2,1
    ab8c:	80c00015 	stw	r3,0(r16)
    ab90:	80c00415 	stw	r3,16(r16)
    ab94:	80800515 	stw	r2,20(r16)
    ab98:	003fd306 	br	aae8 <__smakebuf_r+0xf4>
    ab9c:	04810004 	movi	r18,1024
    aba0:	003fc306 	br	aab0 <__smakebuf_r+0xbc>
    aba4:	0027883a 	mov	r19,zero
    aba8:	04810004 	movi	r18,1024
    abac:	003fc006 	br	aab0 <__smakebuf_r+0xbc>

0000abb0 <_read_r>:
    abb0:	defffd04 	addi	sp,sp,-12
    abb4:	2805883a 	mov	r2,r5
    abb8:	dc000015 	stw	r16,0(sp)
    abbc:	04000074 	movhi	r16,1
    abc0:	dc400115 	stw	r17,4(sp)
    abc4:	300b883a 	mov	r5,r6
    abc8:	84371a04 	addi	r16,r16,-9112
    abcc:	2023883a 	mov	r17,r4
    abd0:	380d883a 	mov	r6,r7
    abd4:	1009883a 	mov	r4,r2
    abd8:	dfc00215 	stw	ra,8(sp)
    abdc:	80000015 	stw	zero,0(r16)
    abe0:	000b5200 	call	b520 <read>
    abe4:	00ffffc4 	movi	r3,-1
    abe8:	10c00526 	beq	r2,r3,ac00 <_read_r+0x50>
    abec:	dfc00217 	ldw	ra,8(sp)
    abf0:	dc400117 	ldw	r17,4(sp)
    abf4:	dc000017 	ldw	r16,0(sp)
    abf8:	dec00304 	addi	sp,sp,12
    abfc:	f800283a 	ret
    ac00:	80c00017 	ldw	r3,0(r16)
    ac04:	183ff926 	beq	r3,zero,abec <_read_r+0x3c>
    ac08:	88c00015 	stw	r3,0(r17)
    ac0c:	003ff706 	br	abec <_read_r+0x3c>

0000ac10 <_fstat_r>:
    ac10:	defffd04 	addi	sp,sp,-12
    ac14:	2805883a 	mov	r2,r5
    ac18:	dc000015 	stw	r16,0(sp)
    ac1c:	04000074 	movhi	r16,1
    ac20:	dc400115 	stw	r17,4(sp)
    ac24:	84371a04 	addi	r16,r16,-9112
    ac28:	2023883a 	mov	r17,r4
    ac2c:	300b883a 	mov	r5,r6
    ac30:	1009883a 	mov	r4,r2
    ac34:	dfc00215 	stw	ra,8(sp)
    ac38:	80000015 	stw	zero,0(r16)
    ac3c:	000b0400 	call	b040 <fstat>
    ac40:	00ffffc4 	movi	r3,-1
    ac44:	10c00526 	beq	r2,r3,ac5c <_fstat_r+0x4c>
    ac48:	dfc00217 	ldw	ra,8(sp)
    ac4c:	dc400117 	ldw	r17,4(sp)
    ac50:	dc000017 	ldw	r16,0(sp)
    ac54:	dec00304 	addi	sp,sp,12
    ac58:	f800283a 	ret
    ac5c:	80c00017 	ldw	r3,0(r16)
    ac60:	183ff926 	beq	r3,zero,ac48 <_fstat_r+0x38>
    ac64:	88c00015 	stw	r3,0(r17)
    ac68:	003ff706 	br	ac48 <_fstat_r+0x38>

0000ac6c <_isatty_r>:
    ac6c:	defffd04 	addi	sp,sp,-12
    ac70:	dc000015 	stw	r16,0(sp)
    ac74:	04000074 	movhi	r16,1
    ac78:	dc400115 	stw	r17,4(sp)
    ac7c:	84371a04 	addi	r16,r16,-9112
    ac80:	2023883a 	mov	r17,r4
    ac84:	2809883a 	mov	r4,r5
    ac88:	dfc00215 	stw	ra,8(sp)
    ac8c:	80000015 	stw	zero,0(r16)
    ac90:	000b1480 	call	b148 <isatty>
    ac94:	00ffffc4 	movi	r3,-1
    ac98:	10c00526 	beq	r2,r3,acb0 <_isatty_r+0x44>
    ac9c:	dfc00217 	ldw	ra,8(sp)
    aca0:	dc400117 	ldw	r17,4(sp)
    aca4:	dc000017 	ldw	r16,0(sp)
    aca8:	dec00304 	addi	sp,sp,12
    acac:	f800283a 	ret
    acb0:	80c00017 	ldw	r3,0(r16)
    acb4:	183ff926 	beq	r3,zero,ac9c <_isatty_r+0x30>
    acb8:	88c00015 	stw	r3,0(r17)
    acbc:	003ff706 	br	ac9c <_isatty_r+0x30>

0000acc0 <__divsi3>:
    acc0:	20001b16 	blt	r4,zero,ad30 <__divsi3+0x70>
    acc4:	000f883a 	mov	r7,zero
    acc8:	28001616 	blt	r5,zero,ad24 <__divsi3+0x64>
    accc:	200d883a 	mov	r6,r4
    acd0:	29001a2e 	bgeu	r5,r4,ad3c <__divsi3+0x7c>
    acd4:	00800804 	movi	r2,32
    acd8:	00c00044 	movi	r3,1
    acdc:	00000106 	br	ace4 <__divsi3+0x24>
    ace0:	10000d26 	beq	r2,zero,ad18 <__divsi3+0x58>
    ace4:	294b883a 	add	r5,r5,r5
    ace8:	10bfffc4 	addi	r2,r2,-1
    acec:	18c7883a 	add	r3,r3,r3
    acf0:	293ffb36 	bltu	r5,r4,ace0 <__divsi3+0x20>
    acf4:	0005883a 	mov	r2,zero
    acf8:	18000726 	beq	r3,zero,ad18 <__divsi3+0x58>
    acfc:	0005883a 	mov	r2,zero
    ad00:	31400236 	bltu	r6,r5,ad0c <__divsi3+0x4c>
    ad04:	314dc83a 	sub	r6,r6,r5
    ad08:	10c4b03a 	or	r2,r2,r3
    ad0c:	1806d07a 	srli	r3,r3,1
    ad10:	280ad07a 	srli	r5,r5,1
    ad14:	183ffa1e 	bne	r3,zero,ad00 <__divsi3+0x40>
    ad18:	38000126 	beq	r7,zero,ad20 <__divsi3+0x60>
    ad1c:	0085c83a 	sub	r2,zero,r2
    ad20:	f800283a 	ret
    ad24:	014bc83a 	sub	r5,zero,r5
    ad28:	39c0005c 	xori	r7,r7,1
    ad2c:	003fe706 	br	accc <__divsi3+0xc>
    ad30:	0109c83a 	sub	r4,zero,r4
    ad34:	01c00044 	movi	r7,1
    ad38:	003fe306 	br	acc8 <__divsi3+0x8>
    ad3c:	00c00044 	movi	r3,1
    ad40:	003fee06 	br	acfc <__divsi3+0x3c>

0000ad44 <__modsi3>:
    ad44:	20001716 	blt	r4,zero,ada4 <__modsi3+0x60>
    ad48:	000f883a 	mov	r7,zero
    ad4c:	2005883a 	mov	r2,r4
    ad50:	28001216 	blt	r5,zero,ad9c <__modsi3+0x58>
    ad54:	2900162e 	bgeu	r5,r4,adb0 <__modsi3+0x6c>
    ad58:	01800804 	movi	r6,32
    ad5c:	00c00044 	movi	r3,1
    ad60:	00000106 	br	ad68 <__modsi3+0x24>
    ad64:	30000a26 	beq	r6,zero,ad90 <__modsi3+0x4c>
    ad68:	294b883a 	add	r5,r5,r5
    ad6c:	31bfffc4 	addi	r6,r6,-1
    ad70:	18c7883a 	add	r3,r3,r3
    ad74:	293ffb36 	bltu	r5,r4,ad64 <__modsi3+0x20>
    ad78:	18000526 	beq	r3,zero,ad90 <__modsi3+0x4c>
    ad7c:	1806d07a 	srli	r3,r3,1
    ad80:	11400136 	bltu	r2,r5,ad88 <__modsi3+0x44>
    ad84:	1145c83a 	sub	r2,r2,r5
    ad88:	280ad07a 	srli	r5,r5,1
    ad8c:	183ffb1e 	bne	r3,zero,ad7c <__modsi3+0x38>
    ad90:	38000126 	beq	r7,zero,ad98 <__modsi3+0x54>
    ad94:	0085c83a 	sub	r2,zero,r2
    ad98:	f800283a 	ret
    ad9c:	014bc83a 	sub	r5,zero,r5
    ada0:	003fec06 	br	ad54 <__modsi3+0x10>
    ada4:	0109c83a 	sub	r4,zero,r4
    ada8:	01c00044 	movi	r7,1
    adac:	003fe706 	br	ad4c <__modsi3+0x8>
    adb0:	00c00044 	movi	r3,1
    adb4:	003ff106 	br	ad7c <__modsi3+0x38>

0000adb8 <__udivsi3>:
    adb8:	200d883a 	mov	r6,r4
    adbc:	2900152e 	bgeu	r5,r4,ae14 <__udivsi3+0x5c>
    adc0:	28001416 	blt	r5,zero,ae14 <__udivsi3+0x5c>
    adc4:	00800804 	movi	r2,32
    adc8:	00c00044 	movi	r3,1
    adcc:	00000206 	br	add8 <__udivsi3+0x20>
    add0:	10000e26 	beq	r2,zero,ae0c <__udivsi3+0x54>
    add4:	28000516 	blt	r5,zero,adec <__udivsi3+0x34>
    add8:	294b883a 	add	r5,r5,r5
    addc:	10bfffc4 	addi	r2,r2,-1
    ade0:	18c7883a 	add	r3,r3,r3
    ade4:	293ffa36 	bltu	r5,r4,add0 <__udivsi3+0x18>
    ade8:	18000826 	beq	r3,zero,ae0c <__udivsi3+0x54>
    adec:	0005883a 	mov	r2,zero
    adf0:	31400236 	bltu	r6,r5,adfc <__udivsi3+0x44>
    adf4:	314dc83a 	sub	r6,r6,r5
    adf8:	10c4b03a 	or	r2,r2,r3
    adfc:	1806d07a 	srli	r3,r3,1
    ae00:	280ad07a 	srli	r5,r5,1
    ae04:	183ffa1e 	bne	r3,zero,adf0 <__udivsi3+0x38>
    ae08:	f800283a 	ret
    ae0c:	0005883a 	mov	r2,zero
    ae10:	f800283a 	ret
    ae14:	00c00044 	movi	r3,1
    ae18:	003ff406 	br	adec <__udivsi3+0x34>

0000ae1c <__umodsi3>:
    ae1c:	2005883a 	mov	r2,r4
    ae20:	2900122e 	bgeu	r5,r4,ae6c <__umodsi3+0x50>
    ae24:	28001116 	blt	r5,zero,ae6c <__umodsi3+0x50>
    ae28:	01800804 	movi	r6,32
    ae2c:	00c00044 	movi	r3,1
    ae30:	00000206 	br	ae3c <__umodsi3+0x20>
    ae34:	30000c26 	beq	r6,zero,ae68 <__umodsi3+0x4c>
    ae38:	28000516 	blt	r5,zero,ae50 <__umodsi3+0x34>
    ae3c:	294b883a 	add	r5,r5,r5
    ae40:	31bfffc4 	addi	r6,r6,-1
    ae44:	18c7883a 	add	r3,r3,r3
    ae48:	293ffa36 	bltu	r5,r4,ae34 <__umodsi3+0x18>
    ae4c:	18000626 	beq	r3,zero,ae68 <__umodsi3+0x4c>
    ae50:	1806d07a 	srli	r3,r3,1
    ae54:	11400136 	bltu	r2,r5,ae5c <__umodsi3+0x40>
    ae58:	1145c83a 	sub	r2,r2,r5
    ae5c:	280ad07a 	srli	r5,r5,1
    ae60:	183ffb1e 	bne	r3,zero,ae50 <__umodsi3+0x34>
    ae64:	f800283a 	ret
    ae68:	f800283a 	ret
    ae6c:	00c00044 	movi	r3,1
    ae70:	003ff706 	br	ae50 <__umodsi3+0x34>

0000ae74 <__mulsi3>:
    ae74:	0005883a 	mov	r2,zero
    ae78:	20000726 	beq	r4,zero,ae98 <__mulsi3+0x24>
    ae7c:	20c0004c 	andi	r3,r4,1
    ae80:	2008d07a 	srli	r4,r4,1
    ae84:	18000126 	beq	r3,zero,ae8c <__mulsi3+0x18>
    ae88:	1145883a 	add	r2,r2,r5
    ae8c:	294b883a 	add	r5,r5,r5
    ae90:	203ffa1e 	bne	r4,zero,ae7c <__mulsi3+0x8>
    ae94:	f800283a 	ret
    ae98:	f800283a 	ret

0000ae9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ae9c:	defffe04 	addi	sp,sp,-8
    aea0:	dfc00115 	stw	ra,4(sp)
    aea4:	df000015 	stw	fp,0(sp)
    aea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aeac:	00800074 	movhi	r2,1
    aeb0:	10b48a04 	addi	r2,r2,-11736
    aeb4:	10800017 	ldw	r2,0(r2)
    aeb8:	10000526 	beq	r2,zero,aed0 <alt_get_errno+0x34>
    aebc:	00800074 	movhi	r2,1
    aec0:	10b48a04 	addi	r2,r2,-11736
    aec4:	10800017 	ldw	r2,0(r2)
    aec8:	103ee83a 	callr	r2
    aecc:	00000206 	br	aed8 <alt_get_errno+0x3c>
    aed0:	00800074 	movhi	r2,1
    aed4:	10b71a04 	addi	r2,r2,-9112
}
    aed8:	e037883a 	mov	sp,fp
    aedc:	dfc00117 	ldw	ra,4(sp)
    aee0:	df000017 	ldw	fp,0(sp)
    aee4:	dec00204 	addi	sp,sp,8
    aee8:	f800283a 	ret

0000aeec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    aeec:	defffb04 	addi	sp,sp,-20
    aef0:	dfc00415 	stw	ra,16(sp)
    aef4:	df000315 	stw	fp,12(sp)
    aef8:	df000304 	addi	fp,sp,12
    aefc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    af00:	e0bfff17 	ldw	r2,-4(fp)
    af04:	10000816 	blt	r2,zero,af28 <close+0x3c>
    af08:	01400304 	movi	r5,12
    af0c:	e13fff17 	ldw	r4,-4(fp)
    af10:	000ae740 	call	ae74 <__mulsi3>
    af14:	1007883a 	mov	r3,r2
    af18:	00800074 	movhi	r2,1
    af1c:	10b41604 	addi	r2,r2,-12200
    af20:	1885883a 	add	r2,r3,r2
    af24:	00000106 	br	af2c <close+0x40>
    af28:	0005883a 	mov	r2,zero
    af2c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    af30:	e0bffd17 	ldw	r2,-12(fp)
    af34:	10001926 	beq	r2,zero,af9c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    af38:	e0bffd17 	ldw	r2,-12(fp)
    af3c:	10800017 	ldw	r2,0(r2)
    af40:	10800417 	ldw	r2,16(r2)
    af44:	10000626 	beq	r2,zero,af60 <close+0x74>
    af48:	e0bffd17 	ldw	r2,-12(fp)
    af4c:	10800017 	ldw	r2,0(r2)
    af50:	10800417 	ldw	r2,16(r2)
    af54:	e13ffd17 	ldw	r4,-12(fp)
    af58:	103ee83a 	callr	r2
    af5c:	00000106 	br	af64 <close+0x78>
    af60:	0005883a 	mov	r2,zero
    af64:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    af68:	e13fff17 	ldw	r4,-4(fp)
    af6c:	000b6240 	call	b624 <alt_release_fd>
    if (rval < 0)
    af70:	e0bffe17 	ldw	r2,-8(fp)
    af74:	1000070e 	bge	r2,zero,af94 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    af78:	000ae9c0 	call	ae9c <alt_get_errno>
    af7c:	1007883a 	mov	r3,r2
    af80:	e0bffe17 	ldw	r2,-8(fp)
    af84:	0085c83a 	sub	r2,zero,r2
    af88:	18800015 	stw	r2,0(r3)
      return -1;
    af8c:	00bfffc4 	movi	r2,-1
    af90:	00000706 	br	afb0 <close+0xc4>
    }
    return 0;
    af94:	0005883a 	mov	r2,zero
    af98:	00000506 	br	afb0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af9c:	000ae9c0 	call	ae9c <alt_get_errno>
    afa0:	1007883a 	mov	r3,r2
    afa4:	00801444 	movi	r2,81
    afa8:	18800015 	stw	r2,0(r3)
    return -1;
    afac:	00bfffc4 	movi	r2,-1
  }
}
    afb0:	e037883a 	mov	sp,fp
    afb4:	dfc00117 	ldw	ra,4(sp)
    afb8:	df000017 	ldw	fp,0(sp)
    afbc:	dec00204 	addi	sp,sp,8
    afc0:	f800283a 	ret

0000afc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    afc4:	defffc04 	addi	sp,sp,-16
    afc8:	df000315 	stw	fp,12(sp)
    afcc:	df000304 	addi	fp,sp,12
    afd0:	e13ffd15 	stw	r4,-12(fp)
    afd4:	e17ffe15 	stw	r5,-8(fp)
    afd8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    afdc:	e0bfff17 	ldw	r2,-4(fp)
}
    afe0:	e037883a 	mov	sp,fp
    afe4:	df000017 	ldw	fp,0(sp)
    afe8:	dec00104 	addi	sp,sp,4
    afec:	f800283a 	ret

0000aff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aff0:	defffe04 	addi	sp,sp,-8
    aff4:	dfc00115 	stw	ra,4(sp)
    aff8:	df000015 	stw	fp,0(sp)
    affc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b000:	00800074 	movhi	r2,1
    b004:	10b48a04 	addi	r2,r2,-11736
    b008:	10800017 	ldw	r2,0(r2)
    b00c:	10000526 	beq	r2,zero,b024 <alt_get_errno+0x34>
    b010:	00800074 	movhi	r2,1
    b014:	10b48a04 	addi	r2,r2,-11736
    b018:	10800017 	ldw	r2,0(r2)
    b01c:	103ee83a 	callr	r2
    b020:	00000206 	br	b02c <alt_get_errno+0x3c>
    b024:	00800074 	movhi	r2,1
    b028:	10b71a04 	addi	r2,r2,-9112
}
    b02c:	e037883a 	mov	sp,fp
    b030:	dfc00117 	ldw	ra,4(sp)
    b034:	df000017 	ldw	fp,0(sp)
    b038:	dec00204 	addi	sp,sp,8
    b03c:	f800283a 	ret

0000b040 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b040:	defffb04 	addi	sp,sp,-20
    b044:	dfc00415 	stw	ra,16(sp)
    b048:	df000315 	stw	fp,12(sp)
    b04c:	df000304 	addi	fp,sp,12
    b050:	e13ffe15 	stw	r4,-8(fp)
    b054:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b058:	e0bffe17 	ldw	r2,-8(fp)
    b05c:	10000816 	blt	r2,zero,b080 <fstat+0x40>
    b060:	01400304 	movi	r5,12
    b064:	e13ffe17 	ldw	r4,-8(fp)
    b068:	000ae740 	call	ae74 <__mulsi3>
    b06c:	1007883a 	mov	r3,r2
    b070:	00800074 	movhi	r2,1
    b074:	10b41604 	addi	r2,r2,-12200
    b078:	1885883a 	add	r2,r3,r2
    b07c:	00000106 	br	b084 <fstat+0x44>
    b080:	0005883a 	mov	r2,zero
    b084:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    b088:	e0bffd17 	ldw	r2,-12(fp)
    b08c:	10001026 	beq	r2,zero,b0d0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b090:	e0bffd17 	ldw	r2,-12(fp)
    b094:	10800017 	ldw	r2,0(r2)
    b098:	10800817 	ldw	r2,32(r2)
    b09c:	10000726 	beq	r2,zero,b0bc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    b0a0:	e0bffd17 	ldw	r2,-12(fp)
    b0a4:	10800017 	ldw	r2,0(r2)
    b0a8:	10800817 	ldw	r2,32(r2)
    b0ac:	e17fff17 	ldw	r5,-4(fp)
    b0b0:	e13ffd17 	ldw	r4,-12(fp)
    b0b4:	103ee83a 	callr	r2
    b0b8:	00000a06 	br	b0e4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b0bc:	e0bfff17 	ldw	r2,-4(fp)
    b0c0:	00c80004 	movi	r3,8192
    b0c4:	10c00115 	stw	r3,4(r2)
      return 0;
    b0c8:	0005883a 	mov	r2,zero
    b0cc:	00000506 	br	b0e4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b0d0:	000aff00 	call	aff0 <alt_get_errno>
    b0d4:	1007883a 	mov	r3,r2
    b0d8:	00801444 	movi	r2,81
    b0dc:	18800015 	stw	r2,0(r3)
    return -1;
    b0e0:	00bfffc4 	movi	r2,-1
  }
}
    b0e4:	e037883a 	mov	sp,fp
    b0e8:	dfc00117 	ldw	ra,4(sp)
    b0ec:	df000017 	ldw	fp,0(sp)
    b0f0:	dec00204 	addi	sp,sp,8
    b0f4:	f800283a 	ret

0000b0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b0f8:	defffe04 	addi	sp,sp,-8
    b0fc:	dfc00115 	stw	ra,4(sp)
    b100:	df000015 	stw	fp,0(sp)
    b104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b108:	00800074 	movhi	r2,1
    b10c:	10b48a04 	addi	r2,r2,-11736
    b110:	10800017 	ldw	r2,0(r2)
    b114:	10000526 	beq	r2,zero,b12c <alt_get_errno+0x34>
    b118:	00800074 	movhi	r2,1
    b11c:	10b48a04 	addi	r2,r2,-11736
    b120:	10800017 	ldw	r2,0(r2)
    b124:	103ee83a 	callr	r2
    b128:	00000206 	br	b134 <alt_get_errno+0x3c>
    b12c:	00800074 	movhi	r2,1
    b130:	10b71a04 	addi	r2,r2,-9112
}
    b134:	e037883a 	mov	sp,fp
    b138:	dfc00117 	ldw	ra,4(sp)
    b13c:	df000017 	ldw	fp,0(sp)
    b140:	dec00204 	addi	sp,sp,8
    b144:	f800283a 	ret

0000b148 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b148:	deffed04 	addi	sp,sp,-76
    b14c:	dfc01215 	stw	ra,72(sp)
    b150:	df001115 	stw	fp,68(sp)
    b154:	df001104 	addi	fp,sp,68
    b158:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b15c:	e0bfff17 	ldw	r2,-4(fp)
    b160:	10000816 	blt	r2,zero,b184 <isatty+0x3c>
    b164:	01400304 	movi	r5,12
    b168:	e13fff17 	ldw	r4,-4(fp)
    b16c:	000ae740 	call	ae74 <__mulsi3>
    b170:	1007883a 	mov	r3,r2
    b174:	00800074 	movhi	r2,1
    b178:	10b41604 	addi	r2,r2,-12200
    b17c:	1885883a 	add	r2,r3,r2
    b180:	00000106 	br	b188 <isatty+0x40>
    b184:	0005883a 	mov	r2,zero
    b188:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b18c:	e0bfef17 	ldw	r2,-68(fp)
    b190:	10000e26 	beq	r2,zero,b1cc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b194:	e0bfef17 	ldw	r2,-68(fp)
    b198:	10800017 	ldw	r2,0(r2)
    b19c:	10800817 	ldw	r2,32(r2)
    b1a0:	1000021e 	bne	r2,zero,b1ac <isatty+0x64>
    {
      return 1;
    b1a4:	00800044 	movi	r2,1
    b1a8:	00000d06 	br	b1e0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b1ac:	e0bff004 	addi	r2,fp,-64
    b1b0:	100b883a 	mov	r5,r2
    b1b4:	e13fff17 	ldw	r4,-4(fp)
    b1b8:	000b0400 	call	b040 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b1bc:	e0bff117 	ldw	r2,-60(fp)
    b1c0:	10880020 	cmpeqi	r2,r2,8192
    b1c4:	10803fcc 	andi	r2,r2,255
    b1c8:	00000506 	br	b1e0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1cc:	000b0f80 	call	b0f8 <alt_get_errno>
    b1d0:	1007883a 	mov	r3,r2
    b1d4:	00801444 	movi	r2,81
    b1d8:	18800015 	stw	r2,0(r3)
    return 0;
    b1dc:	0005883a 	mov	r2,zero
  }
}
    b1e0:	e037883a 	mov	sp,fp
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	df000017 	ldw	fp,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b1f4:	defffc04 	addi	sp,sp,-16
    b1f8:	df000315 	stw	fp,12(sp)
    b1fc:	df000304 	addi	fp,sp,12
    b200:	e13ffd15 	stw	r4,-12(fp)
    b204:	e17ffe15 	stw	r5,-8(fp)
    b208:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b20c:	e0fffe17 	ldw	r3,-8(fp)
    b210:	e0bffd17 	ldw	r2,-12(fp)
    b214:	18800c26 	beq	r3,r2,b248 <alt_load_section+0x54>
  {
    while( to != end )
    b218:	00000806 	br	b23c <alt_load_section+0x48>
    {
      *to++ = *from++;
    b21c:	e0bffe17 	ldw	r2,-8(fp)
    b220:	10c00104 	addi	r3,r2,4
    b224:	e0fffe15 	stw	r3,-8(fp)
    b228:	e0fffd17 	ldw	r3,-12(fp)
    b22c:	19000104 	addi	r4,r3,4
    b230:	e13ffd15 	stw	r4,-12(fp)
    b234:	18c00017 	ldw	r3,0(r3)
    b238:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b23c:	e0fffe17 	ldw	r3,-8(fp)
    b240:	e0bfff17 	ldw	r2,-4(fp)
    b244:	18bff51e 	bne	r3,r2,b21c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b248:	0001883a 	nop
    b24c:	e037883a 	mov	sp,fp
    b250:	df000017 	ldw	fp,0(sp)
    b254:	dec00104 	addi	sp,sp,4
    b258:	f800283a 	ret

0000b25c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b25c:	defffe04 	addi	sp,sp,-8
    b260:	dfc00115 	stw	ra,4(sp)
    b264:	df000015 	stw	fp,0(sp)
    b268:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b26c:	01800074 	movhi	r6,1
    b270:	31b48c04 	addi	r6,r6,-11728
    b274:	01400074 	movhi	r5,1
    b278:	29720104 	addi	r5,r5,-14332
    b27c:	01000074 	movhi	r4,1
    b280:	21348c04 	addi	r4,r4,-11728
    b284:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b288:	01800074 	movhi	r6,1
    b28c:	31a00804 	addi	r6,r6,-32736
    b290:	01400074 	movhi	r5,1
    b294:	29600804 	addi	r5,r5,-32736
    b298:	01000074 	movhi	r4,1
    b29c:	21200804 	addi	r4,r4,-32736
    b2a0:	000b1f40 	call	b1f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b2a4:	01800074 	movhi	r6,1
    b2a8:	31b20104 	addi	r6,r6,-14332
    b2ac:	01400074 	movhi	r5,1
    b2b0:	2971ed04 	addi	r5,r5,-14412
    b2b4:	01000074 	movhi	r4,1
    b2b8:	2131ed04 	addi	r4,r4,-14412
    b2bc:	000b1f40 	call	b1f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b2c0:	000bb8c0 	call	bb8c <alt_dcache_flush_all>
  alt_icache_flush_all();
    b2c4:	000bd600 	call	bd60 <alt_icache_flush_all>
}
    b2c8:	0001883a 	nop
    b2cc:	e037883a 	mov	sp,fp
    b2d0:	dfc00117 	ldw	ra,4(sp)
    b2d4:	df000017 	ldw	fp,0(sp)
    b2d8:	dec00204 	addi	sp,sp,8
    b2dc:	f800283a 	ret

0000b2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b2e0:	defffe04 	addi	sp,sp,-8
    b2e4:	dfc00115 	stw	ra,4(sp)
    b2e8:	df000015 	stw	fp,0(sp)
    b2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b2f0:	00800074 	movhi	r2,1
    b2f4:	10b48a04 	addi	r2,r2,-11736
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	10000526 	beq	r2,zero,b314 <alt_get_errno+0x34>
    b300:	00800074 	movhi	r2,1
    b304:	10b48a04 	addi	r2,r2,-11736
    b308:	10800017 	ldw	r2,0(r2)
    b30c:	103ee83a 	callr	r2
    b310:	00000206 	br	b31c <alt_get_errno+0x3c>
    b314:	00800074 	movhi	r2,1
    b318:	10b71a04 	addi	r2,r2,-9112
}
    b31c:	e037883a 	mov	sp,fp
    b320:	dfc00117 	ldw	ra,4(sp)
    b324:	df000017 	ldw	fp,0(sp)
    b328:	dec00204 	addi	sp,sp,8
    b32c:	f800283a 	ret

0000b330 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b330:	defff904 	addi	sp,sp,-28
    b334:	dfc00615 	stw	ra,24(sp)
    b338:	df000515 	stw	fp,20(sp)
    b33c:	df000504 	addi	fp,sp,20
    b340:	e13ffd15 	stw	r4,-12(fp)
    b344:	e17ffe15 	stw	r5,-8(fp)
    b348:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b34c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b350:	e0bffd17 	ldw	r2,-12(fp)
    b354:	10000816 	blt	r2,zero,b378 <lseek+0x48>
    b358:	01400304 	movi	r5,12
    b35c:	e13ffd17 	ldw	r4,-12(fp)
    b360:	000ae740 	call	ae74 <__mulsi3>
    b364:	1007883a 	mov	r3,r2
    b368:	00800074 	movhi	r2,1
    b36c:	10b41604 	addi	r2,r2,-12200
    b370:	1885883a 	add	r2,r3,r2
    b374:	00000106 	br	b37c <lseek+0x4c>
    b378:	0005883a 	mov	r2,zero
    b37c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b380:	e0bffc17 	ldw	r2,-16(fp)
    b384:	10001026 	beq	r2,zero,b3c8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b388:	e0bffc17 	ldw	r2,-16(fp)
    b38c:	10800017 	ldw	r2,0(r2)
    b390:	10800717 	ldw	r2,28(r2)
    b394:	10000926 	beq	r2,zero,b3bc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b398:	e0bffc17 	ldw	r2,-16(fp)
    b39c:	10800017 	ldw	r2,0(r2)
    b3a0:	10800717 	ldw	r2,28(r2)
    b3a4:	e1bfff17 	ldw	r6,-4(fp)
    b3a8:	e17ffe17 	ldw	r5,-8(fp)
    b3ac:	e13ffc17 	ldw	r4,-16(fp)
    b3b0:	103ee83a 	callr	r2
    b3b4:	e0bffb15 	stw	r2,-20(fp)
    b3b8:	00000506 	br	b3d0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b3bc:	00bfde84 	movi	r2,-134
    b3c0:	e0bffb15 	stw	r2,-20(fp)
    b3c4:	00000206 	br	b3d0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b3c8:	00bfebc4 	movi	r2,-81
    b3cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b3d0:	e0bffb17 	ldw	r2,-20(fp)
    b3d4:	1000070e 	bge	r2,zero,b3f4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    b3d8:	000b2e00 	call	b2e0 <alt_get_errno>
    b3dc:	1007883a 	mov	r3,r2
    b3e0:	e0bffb17 	ldw	r2,-20(fp)
    b3e4:	0085c83a 	sub	r2,zero,r2
    b3e8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b3ec:	00bfffc4 	movi	r2,-1
    b3f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b3f4:	e0bffb17 	ldw	r2,-20(fp)
}
    b3f8:	e037883a 	mov	sp,fp
    b3fc:	dfc00117 	ldw	ra,4(sp)
    b400:	df000017 	ldw	fp,0(sp)
    b404:	dec00204 	addi	sp,sp,8
    b408:	f800283a 	ret

0000b40c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b40c:	defffd04 	addi	sp,sp,-12
    b410:	dfc00215 	stw	ra,8(sp)
    b414:	df000115 	stw	fp,4(sp)
    b418:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b41c:	0009883a 	mov	r4,zero
    b420:	000b8e00 	call	b8e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b424:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b428:	000b9180 	call	b918 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b42c:	01800074 	movhi	r6,1
    b430:	31b1f704 	addi	r6,r6,-14372
    b434:	01400074 	movhi	r5,1
    b438:	2971f704 	addi	r5,r5,-14372
    b43c:	01000074 	movhi	r4,1
    b440:	2131f704 	addi	r4,r4,-14372
    b444:	000be640 	call	be64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b448:	000bca00 	call	bca0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b44c:	01000074 	movhi	r4,1
    b450:	212f4004 	addi	r4,r4,-17152
    b454:	000c4200 	call	c420 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b458:	d0a29a17 	ldw	r2,-30104(gp)
    b45c:	d0e29b17 	ldw	r3,-30100(gp)
    b460:	d1229c17 	ldw	r4,-30096(gp)
    b464:	200d883a 	mov	r6,r4
    b468:	180b883a 	mov	r5,r3
    b46c:	1009883a 	mov	r4,r2
    b470:	000805c0 	call	805c <main>
    b474:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b478:	01000044 	movi	r4,1
    b47c:	000aeec0 	call	aeec <close>
  exit (result);
    b480:	e13fff17 	ldw	r4,-4(fp)
    b484:	000c4340 	call	c434 <exit>

0000b488 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b488:	defffe04 	addi	sp,sp,-8
    b48c:	df000115 	stw	fp,4(sp)
    b490:	df000104 	addi	fp,sp,4
    b494:	e13fff15 	stw	r4,-4(fp)
}
    b498:	0001883a 	nop
    b49c:	e037883a 	mov	sp,fp
    b4a0:	df000017 	ldw	fp,0(sp)
    b4a4:	dec00104 	addi	sp,sp,4
    b4a8:	f800283a 	ret

0000b4ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b4ac:	defffe04 	addi	sp,sp,-8
    b4b0:	df000115 	stw	fp,4(sp)
    b4b4:	df000104 	addi	fp,sp,4
    b4b8:	e13fff15 	stw	r4,-4(fp)
}
    b4bc:	0001883a 	nop
    b4c0:	e037883a 	mov	sp,fp
    b4c4:	df000017 	ldw	fp,0(sp)
    b4c8:	dec00104 	addi	sp,sp,4
    b4cc:	f800283a 	ret

0000b4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b4d0:	defffe04 	addi	sp,sp,-8
    b4d4:	dfc00115 	stw	ra,4(sp)
    b4d8:	df000015 	stw	fp,0(sp)
    b4dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b4e0:	00800074 	movhi	r2,1
    b4e4:	10b48a04 	addi	r2,r2,-11736
    b4e8:	10800017 	ldw	r2,0(r2)
    b4ec:	10000526 	beq	r2,zero,b504 <alt_get_errno+0x34>
    b4f0:	00800074 	movhi	r2,1
    b4f4:	10b48a04 	addi	r2,r2,-11736
    b4f8:	10800017 	ldw	r2,0(r2)
    b4fc:	103ee83a 	callr	r2
    b500:	00000206 	br	b50c <alt_get_errno+0x3c>
    b504:	00800074 	movhi	r2,1
    b508:	10b71a04 	addi	r2,r2,-9112
}
    b50c:	e037883a 	mov	sp,fp
    b510:	dfc00117 	ldw	ra,4(sp)
    b514:	df000017 	ldw	fp,0(sp)
    b518:	dec00204 	addi	sp,sp,8
    b51c:	f800283a 	ret

0000b520 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b520:	defff904 	addi	sp,sp,-28
    b524:	dfc00615 	stw	ra,24(sp)
    b528:	df000515 	stw	fp,20(sp)
    b52c:	df000504 	addi	fp,sp,20
    b530:	e13ffd15 	stw	r4,-12(fp)
    b534:	e17ffe15 	stw	r5,-8(fp)
    b538:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b53c:	e0bffd17 	ldw	r2,-12(fp)
    b540:	10000816 	blt	r2,zero,b564 <read+0x44>
    b544:	01400304 	movi	r5,12
    b548:	e13ffd17 	ldw	r4,-12(fp)
    b54c:	000ae740 	call	ae74 <__mulsi3>
    b550:	1007883a 	mov	r3,r2
    b554:	00800074 	movhi	r2,1
    b558:	10b41604 	addi	r2,r2,-12200
    b55c:	1885883a 	add	r2,r3,r2
    b560:	00000106 	br	b568 <read+0x48>
    b564:	0005883a 	mov	r2,zero
    b568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b56c:	e0bffb17 	ldw	r2,-20(fp)
    b570:	10002226 	beq	r2,zero,b5fc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b574:	e0bffb17 	ldw	r2,-20(fp)
    b578:	10800217 	ldw	r2,8(r2)
    b57c:	108000cc 	andi	r2,r2,3
    b580:	10800060 	cmpeqi	r2,r2,1
    b584:	1000181e 	bne	r2,zero,b5e8 <read+0xc8>
        (fd->dev->read))
    b588:	e0bffb17 	ldw	r2,-20(fp)
    b58c:	10800017 	ldw	r2,0(r2)
    b590:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b594:	10001426 	beq	r2,zero,b5e8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b598:	e0bffb17 	ldw	r2,-20(fp)
    b59c:	10800017 	ldw	r2,0(r2)
    b5a0:	10800517 	ldw	r2,20(r2)
    b5a4:	e0ffff17 	ldw	r3,-4(fp)
    b5a8:	180d883a 	mov	r6,r3
    b5ac:	e17ffe17 	ldw	r5,-8(fp)
    b5b0:	e13ffb17 	ldw	r4,-20(fp)
    b5b4:	103ee83a 	callr	r2
    b5b8:	e0bffc15 	stw	r2,-16(fp)
    b5bc:	e0bffc17 	ldw	r2,-16(fp)
    b5c0:	1000070e 	bge	r2,zero,b5e0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    b5c4:	000b4d00 	call	b4d0 <alt_get_errno>
    b5c8:	1007883a 	mov	r3,r2
    b5cc:	e0bffc17 	ldw	r2,-16(fp)
    b5d0:	0085c83a 	sub	r2,zero,r2
    b5d4:	18800015 	stw	r2,0(r3)
          return -1;
    b5d8:	00bfffc4 	movi	r2,-1
    b5dc:	00000c06 	br	b610 <read+0xf0>
        }
        return rval;
    b5e0:	e0bffc17 	ldw	r2,-16(fp)
    b5e4:	00000a06 	br	b610 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b5e8:	000b4d00 	call	b4d0 <alt_get_errno>
    b5ec:	1007883a 	mov	r3,r2
    b5f0:	00800344 	movi	r2,13
    b5f4:	18800015 	stw	r2,0(r3)
    b5f8:	00000406 	br	b60c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b5fc:	000b4d00 	call	b4d0 <alt_get_errno>
    b600:	1007883a 	mov	r3,r2
    b604:	00801444 	movi	r2,81
    b608:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b60c:	00bfffc4 	movi	r2,-1
}
    b610:	e037883a 	mov	sp,fp
    b614:	dfc00117 	ldw	ra,4(sp)
    b618:	df000017 	ldw	fp,0(sp)
    b61c:	dec00204 	addi	sp,sp,8
    b620:	f800283a 	ret

0000b624 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b624:	defffc04 	addi	sp,sp,-16
    b628:	dfc00315 	stw	ra,12(sp)
    b62c:	df000215 	stw	fp,8(sp)
    b630:	dc000115 	stw	r16,4(sp)
    b634:	df000204 	addi	fp,sp,8
    b638:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    b63c:	e0bffe17 	ldw	r2,-8(fp)
    b640:	108000d0 	cmplti	r2,r2,3
    b644:	1000111e 	bne	r2,zero,b68c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b648:	04000074 	movhi	r16,1
    b64c:	84341604 	addi	r16,r16,-12200
    b650:	e0bffe17 	ldw	r2,-8(fp)
    b654:	01400304 	movi	r5,12
    b658:	1009883a 	mov	r4,r2
    b65c:	000ae740 	call	ae74 <__mulsi3>
    b660:	8085883a 	add	r2,r16,r2
    b664:	10800204 	addi	r2,r2,8
    b668:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b66c:	04000074 	movhi	r16,1
    b670:	84341604 	addi	r16,r16,-12200
    b674:	e0bffe17 	ldw	r2,-8(fp)
    b678:	01400304 	movi	r5,12
    b67c:	1009883a 	mov	r4,r2
    b680:	000ae740 	call	ae74 <__mulsi3>
    b684:	8085883a 	add	r2,r16,r2
    b688:	10000015 	stw	zero,0(r2)
  }
}
    b68c:	0001883a 	nop
    b690:	e6ffff04 	addi	sp,fp,-4
    b694:	dfc00217 	ldw	ra,8(sp)
    b698:	df000117 	ldw	fp,4(sp)
    b69c:	dc000017 	ldw	r16,0(sp)
    b6a0:	dec00304 	addi	sp,sp,12
    b6a4:	f800283a 	ret

0000b6a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b6a8:	defff904 	addi	sp,sp,-28
    b6ac:	df000615 	stw	fp,24(sp)
    b6b0:	df000604 	addi	fp,sp,24
    b6b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6b8:	0005303a 	rdctl	r2,status
    b6bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6c0:	e0fffe17 	ldw	r3,-8(fp)
    b6c4:	00bfff84 	movi	r2,-2
    b6c8:	1884703a 	and	r2,r3,r2
    b6cc:	1001703a 	wrctl	status,r2
  
  return context;
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b6d4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b6d8:	d0a00a17 	ldw	r2,-32728(gp)
    b6dc:	10c000c4 	addi	r3,r2,3
    b6e0:	00bfff04 	movi	r2,-4
    b6e4:	1884703a 	and	r2,r3,r2
    b6e8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b6ec:	d0e00a17 	ldw	r3,-32728(gp)
    b6f0:	e0bfff17 	ldw	r2,-4(fp)
    b6f4:	1887883a 	add	r3,r3,r2
    b6f8:	00800074 	movhi	r2,1
    b6fc:	10800004 	addi	r2,r2,0
    b700:	10c0062e 	bgeu	r2,r3,b71c <sbrk+0x74>
    b704:	e0bffb17 	ldw	r2,-20(fp)
    b708:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b70c:	e0bffa17 	ldw	r2,-24(fp)
    b710:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b714:	00bfffc4 	movi	r2,-1
    b718:	00000b06 	br	b748 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b71c:	d0a00a17 	ldw	r2,-32728(gp)
    b720:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    b724:	d0e00a17 	ldw	r3,-32728(gp)
    b728:	e0bfff17 	ldw	r2,-4(fp)
    b72c:	1885883a 	add	r2,r3,r2
    b730:	d0a00a15 	stw	r2,-32728(gp)
    b734:	e0bffb17 	ldw	r2,-20(fp)
    b738:	e0bffc15 	stw	r2,-16(fp)
    b73c:	e0bffc17 	ldw	r2,-16(fp)
    b740:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b744:	e0bffd17 	ldw	r2,-12(fp)
} 
    b748:	e037883a 	mov	sp,fp
    b74c:	df000017 	ldw	fp,0(sp)
    b750:	dec00104 	addi	sp,sp,4
    b754:	f800283a 	ret

0000b758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b758:	defffe04 	addi	sp,sp,-8
    b75c:	dfc00115 	stw	ra,4(sp)
    b760:	df000015 	stw	fp,0(sp)
    b764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b768:	00800074 	movhi	r2,1
    b76c:	10b48a04 	addi	r2,r2,-11736
    b770:	10800017 	ldw	r2,0(r2)
    b774:	10000526 	beq	r2,zero,b78c <alt_get_errno+0x34>
    b778:	00800074 	movhi	r2,1
    b77c:	10b48a04 	addi	r2,r2,-11736
    b780:	10800017 	ldw	r2,0(r2)
    b784:	103ee83a 	callr	r2
    b788:	00000206 	br	b794 <alt_get_errno+0x3c>
    b78c:	00800074 	movhi	r2,1
    b790:	10b71a04 	addi	r2,r2,-9112
}
    b794:	e037883a 	mov	sp,fp
    b798:	dfc00117 	ldw	ra,4(sp)
    b79c:	df000017 	ldw	fp,0(sp)
    b7a0:	dec00204 	addi	sp,sp,8
    b7a4:	f800283a 	ret

0000b7a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b7a8:	defff904 	addi	sp,sp,-28
    b7ac:	dfc00615 	stw	ra,24(sp)
    b7b0:	df000515 	stw	fp,20(sp)
    b7b4:	df000504 	addi	fp,sp,20
    b7b8:	e13ffd15 	stw	r4,-12(fp)
    b7bc:	e17ffe15 	stw	r5,-8(fp)
    b7c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7c4:	e0bffd17 	ldw	r2,-12(fp)
    b7c8:	10000816 	blt	r2,zero,b7ec <write+0x44>
    b7cc:	01400304 	movi	r5,12
    b7d0:	e13ffd17 	ldw	r4,-12(fp)
    b7d4:	000ae740 	call	ae74 <__mulsi3>
    b7d8:	1007883a 	mov	r3,r2
    b7dc:	00800074 	movhi	r2,1
    b7e0:	10b41604 	addi	r2,r2,-12200
    b7e4:	1885883a 	add	r2,r3,r2
    b7e8:	00000106 	br	b7f0 <write+0x48>
    b7ec:	0005883a 	mov	r2,zero
    b7f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b7f4:	e0bffb17 	ldw	r2,-20(fp)
    b7f8:	10002126 	beq	r2,zero,b880 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b7fc:	e0bffb17 	ldw	r2,-20(fp)
    b800:	10800217 	ldw	r2,8(r2)
    b804:	108000cc 	andi	r2,r2,3
    b808:	10001826 	beq	r2,zero,b86c <write+0xc4>
    b80c:	e0bffb17 	ldw	r2,-20(fp)
    b810:	10800017 	ldw	r2,0(r2)
    b814:	10800617 	ldw	r2,24(r2)
    b818:	10001426 	beq	r2,zero,b86c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b81c:	e0bffb17 	ldw	r2,-20(fp)
    b820:	10800017 	ldw	r2,0(r2)
    b824:	10800617 	ldw	r2,24(r2)
    b828:	e0ffff17 	ldw	r3,-4(fp)
    b82c:	180d883a 	mov	r6,r3
    b830:	e17ffe17 	ldw	r5,-8(fp)
    b834:	e13ffb17 	ldw	r4,-20(fp)
    b838:	103ee83a 	callr	r2
    b83c:	e0bffc15 	stw	r2,-16(fp)
    b840:	e0bffc17 	ldw	r2,-16(fp)
    b844:	1000070e 	bge	r2,zero,b864 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    b848:	000b7580 	call	b758 <alt_get_errno>
    b84c:	1007883a 	mov	r3,r2
    b850:	e0bffc17 	ldw	r2,-16(fp)
    b854:	0085c83a 	sub	r2,zero,r2
    b858:	18800015 	stw	r2,0(r3)
        return -1;
    b85c:	00bfffc4 	movi	r2,-1
    b860:	00000c06 	br	b894 <write+0xec>
      }
      return rval;
    b864:	e0bffc17 	ldw	r2,-16(fp)
    b868:	00000a06 	br	b894 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b86c:	000b7580 	call	b758 <alt_get_errno>
    b870:	1007883a 	mov	r3,r2
    b874:	00800344 	movi	r2,13
    b878:	18800015 	stw	r2,0(r3)
    b87c:	00000406 	br	b890 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b880:	000b7580 	call	b758 <alt_get_errno>
    b884:	1007883a 	mov	r3,r2
    b888:	00801444 	movi	r2,81
    b88c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b890:	00bfffc4 	movi	r2,-1
}
    b894:	e037883a 	mov	sp,fp
    b898:	dfc00117 	ldw	ra,4(sp)
    b89c:	df000017 	ldw	fp,0(sp)
    b8a0:	dec00204 	addi	sp,sp,8
    b8a4:	f800283a 	ret

0000b8a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b8a8:	defffd04 	addi	sp,sp,-12
    b8ac:	dfc00215 	stw	ra,8(sp)
    b8b0:	df000115 	stw	fp,4(sp)
    b8b4:	df000104 	addi	fp,sp,4
    b8b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b8bc:	01400074 	movhi	r5,1
    b8c0:	29748704 	addi	r5,r5,-11748
    b8c4:	e13fff17 	ldw	r4,-4(fp)
    b8c8:	000bbfc0 	call	bbfc <alt_dev_llist_insert>
}
    b8cc:	e037883a 	mov	sp,fp
    b8d0:	dfc00117 	ldw	ra,4(sp)
    b8d4:	df000017 	ldw	fp,0(sp)
    b8d8:	dec00204 	addi	sp,sp,8
    b8dc:	f800283a 	ret

0000b8e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b8e0:	defffd04 	addi	sp,sp,-12
    b8e4:	dfc00215 	stw	ra,8(sp)
    b8e8:	df000115 	stw	fp,4(sp)
    b8ec:	df000104 	addi	fp,sp,4
    b8f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b8f4:	000c1840 	call	c184 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b8f8:	00800044 	movi	r2,1
    b8fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b900:	0001883a 	nop
    b904:	e037883a 	mov	sp,fp
    b908:	dfc00117 	ldw	ra,4(sp)
    b90c:	df000017 	ldw	fp,0(sp)
    b910:	dec00204 	addi	sp,sp,8
    b914:	f800283a 	ret

0000b918 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b918:	defffe04 	addi	sp,sp,-8
    b91c:	dfc00115 	stw	ra,4(sp)
    b920:	df000015 	stw	fp,0(sp)
    b924:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b928:	01000074 	movhi	r4,1
    b92c:	21347604 	addi	r4,r4,-11816
    b930:	000b8a80 	call	b8a8 <alt_dev_reg>
}
    b934:	0001883a 	nop
    b938:	e037883a 	mov	sp,fp
    b93c:	dfc00117 	ldw	ra,4(sp)
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00204 	addi	sp,sp,8
    b948:	f800283a 	ret

0000b94c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b94c:	defffa04 	addi	sp,sp,-24
    b950:	dfc00515 	stw	ra,20(sp)
    b954:	df000415 	stw	fp,16(sp)
    b958:	df000404 	addi	fp,sp,16
    b95c:	e13ffd15 	stw	r4,-12(fp)
    b960:	e17ffe15 	stw	r5,-8(fp)
    b964:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b968:	e0bffd17 	ldw	r2,-12(fp)
    b96c:	10800017 	ldw	r2,0(r2)
    b970:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b974:	e0bffc17 	ldw	r2,-16(fp)
    b978:	10c00a04 	addi	r3,r2,40
    b97c:	e0bffd17 	ldw	r2,-12(fp)
    b980:	10800217 	ldw	r2,8(r2)
    b984:	100f883a 	mov	r7,r2
    b988:	e1bfff17 	ldw	r6,-4(fp)
    b98c:	e17ffe17 	ldw	r5,-8(fp)
    b990:	1809883a 	mov	r4,r3
    b994:	000ba0c0 	call	ba0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b998:	e037883a 	mov	sp,fp
    b99c:	dfc00117 	ldw	ra,4(sp)
    b9a0:	df000017 	ldw	fp,0(sp)
    b9a4:	dec00204 	addi	sp,sp,8
    b9a8:	f800283a 	ret

0000b9ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b9ac:	defffa04 	addi	sp,sp,-24
    b9b0:	dfc00515 	stw	ra,20(sp)
    b9b4:	df000415 	stw	fp,16(sp)
    b9b8:	df000404 	addi	fp,sp,16
    b9bc:	e13ffd15 	stw	r4,-12(fp)
    b9c0:	e17ffe15 	stw	r5,-8(fp)
    b9c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b9c8:	e0bffd17 	ldw	r2,-12(fp)
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b9d4:	e0bffc17 	ldw	r2,-16(fp)
    b9d8:	10c00a04 	addi	r3,r2,40
    b9dc:	e0bffd17 	ldw	r2,-12(fp)
    b9e0:	10800217 	ldw	r2,8(r2)
    b9e4:	100f883a 	mov	r7,r2
    b9e8:	e1bfff17 	ldw	r6,-4(fp)
    b9ec:	e17ffe17 	ldw	r5,-8(fp)
    b9f0:	1809883a 	mov	r4,r3
    b9f4:	000baf80 	call	baf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b9f8:	e037883a 	mov	sp,fp
    b9fc:	dfc00117 	ldw	ra,4(sp)
    ba00:	df000017 	ldw	fp,0(sp)
    ba04:	dec00204 	addi	sp,sp,8
    ba08:	f800283a 	ret

0000ba0c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    ba0c:	defff704 	addi	sp,sp,-36
    ba10:	df000815 	stw	fp,32(sp)
    ba14:	df000804 	addi	fp,sp,32
    ba18:	e13ffc15 	stw	r4,-16(fp)
    ba1c:	e17ffd15 	stw	r5,-12(fp)
    ba20:	e1bffe15 	stw	r6,-8(fp)
    ba24:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    ba28:	e0bffc17 	ldw	r2,-16(fp)
    ba2c:	10800017 	ldw	r2,0(r2)
    ba30:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    ba34:	e0bffd17 	ldw	r2,-12(fp)
    ba38:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    ba3c:	e0bffe17 	ldw	r2,-8(fp)
    ba40:	e0fffd17 	ldw	r3,-12(fp)
    ba44:	1885883a 	add	r2,r3,r2
    ba48:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    ba4c:	00001206 	br	ba98 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ba50:	e0bff917 	ldw	r2,-28(fp)
    ba54:	10800037 	ldwio	r2,0(r2)
    ba58:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    ba5c:	e0bffb17 	ldw	r2,-20(fp)
    ba60:	10a0000c 	andi	r2,r2,32768
    ba64:	10000626 	beq	r2,zero,ba80 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ba68:	e0bff817 	ldw	r2,-32(fp)
    ba6c:	10c00044 	addi	r3,r2,1
    ba70:	e0fff815 	stw	r3,-32(fp)
    ba74:	e0fffb17 	ldw	r3,-20(fp)
    ba78:	10c00005 	stb	r3,0(r2)
    ba7c:	00000606 	br	ba98 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    ba80:	e0fff817 	ldw	r3,-32(fp)
    ba84:	e0bffd17 	ldw	r2,-12(fp)
    ba88:	1880071e 	bne	r3,r2,baa8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    ba8c:	e0bfff17 	ldw	r2,-4(fp)
    ba90:	1090000c 	andi	r2,r2,16384
    ba94:	1000061e 	bne	r2,zero,bab0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    ba98:	e0fff817 	ldw	r3,-32(fp)
    ba9c:	e0bffa17 	ldw	r2,-24(fp)
    baa0:	18bfeb36 	bltu	r3,r2,ba50 <altera_avalon_jtag_uart_read+0x44>
    baa4:	00000306 	br	bab4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    baa8:	0001883a 	nop
    baac:	00000106 	br	bab4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    bab0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bab4:	e0fff817 	ldw	r3,-32(fp)
    bab8:	e0bffd17 	ldw	r2,-12(fp)
    babc:	18800426 	beq	r3,r2,bad0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    bac0:	e0fff817 	ldw	r3,-32(fp)
    bac4:	e0bffd17 	ldw	r2,-12(fp)
    bac8:	1885c83a 	sub	r2,r3,r2
    bacc:	00000606 	br	bae8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bad0:	e0bfff17 	ldw	r2,-4(fp)
    bad4:	1090000c 	andi	r2,r2,16384
    bad8:	10000226 	beq	r2,zero,bae4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    badc:	00bffd44 	movi	r2,-11
    bae0:	00000106 	br	bae8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    bae4:	00bffec4 	movi	r2,-5
}
    bae8:	e037883a 	mov	sp,fp
    baec:	df000017 	ldw	fp,0(sp)
    baf0:	dec00104 	addi	sp,sp,4
    baf4:	f800283a 	ret

0000baf8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    baf8:	defff904 	addi	sp,sp,-28
    bafc:	df000615 	stw	fp,24(sp)
    bb00:	df000604 	addi	fp,sp,24
    bb04:	e13ffc15 	stw	r4,-16(fp)
    bb08:	e17ffd15 	stw	r5,-12(fp)
    bb0c:	e1bffe15 	stw	r6,-8(fp)
    bb10:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bb14:	e0bffc17 	ldw	r2,-16(fp)
    bb18:	10800017 	ldw	r2,0(r2)
    bb1c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bb20:	e0bffe17 	ldw	r2,-8(fp)
    bb24:	e0fffd17 	ldw	r3,-12(fp)
    bb28:	1885883a 	add	r2,r3,r2
    bb2c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bb30:	00000e06 	br	bb6c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bb34:	e0bffa17 	ldw	r2,-24(fp)
    bb38:	10800104 	addi	r2,r2,4
    bb3c:	10800037 	ldwio	r2,0(r2)
    bb40:	10bfffec 	andhi	r2,r2,65535
    bb44:	10000926 	beq	r2,zero,bb6c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bb48:	e0fffa17 	ldw	r3,-24(fp)
    bb4c:	e0bffd17 	ldw	r2,-12(fp)
    bb50:	11000044 	addi	r4,r2,1
    bb54:	e13ffd15 	stw	r4,-12(fp)
    bb58:	10800003 	ldbu	r2,0(r2)
    bb5c:	10803fcc 	andi	r2,r2,255
    bb60:	1080201c 	xori	r2,r2,128
    bb64:	10bfe004 	addi	r2,r2,-128
    bb68:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bb6c:	e0fffd17 	ldw	r3,-12(fp)
    bb70:	e0bffb17 	ldw	r2,-20(fp)
    bb74:	18bfef36 	bltu	r3,r2,bb34 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bb78:	e0bffe17 	ldw	r2,-8(fp)
}
    bb7c:	e037883a 	mov	sp,fp
    bb80:	df000017 	ldw	fp,0(sp)
    bb84:	dec00104 	addi	sp,sp,4
    bb88:	f800283a 	ret

0000bb8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bb8c:	deffff04 	addi	sp,sp,-4
    bb90:	df000015 	stw	fp,0(sp)
    bb94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bb98:	0001883a 	nop
    bb9c:	e037883a 	mov	sp,fp
    bba0:	df000017 	ldw	fp,0(sp)
    bba4:	dec00104 	addi	sp,sp,4
    bba8:	f800283a 	ret

0000bbac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbac:	defffe04 	addi	sp,sp,-8
    bbb0:	dfc00115 	stw	ra,4(sp)
    bbb4:	df000015 	stw	fp,0(sp)
    bbb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bbbc:	00800074 	movhi	r2,1
    bbc0:	10b48a04 	addi	r2,r2,-11736
    bbc4:	10800017 	ldw	r2,0(r2)
    bbc8:	10000526 	beq	r2,zero,bbe0 <alt_get_errno+0x34>
    bbcc:	00800074 	movhi	r2,1
    bbd0:	10b48a04 	addi	r2,r2,-11736
    bbd4:	10800017 	ldw	r2,0(r2)
    bbd8:	103ee83a 	callr	r2
    bbdc:	00000206 	br	bbe8 <alt_get_errno+0x3c>
    bbe0:	00800074 	movhi	r2,1
    bbe4:	10b71a04 	addi	r2,r2,-9112
}
    bbe8:	e037883a 	mov	sp,fp
    bbec:	dfc00117 	ldw	ra,4(sp)
    bbf0:	df000017 	ldw	fp,0(sp)
    bbf4:	dec00204 	addi	sp,sp,8
    bbf8:	f800283a 	ret

0000bbfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bbfc:	defffa04 	addi	sp,sp,-24
    bc00:	dfc00515 	stw	ra,20(sp)
    bc04:	df000415 	stw	fp,16(sp)
    bc08:	df000404 	addi	fp,sp,16
    bc0c:	e13ffe15 	stw	r4,-8(fp)
    bc10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bc14:	e0bffe17 	ldw	r2,-8(fp)
    bc18:	10000326 	beq	r2,zero,bc28 <alt_dev_llist_insert+0x2c>
    bc1c:	e0bffe17 	ldw	r2,-8(fp)
    bc20:	10800217 	ldw	r2,8(r2)
    bc24:	1000061e 	bne	r2,zero,bc40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bc28:	000bbac0 	call	bbac <alt_get_errno>
    bc2c:	1007883a 	mov	r3,r2
    bc30:	00800584 	movi	r2,22
    bc34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bc38:	00bffa84 	movi	r2,-22
    bc3c:	00001306 	br	bc8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bc40:	e0bffe17 	ldw	r2,-8(fp)
    bc44:	e0ffff17 	ldw	r3,-4(fp)
    bc48:	e0fffc15 	stw	r3,-16(fp)
    bc4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bc50:	e0bffd17 	ldw	r2,-12(fp)
    bc54:	e0fffc17 	ldw	r3,-16(fp)
    bc58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bc5c:	e0bffc17 	ldw	r2,-16(fp)
    bc60:	10c00017 	ldw	r3,0(r2)
    bc64:	e0bffd17 	ldw	r2,-12(fp)
    bc68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bc6c:	e0bffc17 	ldw	r2,-16(fp)
    bc70:	10800017 	ldw	r2,0(r2)
    bc74:	e0fffd17 	ldw	r3,-12(fp)
    bc78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bc7c:	e0bffc17 	ldw	r2,-16(fp)
    bc80:	e0fffd17 	ldw	r3,-12(fp)
    bc84:	10c00015 	stw	r3,0(r2)

  return 0;  
    bc88:	0005883a 	mov	r2,zero
}
    bc8c:	e037883a 	mov	sp,fp
    bc90:	dfc00117 	ldw	ra,4(sp)
    bc94:	df000017 	ldw	fp,0(sp)
    bc98:	dec00204 	addi	sp,sp,8
    bc9c:	f800283a 	ret

0000bca0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bca0:	defffd04 	addi	sp,sp,-12
    bca4:	dfc00215 	stw	ra,8(sp)
    bca8:	df000115 	stw	fp,4(sp)
    bcac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bcb0:	00800074 	movhi	r2,1
    bcb4:	10b1ec04 	addi	r2,r2,-14416
    bcb8:	e0bfff15 	stw	r2,-4(fp)
    bcbc:	00000606 	br	bcd8 <_do_ctors+0x38>
        (*ctor) (); 
    bcc0:	e0bfff17 	ldw	r2,-4(fp)
    bcc4:	10800017 	ldw	r2,0(r2)
    bcc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bccc:	e0bfff17 	ldw	r2,-4(fp)
    bcd0:	10bfff04 	addi	r2,r2,-4
    bcd4:	e0bfff15 	stw	r2,-4(fp)
    bcd8:	e0ffff17 	ldw	r3,-4(fp)
    bcdc:	00800074 	movhi	r2,1
    bce0:	10b1ed04 	addi	r2,r2,-14412
    bce4:	18bff62e 	bgeu	r3,r2,bcc0 <_do_ctors+0x20>
        (*ctor) (); 
}
    bce8:	0001883a 	nop
    bcec:	e037883a 	mov	sp,fp
    bcf0:	dfc00117 	ldw	ra,4(sp)
    bcf4:	df000017 	ldw	fp,0(sp)
    bcf8:	dec00204 	addi	sp,sp,8
    bcfc:	f800283a 	ret

0000bd00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bd00:	defffd04 	addi	sp,sp,-12
    bd04:	dfc00215 	stw	ra,8(sp)
    bd08:	df000115 	stw	fp,4(sp)
    bd0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bd10:	00800074 	movhi	r2,1
    bd14:	10b1ec04 	addi	r2,r2,-14416
    bd18:	e0bfff15 	stw	r2,-4(fp)
    bd1c:	00000606 	br	bd38 <_do_dtors+0x38>
        (*dtor) (); 
    bd20:	e0bfff17 	ldw	r2,-4(fp)
    bd24:	10800017 	ldw	r2,0(r2)
    bd28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bd2c:	e0bfff17 	ldw	r2,-4(fp)
    bd30:	10bfff04 	addi	r2,r2,-4
    bd34:	e0bfff15 	stw	r2,-4(fp)
    bd38:	e0ffff17 	ldw	r3,-4(fp)
    bd3c:	00800074 	movhi	r2,1
    bd40:	10b1ed04 	addi	r2,r2,-14412
    bd44:	18bff62e 	bgeu	r3,r2,bd20 <_do_dtors+0x20>
        (*dtor) (); 
}
    bd48:	0001883a 	nop
    bd4c:	e037883a 	mov	sp,fp
    bd50:	dfc00117 	ldw	ra,4(sp)
    bd54:	df000017 	ldw	fp,0(sp)
    bd58:	dec00204 	addi	sp,sp,8
    bd5c:	f800283a 	ret

0000bd60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bd60:	deffff04 	addi	sp,sp,-4
    bd64:	df000015 	stw	fp,0(sp)
    bd68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    bd6c:	0001883a 	nop
    bd70:	e037883a 	mov	sp,fp
    bd74:	df000017 	ldw	fp,0(sp)
    bd78:	dec00104 	addi	sp,sp,4
    bd7c:	f800283a 	ret

0000bd80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bd80:	defff804 	addi	sp,sp,-32
    bd84:	dfc00715 	stw	ra,28(sp)
    bd88:	df000615 	stw	fp,24(sp)
    bd8c:	dc000515 	stw	r16,20(sp)
    bd90:	df000604 	addi	fp,sp,24
    bd94:	e13ffb15 	stw	r4,-20(fp)
    bd98:	e17ffc15 	stw	r5,-16(fp)
    bd9c:	e1bffd15 	stw	r6,-12(fp)
    bda0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    bda4:	e1bffe17 	ldw	r6,-8(fp)
    bda8:	e17ffd17 	ldw	r5,-12(fp)
    bdac:	e13ffc17 	ldw	r4,-16(fp)
    bdb0:	000c0240 	call	c024 <open>
    bdb4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    bdb8:	e0bffa17 	ldw	r2,-24(fp)
    bdbc:	10002216 	blt	r2,zero,be48 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bdc0:	04000074 	movhi	r16,1
    bdc4:	84341604 	addi	r16,r16,-12200
    bdc8:	e0bffa17 	ldw	r2,-24(fp)
    bdcc:	01400304 	movi	r5,12
    bdd0:	1009883a 	mov	r4,r2
    bdd4:	000ae740 	call	ae74 <__mulsi3>
    bdd8:	8085883a 	add	r2,r16,r2
    bddc:	10c00017 	ldw	r3,0(r2)
    bde0:	e0bffb17 	ldw	r2,-20(fp)
    bde4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bde8:	04000074 	movhi	r16,1
    bdec:	84341604 	addi	r16,r16,-12200
    bdf0:	e0bffa17 	ldw	r2,-24(fp)
    bdf4:	01400304 	movi	r5,12
    bdf8:	1009883a 	mov	r4,r2
    bdfc:	000ae740 	call	ae74 <__mulsi3>
    be00:	8085883a 	add	r2,r16,r2
    be04:	10800104 	addi	r2,r2,4
    be08:	10c00017 	ldw	r3,0(r2)
    be0c:	e0bffb17 	ldw	r2,-20(fp)
    be10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    be14:	04000074 	movhi	r16,1
    be18:	84341604 	addi	r16,r16,-12200
    be1c:	e0bffa17 	ldw	r2,-24(fp)
    be20:	01400304 	movi	r5,12
    be24:	1009883a 	mov	r4,r2
    be28:	000ae740 	call	ae74 <__mulsi3>
    be2c:	8085883a 	add	r2,r16,r2
    be30:	10800204 	addi	r2,r2,8
    be34:	10c00017 	ldw	r3,0(r2)
    be38:	e0bffb17 	ldw	r2,-20(fp)
    be3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    be40:	e13ffa17 	ldw	r4,-24(fp)
    be44:	000b6240 	call	b624 <alt_release_fd>
  }
} 
    be48:	0001883a 	nop
    be4c:	e6ffff04 	addi	sp,fp,-4
    be50:	dfc00217 	ldw	ra,8(sp)
    be54:	df000117 	ldw	fp,4(sp)
    be58:	dc000017 	ldw	r16,0(sp)
    be5c:	dec00304 	addi	sp,sp,12
    be60:	f800283a 	ret

0000be64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    be64:	defffb04 	addi	sp,sp,-20
    be68:	dfc00415 	stw	ra,16(sp)
    be6c:	df000315 	stw	fp,12(sp)
    be70:	df000304 	addi	fp,sp,12
    be74:	e13ffd15 	stw	r4,-12(fp)
    be78:	e17ffe15 	stw	r5,-8(fp)
    be7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    be80:	01c07fc4 	movi	r7,511
    be84:	01800044 	movi	r6,1
    be88:	e17ffd17 	ldw	r5,-12(fp)
    be8c:	01000074 	movhi	r4,1
    be90:	21341904 	addi	r4,r4,-12188
    be94:	000bd800 	call	bd80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    be98:	01c07fc4 	movi	r7,511
    be9c:	000d883a 	mov	r6,zero
    bea0:	e17ffe17 	ldw	r5,-8(fp)
    bea4:	01000074 	movhi	r4,1
    bea8:	21341604 	addi	r4,r4,-12200
    beac:	000bd800 	call	bd80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    beb0:	01c07fc4 	movi	r7,511
    beb4:	01800044 	movi	r6,1
    beb8:	e17fff17 	ldw	r5,-4(fp)
    bebc:	01000074 	movhi	r4,1
    bec0:	21341c04 	addi	r4,r4,-12176
    bec4:	000bd800 	call	bd80 <alt_open_fd>
}  
    bec8:	0001883a 	nop
    becc:	e037883a 	mov	sp,fp
    bed0:	dfc00117 	ldw	ra,4(sp)
    bed4:	df000017 	ldw	fp,0(sp)
    bed8:	dec00204 	addi	sp,sp,8
    bedc:	f800283a 	ret

0000bee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bee0:	defffe04 	addi	sp,sp,-8
    bee4:	dfc00115 	stw	ra,4(sp)
    bee8:	df000015 	stw	fp,0(sp)
    beec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bef0:	00800074 	movhi	r2,1
    bef4:	10b48a04 	addi	r2,r2,-11736
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	10000526 	beq	r2,zero,bf14 <alt_get_errno+0x34>
    bf00:	00800074 	movhi	r2,1
    bf04:	10b48a04 	addi	r2,r2,-11736
    bf08:	10800017 	ldw	r2,0(r2)
    bf0c:	103ee83a 	callr	r2
    bf10:	00000206 	br	bf1c <alt_get_errno+0x3c>
    bf14:	00800074 	movhi	r2,1
    bf18:	10b71a04 	addi	r2,r2,-9112
}
    bf1c:	e037883a 	mov	sp,fp
    bf20:	dfc00117 	ldw	ra,4(sp)
    bf24:	df000017 	ldw	fp,0(sp)
    bf28:	dec00204 	addi	sp,sp,8
    bf2c:	f800283a 	ret

0000bf30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bf30:	defffb04 	addi	sp,sp,-20
    bf34:	dfc00415 	stw	ra,16(sp)
    bf38:	df000315 	stw	fp,12(sp)
    bf3c:	dc000215 	stw	r16,8(sp)
    bf40:	df000304 	addi	fp,sp,12
    bf44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bf48:	e0bffe17 	ldw	r2,-8(fp)
    bf4c:	10800217 	ldw	r2,8(r2)
    bf50:	10d00034 	orhi	r3,r2,16384
    bf54:	e0bffe17 	ldw	r2,-8(fp)
    bf58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bf5c:	e03ffd15 	stw	zero,-12(fp)
    bf60:	00002306 	br	bff0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bf64:	04000074 	movhi	r16,1
    bf68:	84341604 	addi	r16,r16,-12200
    bf6c:	e0bffd17 	ldw	r2,-12(fp)
    bf70:	01400304 	movi	r5,12
    bf74:	1009883a 	mov	r4,r2
    bf78:	000ae740 	call	ae74 <__mulsi3>
    bf7c:	8085883a 	add	r2,r16,r2
    bf80:	10c00017 	ldw	r3,0(r2)
    bf84:	e0bffe17 	ldw	r2,-8(fp)
    bf88:	10800017 	ldw	r2,0(r2)
    bf8c:	1880151e 	bne	r3,r2,bfe4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bf90:	04000074 	movhi	r16,1
    bf94:	84341604 	addi	r16,r16,-12200
    bf98:	e0bffd17 	ldw	r2,-12(fp)
    bf9c:	01400304 	movi	r5,12
    bfa0:	1009883a 	mov	r4,r2
    bfa4:	000ae740 	call	ae74 <__mulsi3>
    bfa8:	8085883a 	add	r2,r16,r2
    bfac:	10800204 	addi	r2,r2,8
    bfb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bfb4:	10000b0e 	bge	r2,zero,bfe4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bfb8:	01400304 	movi	r5,12
    bfbc:	e13ffd17 	ldw	r4,-12(fp)
    bfc0:	000ae740 	call	ae74 <__mulsi3>
    bfc4:	1007883a 	mov	r3,r2
    bfc8:	00800074 	movhi	r2,1
    bfcc:	10b41604 	addi	r2,r2,-12200
    bfd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfd4:	e0bffe17 	ldw	r2,-8(fp)
    bfd8:	18800226 	beq	r3,r2,bfe4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bfdc:	00bffcc4 	movi	r2,-13
    bfe0:	00000a06 	br	c00c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bfe4:	e0bffd17 	ldw	r2,-12(fp)
    bfe8:	10800044 	addi	r2,r2,1
    bfec:	e0bffd15 	stw	r2,-12(fp)
    bff0:	00800074 	movhi	r2,1
    bff4:	10b48904 	addi	r2,r2,-11740
    bff8:	10800017 	ldw	r2,0(r2)
    bffc:	1007883a 	mov	r3,r2
    c000:	e0bffd17 	ldw	r2,-12(fp)
    c004:	18bfd72e 	bgeu	r3,r2,bf64 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c008:	0005883a 	mov	r2,zero
}
    c00c:	e6ffff04 	addi	sp,fp,-4
    c010:	dfc00217 	ldw	ra,8(sp)
    c014:	df000117 	ldw	fp,4(sp)
    c018:	dc000017 	ldw	r16,0(sp)
    c01c:	dec00304 	addi	sp,sp,12
    c020:	f800283a 	ret

0000c024 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c024:	defff604 	addi	sp,sp,-40
    c028:	dfc00915 	stw	ra,36(sp)
    c02c:	df000815 	stw	fp,32(sp)
    c030:	df000804 	addi	fp,sp,32
    c034:	e13ffd15 	stw	r4,-12(fp)
    c038:	e17ffe15 	stw	r5,-8(fp)
    c03c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c040:	00bfffc4 	movi	r2,-1
    c044:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c048:	00bffb44 	movi	r2,-19
    c04c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c050:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c054:	01400074 	movhi	r5,1
    c058:	29748704 	addi	r5,r5,-11748
    c05c:	e13ffd17 	ldw	r4,-12(fp)
    c060:	000c1a80 	call	c1a8 <alt_find_dev>
    c064:	e0bff815 	stw	r2,-32(fp)
    c068:	e0bff817 	ldw	r2,-32(fp)
    c06c:	1000051e 	bne	r2,zero,c084 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c070:	e13ffd17 	ldw	r4,-12(fp)
    c074:	000c2380 	call	c238 <alt_find_file>
    c078:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c07c:	00800044 	movi	r2,1
    c080:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c084:	e0bff817 	ldw	r2,-32(fp)
    c088:	10002b26 	beq	r2,zero,c138 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c08c:	e13ff817 	ldw	r4,-32(fp)
    c090:	000c34c0 	call	c34c <alt_get_fd>
    c094:	e0bff915 	stw	r2,-28(fp)
    c098:	e0bff917 	ldw	r2,-28(fp)
    c09c:	1000030e 	bge	r2,zero,c0ac <open+0x88>
    {
      status = index;
    c0a0:	e0bff917 	ldw	r2,-28(fp)
    c0a4:	e0bffa15 	stw	r2,-24(fp)
    c0a8:	00002506 	br	c140 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c0ac:	01400304 	movi	r5,12
    c0b0:	e13ff917 	ldw	r4,-28(fp)
    c0b4:	000ae740 	call	ae74 <__mulsi3>
    c0b8:	1007883a 	mov	r3,r2
    c0bc:	00800074 	movhi	r2,1
    c0c0:	10b41604 	addi	r2,r2,-12200
    c0c4:	1885883a 	add	r2,r3,r2
    c0c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c0cc:	e0fffe17 	ldw	r3,-8(fp)
    c0d0:	00900034 	movhi	r2,16384
    c0d4:	10bfffc4 	addi	r2,r2,-1
    c0d8:	1886703a 	and	r3,r3,r2
    c0dc:	e0bffc17 	ldw	r2,-16(fp)
    c0e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c0e4:	e0bffb17 	ldw	r2,-20(fp)
    c0e8:	1000051e 	bne	r2,zero,c100 <open+0xdc>
    c0ec:	e13ffc17 	ldw	r4,-16(fp)
    c0f0:	000bf300 	call	bf30 <alt_file_locked>
    c0f4:	e0bffa15 	stw	r2,-24(fp)
    c0f8:	e0bffa17 	ldw	r2,-24(fp)
    c0fc:	10001016 	blt	r2,zero,c140 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c100:	e0bff817 	ldw	r2,-32(fp)
    c104:	10800317 	ldw	r2,12(r2)
    c108:	10000826 	beq	r2,zero,c12c <open+0x108>
    c10c:	e0bff817 	ldw	r2,-32(fp)
    c110:	10800317 	ldw	r2,12(r2)
    c114:	e1ffff17 	ldw	r7,-4(fp)
    c118:	e1bffe17 	ldw	r6,-8(fp)
    c11c:	e17ffd17 	ldw	r5,-12(fp)
    c120:	e13ffc17 	ldw	r4,-16(fp)
    c124:	103ee83a 	callr	r2
    c128:	00000106 	br	c130 <open+0x10c>
    c12c:	0005883a 	mov	r2,zero
    c130:	e0bffa15 	stw	r2,-24(fp)
    c134:	00000206 	br	c140 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c138:	00bffb44 	movi	r2,-19
    c13c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c140:	e0bffa17 	ldw	r2,-24(fp)
    c144:	1000090e 	bge	r2,zero,c16c <open+0x148>
  {
    alt_release_fd (index);  
    c148:	e13ff917 	ldw	r4,-28(fp)
    c14c:	000b6240 	call	b624 <alt_release_fd>
    ALT_ERRNO = -status;
    c150:	000bee00 	call	bee0 <alt_get_errno>
    c154:	1007883a 	mov	r3,r2
    c158:	e0bffa17 	ldw	r2,-24(fp)
    c15c:	0085c83a 	sub	r2,zero,r2
    c160:	18800015 	stw	r2,0(r3)
    return -1;
    c164:	00bfffc4 	movi	r2,-1
    c168:	00000106 	br	c170 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    c16c:	e0bff917 	ldw	r2,-28(fp)
}
    c170:	e037883a 	mov	sp,fp
    c174:	dfc00117 	ldw	ra,4(sp)
    c178:	df000017 	ldw	fp,0(sp)
    c17c:	dec00204 	addi	sp,sp,8
    c180:	f800283a 	ret

0000c184 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c184:	deffff04 	addi	sp,sp,-4
    c188:	df000015 	stw	fp,0(sp)
    c18c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c190:	000170fa 	wrctl	ienable,zero
}
    c194:	0001883a 	nop
    c198:	e037883a 	mov	sp,fp
    c19c:	df000017 	ldw	fp,0(sp)
    c1a0:	dec00104 	addi	sp,sp,4
    c1a4:	f800283a 	ret

0000c1a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c1a8:	defffa04 	addi	sp,sp,-24
    c1ac:	dfc00515 	stw	ra,20(sp)
    c1b0:	df000415 	stw	fp,16(sp)
    c1b4:	df000404 	addi	fp,sp,16
    c1b8:	e13ffe15 	stw	r4,-8(fp)
    c1bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c1c0:	e0bfff17 	ldw	r2,-4(fp)
    c1c4:	10800017 	ldw	r2,0(r2)
    c1c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c1cc:	e13ffe17 	ldw	r4,-8(fp)
    c1d0:	00081640 	call	8164 <strlen>
    c1d4:	10800044 	addi	r2,r2,1
    c1d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c1dc:	00000d06 	br	c214 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c1e0:	e0bffc17 	ldw	r2,-16(fp)
    c1e4:	10800217 	ldw	r2,8(r2)
    c1e8:	e0fffd17 	ldw	r3,-12(fp)
    c1ec:	180d883a 	mov	r6,r3
    c1f0:	e17ffe17 	ldw	r5,-8(fp)
    c1f4:	1009883a 	mov	r4,r2
    c1f8:	000c46c0 	call	c46c <memcmp>
    c1fc:	1000021e 	bne	r2,zero,c208 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c200:	e0bffc17 	ldw	r2,-16(fp)
    c204:	00000706 	br	c224 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c208:	e0bffc17 	ldw	r2,-16(fp)
    c20c:	10800017 	ldw	r2,0(r2)
    c210:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c214:	e0fffc17 	ldw	r3,-16(fp)
    c218:	e0bfff17 	ldw	r2,-4(fp)
    c21c:	18bff01e 	bne	r3,r2,c1e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c220:	0005883a 	mov	r2,zero
}
    c224:	e037883a 	mov	sp,fp
    c228:	dfc00117 	ldw	ra,4(sp)
    c22c:	df000017 	ldw	fp,0(sp)
    c230:	dec00204 	addi	sp,sp,8
    c234:	f800283a 	ret

0000c238 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c238:	defffb04 	addi	sp,sp,-20
    c23c:	dfc00415 	stw	ra,16(sp)
    c240:	df000315 	stw	fp,12(sp)
    c244:	df000304 	addi	fp,sp,12
    c248:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c24c:	00800074 	movhi	r2,1
    c250:	10b48504 	addi	r2,r2,-11756
    c254:	10800017 	ldw	r2,0(r2)
    c258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c25c:	00003106 	br	c324 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	10800217 	ldw	r2,8(r2)
    c268:	1009883a 	mov	r4,r2
    c26c:	00081640 	call	8164 <strlen>
    c270:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c274:	e0bffd17 	ldw	r2,-12(fp)
    c278:	10c00217 	ldw	r3,8(r2)
    c27c:	e0bffe17 	ldw	r2,-8(fp)
    c280:	10bfffc4 	addi	r2,r2,-1
    c284:	1885883a 	add	r2,r3,r2
    c288:	10800003 	ldbu	r2,0(r2)
    c28c:	10803fcc 	andi	r2,r2,255
    c290:	1080201c 	xori	r2,r2,128
    c294:	10bfe004 	addi	r2,r2,-128
    c298:	10800bd8 	cmpnei	r2,r2,47
    c29c:	1000031e 	bne	r2,zero,c2ac <alt_find_file+0x74>
    {
      len -= 1;
    c2a0:	e0bffe17 	ldw	r2,-8(fp)
    c2a4:	10bfffc4 	addi	r2,r2,-1
    c2a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c2ac:	e0bffe17 	ldw	r2,-8(fp)
    c2b0:	e0ffff17 	ldw	r3,-4(fp)
    c2b4:	1885883a 	add	r2,r3,r2
    c2b8:	10800003 	ldbu	r2,0(r2)
    c2bc:	10803fcc 	andi	r2,r2,255
    c2c0:	1080201c 	xori	r2,r2,128
    c2c4:	10bfe004 	addi	r2,r2,-128
    c2c8:	10800be0 	cmpeqi	r2,r2,47
    c2cc:	1000081e 	bne	r2,zero,c2f0 <alt_find_file+0xb8>
    c2d0:	e0bffe17 	ldw	r2,-8(fp)
    c2d4:	e0ffff17 	ldw	r3,-4(fp)
    c2d8:	1885883a 	add	r2,r3,r2
    c2dc:	10800003 	ldbu	r2,0(r2)
    c2e0:	10803fcc 	andi	r2,r2,255
    c2e4:	1080201c 	xori	r2,r2,128
    c2e8:	10bfe004 	addi	r2,r2,-128
    c2ec:	10000a1e 	bne	r2,zero,c318 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    c2f0:	e0bffd17 	ldw	r2,-12(fp)
    c2f4:	10800217 	ldw	r2,8(r2)
    c2f8:	e0fffe17 	ldw	r3,-8(fp)
    c2fc:	180d883a 	mov	r6,r3
    c300:	e17fff17 	ldw	r5,-4(fp)
    c304:	1009883a 	mov	r4,r2
    c308:	000c46c0 	call	c46c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c30c:	1000021e 	bne	r2,zero,c318 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c310:	e0bffd17 	ldw	r2,-12(fp)
    c314:	00000806 	br	c338 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    c318:	e0bffd17 	ldw	r2,-12(fp)
    c31c:	10800017 	ldw	r2,0(r2)
    c320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c324:	e0fffd17 	ldw	r3,-12(fp)
    c328:	00800074 	movhi	r2,1
    c32c:	10b48504 	addi	r2,r2,-11756
    c330:	18bfcb1e 	bne	r3,r2,c260 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c334:	0005883a 	mov	r2,zero
}
    c338:	e037883a 	mov	sp,fp
    c33c:	dfc00117 	ldw	ra,4(sp)
    c340:	df000017 	ldw	fp,0(sp)
    c344:	dec00204 	addi	sp,sp,8
    c348:	f800283a 	ret

0000c34c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c34c:	defffa04 	addi	sp,sp,-24
    c350:	dfc00515 	stw	ra,20(sp)
    c354:	df000415 	stw	fp,16(sp)
    c358:	dc000315 	stw	r16,12(sp)
    c35c:	df000404 	addi	fp,sp,16
    c360:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c364:	00bffa04 	movi	r2,-24
    c368:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c36c:	e03ffc15 	stw	zero,-16(fp)
    c370:	00002106 	br	c3f8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    c374:	04000074 	movhi	r16,1
    c378:	84341604 	addi	r16,r16,-12200
    c37c:	e0bffc17 	ldw	r2,-16(fp)
    c380:	01400304 	movi	r5,12
    c384:	1009883a 	mov	r4,r2
    c388:	000ae740 	call	ae74 <__mulsi3>
    c38c:	8085883a 	add	r2,r16,r2
    c390:	10800017 	ldw	r2,0(r2)
    c394:	1000151e 	bne	r2,zero,c3ec <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    c398:	04000074 	movhi	r16,1
    c39c:	84341604 	addi	r16,r16,-12200
    c3a0:	e0bffc17 	ldw	r2,-16(fp)
    c3a4:	01400304 	movi	r5,12
    c3a8:	1009883a 	mov	r4,r2
    c3ac:	000ae740 	call	ae74 <__mulsi3>
    c3b0:	8085883a 	add	r2,r16,r2
    c3b4:	e0fffe17 	ldw	r3,-8(fp)
    c3b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c3bc:	00800074 	movhi	r2,1
    c3c0:	10b48904 	addi	r2,r2,-11740
    c3c4:	10c00017 	ldw	r3,0(r2)
    c3c8:	e0bffc17 	ldw	r2,-16(fp)
    c3cc:	1880040e 	bge	r3,r2,c3e0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    c3d0:	00800074 	movhi	r2,1
    c3d4:	10b48904 	addi	r2,r2,-11740
    c3d8:	e0fffc17 	ldw	r3,-16(fp)
    c3dc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    c3e0:	e0bffc17 	ldw	r2,-16(fp)
    c3e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c3e8:	00000606 	br	c404 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c3ec:	e0bffc17 	ldw	r2,-16(fp)
    c3f0:	10800044 	addi	r2,r2,1
    c3f4:	e0bffc15 	stw	r2,-16(fp)
    c3f8:	e0bffc17 	ldw	r2,-16(fp)
    c3fc:	10800810 	cmplti	r2,r2,32
    c400:	103fdc1e 	bne	r2,zero,c374 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c404:	e0bffd17 	ldw	r2,-12(fp)
}
    c408:	e6ffff04 	addi	sp,fp,-4
    c40c:	dfc00217 	ldw	ra,8(sp)
    c410:	df000117 	ldw	fp,4(sp)
    c414:	dc000017 	ldw	r16,0(sp)
    c418:	dec00304 	addi	sp,sp,12
    c41c:	f800283a 	ret

0000c420 <atexit>:
    c420:	200b883a 	mov	r5,r4
    c424:	000f883a 	mov	r7,zero
    c428:	000d883a 	mov	r6,zero
    c42c:	0009883a 	mov	r4,zero
    c430:	000c4e81 	jmpi	c4e8 <__register_exitproc>

0000c434 <exit>:
    c434:	defffe04 	addi	sp,sp,-8
    c438:	000b883a 	mov	r5,zero
    c43c:	dc000015 	stw	r16,0(sp)
    c440:	dfc00115 	stw	ra,4(sp)
    c444:	2021883a 	mov	r16,r4
    c448:	000c6000 	call	c600 <__call_exitprocs>
    c44c:	00800074 	movhi	r2,1
    c450:	10b48104 	addi	r2,r2,-11772
    c454:	11000017 	ldw	r4,0(r2)
    c458:	20800f17 	ldw	r2,60(r4)
    c45c:	10000126 	beq	r2,zero,c464 <exit+0x30>
    c460:	103ee83a 	callr	r2
    c464:	8009883a 	mov	r4,r16
    c468:	000c7800 	call	c780 <_exit>

0000c46c <memcmp>:
    c46c:	01c000c4 	movi	r7,3
    c470:	3980192e 	bgeu	r7,r6,c4d8 <memcmp+0x6c>
    c474:	2144b03a 	or	r2,r4,r5
    c478:	11c4703a 	and	r2,r2,r7
    c47c:	10000f26 	beq	r2,zero,c4bc <memcmp+0x50>
    c480:	20800003 	ldbu	r2,0(r4)
    c484:	28c00003 	ldbu	r3,0(r5)
    c488:	10c0151e 	bne	r2,r3,c4e0 <memcmp+0x74>
    c48c:	31bfff84 	addi	r6,r6,-2
    c490:	01ffffc4 	movi	r7,-1
    c494:	00000406 	br	c4a8 <memcmp+0x3c>
    c498:	20800003 	ldbu	r2,0(r4)
    c49c:	28c00003 	ldbu	r3,0(r5)
    c4a0:	31bfffc4 	addi	r6,r6,-1
    c4a4:	10c00e1e 	bne	r2,r3,c4e0 <memcmp+0x74>
    c4a8:	21000044 	addi	r4,r4,1
    c4ac:	29400044 	addi	r5,r5,1
    c4b0:	31fff91e 	bne	r6,r7,c498 <memcmp+0x2c>
    c4b4:	0005883a 	mov	r2,zero
    c4b8:	f800283a 	ret
    c4bc:	20c00017 	ldw	r3,0(r4)
    c4c0:	28800017 	ldw	r2,0(r5)
    c4c4:	18bfee1e 	bne	r3,r2,c480 <memcmp+0x14>
    c4c8:	31bfff04 	addi	r6,r6,-4
    c4cc:	21000104 	addi	r4,r4,4
    c4d0:	29400104 	addi	r5,r5,4
    c4d4:	39bff936 	bltu	r7,r6,c4bc <memcmp+0x50>
    c4d8:	303fe91e 	bne	r6,zero,c480 <memcmp+0x14>
    c4dc:	003ff506 	br	c4b4 <memcmp+0x48>
    c4e0:	10c5c83a 	sub	r2,r2,r3
    c4e4:	f800283a 	ret

0000c4e8 <__register_exitproc>:
    c4e8:	defffa04 	addi	sp,sp,-24
    c4ec:	dc000315 	stw	r16,12(sp)
    c4f0:	04000074 	movhi	r16,1
    c4f4:	84348104 	addi	r16,r16,-11772
    c4f8:	80c00017 	ldw	r3,0(r16)
    c4fc:	dc400415 	stw	r17,16(sp)
    c500:	dfc00515 	stw	ra,20(sp)
    c504:	18805217 	ldw	r2,328(r3)
    c508:	2023883a 	mov	r17,r4
    c50c:	10003726 	beq	r2,zero,c5ec <__register_exitproc+0x104>
    c510:	10c00117 	ldw	r3,4(r2)
    c514:	010007c4 	movi	r4,31
    c518:	20c00e16 	blt	r4,r3,c554 <__register_exitproc+0x6c>
    c51c:	1a000044 	addi	r8,r3,1
    c520:	8800221e 	bne	r17,zero,c5ac <__register_exitproc+0xc4>
    c524:	18c00084 	addi	r3,r3,2
    c528:	18c7883a 	add	r3,r3,r3
    c52c:	18c7883a 	add	r3,r3,r3
    c530:	12000115 	stw	r8,4(r2)
    c534:	10c7883a 	add	r3,r2,r3
    c538:	19400015 	stw	r5,0(r3)
    c53c:	0005883a 	mov	r2,zero
    c540:	dfc00517 	ldw	ra,20(sp)
    c544:	dc400417 	ldw	r17,16(sp)
    c548:	dc000317 	ldw	r16,12(sp)
    c54c:	dec00604 	addi	sp,sp,24
    c550:	f800283a 	ret
    c554:	00800034 	movhi	r2,0
    c558:	10800004 	addi	r2,r2,0
    c55c:	10002626 	beq	r2,zero,c5f8 <__register_exitproc+0x110>
    c560:	01006404 	movi	r4,400
    c564:	d9400015 	stw	r5,0(sp)
    c568:	d9800115 	stw	r6,4(sp)
    c56c:	d9c00215 	stw	r7,8(sp)
    c570:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c574:	d9400017 	ldw	r5,0(sp)
    c578:	d9800117 	ldw	r6,4(sp)
    c57c:	d9c00217 	ldw	r7,8(sp)
    c580:	10001d26 	beq	r2,zero,c5f8 <__register_exitproc+0x110>
    c584:	81000017 	ldw	r4,0(r16)
    c588:	10000115 	stw	zero,4(r2)
    c58c:	02000044 	movi	r8,1
    c590:	22405217 	ldw	r9,328(r4)
    c594:	0007883a 	mov	r3,zero
    c598:	12400015 	stw	r9,0(r2)
    c59c:	20805215 	stw	r2,328(r4)
    c5a0:	10006215 	stw	zero,392(r2)
    c5a4:	10006315 	stw	zero,396(r2)
    c5a8:	883fde26 	beq	r17,zero,c524 <__register_exitproc+0x3c>
    c5ac:	18c9883a 	add	r4,r3,r3
    c5b0:	2109883a 	add	r4,r4,r4
    c5b4:	1109883a 	add	r4,r2,r4
    c5b8:	21802215 	stw	r6,136(r4)
    c5bc:	01800044 	movi	r6,1
    c5c0:	12406217 	ldw	r9,392(r2)
    c5c4:	30cc983a 	sll	r6,r6,r3
    c5c8:	4992b03a 	or	r9,r9,r6
    c5cc:	12406215 	stw	r9,392(r2)
    c5d0:	21c04215 	stw	r7,264(r4)
    c5d4:	01000084 	movi	r4,2
    c5d8:	893fd21e 	bne	r17,r4,c524 <__register_exitproc+0x3c>
    c5dc:	11006317 	ldw	r4,396(r2)
    c5e0:	218cb03a 	or	r6,r4,r6
    c5e4:	11806315 	stw	r6,396(r2)
    c5e8:	003fce06 	br	c524 <__register_exitproc+0x3c>
    c5ec:	18805304 	addi	r2,r3,332
    c5f0:	18805215 	stw	r2,328(r3)
    c5f4:	003fc606 	br	c510 <__register_exitproc+0x28>
    c5f8:	00bfffc4 	movi	r2,-1
    c5fc:	003fd006 	br	c540 <__register_exitproc+0x58>

0000c600 <__call_exitprocs>:
    c600:	defff504 	addi	sp,sp,-44
    c604:	df000915 	stw	fp,36(sp)
    c608:	dd400615 	stw	r21,24(sp)
    c60c:	dc800315 	stw	r18,12(sp)
    c610:	dfc00a15 	stw	ra,40(sp)
    c614:	ddc00815 	stw	r23,32(sp)
    c618:	dd800715 	stw	r22,28(sp)
    c61c:	dd000515 	stw	r20,20(sp)
    c620:	dcc00415 	stw	r19,16(sp)
    c624:	dc400215 	stw	r17,8(sp)
    c628:	dc000115 	stw	r16,4(sp)
    c62c:	d9000015 	stw	r4,0(sp)
    c630:	2839883a 	mov	fp,r5
    c634:	04800044 	movi	r18,1
    c638:	057fffc4 	movi	r21,-1
    c63c:	00800074 	movhi	r2,1
    c640:	10b48104 	addi	r2,r2,-11772
    c644:	12000017 	ldw	r8,0(r2)
    c648:	45005217 	ldw	r20,328(r8)
    c64c:	44c05204 	addi	r19,r8,328
    c650:	a0001c26 	beq	r20,zero,c6c4 <__call_exitprocs+0xc4>
    c654:	a0800117 	ldw	r2,4(r20)
    c658:	15ffffc4 	addi	r23,r2,-1
    c65c:	b8000d16 	blt	r23,zero,c694 <__call_exitprocs+0x94>
    c660:	14000044 	addi	r16,r2,1
    c664:	8421883a 	add	r16,r16,r16
    c668:	8421883a 	add	r16,r16,r16
    c66c:	84402004 	addi	r17,r16,128
    c670:	a463883a 	add	r17,r20,r17
    c674:	a421883a 	add	r16,r20,r16
    c678:	e0001e26 	beq	fp,zero,c6f4 <__call_exitprocs+0xf4>
    c67c:	80804017 	ldw	r2,256(r16)
    c680:	e0801c26 	beq	fp,r2,c6f4 <__call_exitprocs+0xf4>
    c684:	bdffffc4 	addi	r23,r23,-1
    c688:	843fff04 	addi	r16,r16,-4
    c68c:	8c7fff04 	addi	r17,r17,-4
    c690:	bd7ff91e 	bne	r23,r21,c678 <__call_exitprocs+0x78>
    c694:	00800034 	movhi	r2,0
    c698:	10800004 	addi	r2,r2,0
    c69c:	10000926 	beq	r2,zero,c6c4 <__call_exitprocs+0xc4>
    c6a0:	a0800117 	ldw	r2,4(r20)
    c6a4:	1000301e 	bne	r2,zero,c768 <__call_exitprocs+0x168>
    c6a8:	a0800017 	ldw	r2,0(r20)
    c6ac:	10003226 	beq	r2,zero,c778 <__call_exitprocs+0x178>
    c6b0:	a009883a 	mov	r4,r20
    c6b4:	98800015 	stw	r2,0(r19)
    c6b8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c6bc:	9d000017 	ldw	r20,0(r19)
    c6c0:	a03fe41e 	bne	r20,zero,c654 <__call_exitprocs+0x54>
    c6c4:	dfc00a17 	ldw	ra,40(sp)
    c6c8:	df000917 	ldw	fp,36(sp)
    c6cc:	ddc00817 	ldw	r23,32(sp)
    c6d0:	dd800717 	ldw	r22,28(sp)
    c6d4:	dd400617 	ldw	r21,24(sp)
    c6d8:	dd000517 	ldw	r20,20(sp)
    c6dc:	dcc00417 	ldw	r19,16(sp)
    c6e0:	dc800317 	ldw	r18,12(sp)
    c6e4:	dc400217 	ldw	r17,8(sp)
    c6e8:	dc000117 	ldw	r16,4(sp)
    c6ec:	dec00b04 	addi	sp,sp,44
    c6f0:	f800283a 	ret
    c6f4:	a0800117 	ldw	r2,4(r20)
    c6f8:	80c00017 	ldw	r3,0(r16)
    c6fc:	10bfffc4 	addi	r2,r2,-1
    c700:	15c01426 	beq	r2,r23,c754 <__call_exitprocs+0x154>
    c704:	80000015 	stw	zero,0(r16)
    c708:	183fde26 	beq	r3,zero,c684 <__call_exitprocs+0x84>
    c70c:	95c8983a 	sll	r4,r18,r23
    c710:	a0806217 	ldw	r2,392(r20)
    c714:	a5800117 	ldw	r22,4(r20)
    c718:	2084703a 	and	r2,r4,r2
    c71c:	10000b26 	beq	r2,zero,c74c <__call_exitprocs+0x14c>
    c720:	a0806317 	ldw	r2,396(r20)
    c724:	2088703a 	and	r4,r4,r2
    c728:	20000c1e 	bne	r4,zero,c75c <__call_exitprocs+0x15c>
    c72c:	89400017 	ldw	r5,0(r17)
    c730:	d9000017 	ldw	r4,0(sp)
    c734:	183ee83a 	callr	r3
    c738:	a0800117 	ldw	r2,4(r20)
    c73c:	15bfbf1e 	bne	r2,r22,c63c <__call_exitprocs+0x3c>
    c740:	98800017 	ldw	r2,0(r19)
    c744:	153fcf26 	beq	r2,r20,c684 <__call_exitprocs+0x84>
    c748:	003fbc06 	br	c63c <__call_exitprocs+0x3c>
    c74c:	183ee83a 	callr	r3
    c750:	003ff906 	br	c738 <__call_exitprocs+0x138>
    c754:	a5c00115 	stw	r23,4(r20)
    c758:	003feb06 	br	c708 <__call_exitprocs+0x108>
    c75c:	89000017 	ldw	r4,0(r17)
    c760:	183ee83a 	callr	r3
    c764:	003ff406 	br	c738 <__call_exitprocs+0x138>
    c768:	a0800017 	ldw	r2,0(r20)
    c76c:	a027883a 	mov	r19,r20
    c770:	1029883a 	mov	r20,r2
    c774:	003fb606 	br	c650 <__call_exitprocs+0x50>
    c778:	0005883a 	mov	r2,zero
    c77c:	003ffb06 	br	c76c <__call_exitprocs+0x16c>

0000c780 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c780:	defffd04 	addi	sp,sp,-12
    c784:	df000215 	stw	fp,8(sp)
    c788:	df000204 	addi	fp,sp,8
    c78c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c790:	0001883a 	nop
    c794:	e0bfff17 	ldw	r2,-4(fp)
    c798:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c79c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c7a0:	10000226 	beq	r2,zero,c7ac <_exit+0x2c>
    ALT_SIM_FAIL();
    c7a4:	002af070 	cmpltui	zero,zero,43969
    c7a8:	00000106 	br	c7b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c7ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c7b0:	003fff06 	br	c7b0 <_exit+0x30>
